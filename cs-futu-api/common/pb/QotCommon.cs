// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Qot_Common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QotCommon {

  /// <summary>Holder for reflection information generated from Qot_Common.proto</summary>
  public static partial class QotCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for Qot_Common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QotCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBRb3RfQ29tbW9uLnByb3RvEgpRb3RfQ29tbW9uGgxDb21tb24ucHJvdG8i",
            "KAoIU2VjdXJpdHkSDgoGbWFya2V0GAEgASgFEgwKBGNvZGUYAiABKAki9QEK",
            "BUtMaW5lEgwKBHRpbWUYASABKAkSDwoHaXNCbGFuaxgCIAEoCBIRCgloaWdo",
            "UHJpY2UYAyABKAESEQoJb3BlblByaWNlGAQgASgBEhAKCGxvd1ByaWNlGAUg",
            "ASgBEhIKCmNsb3NlUHJpY2UYBiABKAESFgoObGFzdENsb3NlUHJpY2UYByAB",
            "KAESDgoGdm9sdW1lGAggASgDEhAKCHR1cm5vdmVyGAkgASgBEhQKDHR1cm5v",
            "dmVyUmF0ZRgKIAEoARIKCgJwZRgLIAEoARISCgpjaGFuZ2VSYXRlGAwgASgB",
            "EhEKCXRpbWVzdGFtcBgNIAEoASLLAQoUT3B0aW9uQmFzaWNRb3RFeERhdGES",
            "EwoLc3RyaWtlUHJpY2UYASABKAESFAoMY29udHJhY3RTaXplGAIgASgFEhQK",
            "DG9wZW5JbnRlcmVzdBgDIAEoBRIZChFpbXBsaWVkVm9sYXRpbGl0eRgEIAEo",
            "ARIPCgdwcmVtaXVtGAUgASgBEg0KBWRlbHRhGAYgASgBEg0KBWdhbW1hGAcg",
            "ASgBEgwKBHZlZ2EYCCABKAESDQoFdGhldGEYCSABKAESCwoDcmhvGAogASgB",
            "IqsDCghCYXNpY1FvdBImCghzZWN1cml0eRgBIAEoCzIULlFvdF9Db21tb24u",
            "U2VjdXJpdHkSEwoLaXNTdXNwZW5kZWQYAiABKAgSEAoIbGlzdFRpbWUYAyAB",
            "KAkSEwoLcHJpY2VTcHJlYWQYBCABKAESEgoKdXBkYXRlVGltZRgFIAEoCRIR",
            "CgloaWdoUHJpY2UYBiABKAESEQoJb3BlblByaWNlGAcgASgBEhAKCGxvd1By",
            "aWNlGAggASgBEhAKCGN1clByaWNlGAkgASgBEhYKDmxhc3RDbG9zZVByaWNl",
            "GAogASgBEg4KBnZvbHVtZRgLIAEoAxIQCgh0dXJub3ZlchgMIAEoARIUCgx0",
            "dXJub3ZlclJhdGUYDSABKAESEQoJYW1wbGl0dWRlGA4gASgBEhIKCmRhcmtT",
            "dGF0dXMYDyABKAUSFQoNbGlzdFRpbWVzdGFtcBgRIAEoARIXCg91cGRhdGVU",
            "aW1lc3RhbXAYEiABKAESNgoMb3B0aW9uRXhEYXRhGBAgASgLMiAuUW90X0Nv",
            "bW1vbi5PcHRpb25CYXNpY1FvdEV4RGF0YSKoAQoJVGltZVNoYXJlEgwKBHRp",
            "bWUYASABKAkSDgoGbWludXRlGAIgASgFEg8KB2lzQmxhbmsYAyABKAgSDQoF",
            "cHJpY2UYBCABKAESFgoObGFzdENsb3NlUHJpY2UYBSABKAESEAoIYXZnUHJp",
            "Y2UYBiABKAESDgoGdm9sdW1lGAcgASgDEhAKCHR1cm5vdmVyGAggASgBEhEK",
            "CXRpbWVzdGFtcBgJIAEoASK1AQoTU2VjdXJpdHlTdGF0aWNCYXNpYxImCghz",
            "ZWN1cml0eRgBIAEoCzIULlFvdF9Db21tb24uU2VjdXJpdHkSCgoCaWQYAiAB",
            "KAMSDwoHbG90U2l6ZRgDIAEoBRIPCgdzZWNUeXBlGAQgASgFEgwKBG5hbWUY",
            "BSABKAkSEAoIbGlzdFRpbWUYBiABKAkSEQoJZGVsaXN0aW5nGAcgASgIEhUK",
            "DWxpc3RUaW1lc3RhbXAYCCABKAEiSAoTV2FycmFudFN0YXRpY0V4RGF0YRIM",
            "CgR0eXBlGAEgASgFEiMKBW93bmVyGAIgASgLMhQuUW90X0NvbW1vbi5TZWN1",
            "cml0eSKqAQoST3B0aW9uU3RhdGljRXhEYXRhEgwKBHR5cGUYASABKAUSIwoF",
            "b3duZXIYAiABKAsyFC5Rb3RfQ29tbW9uLlNlY3VyaXR5EhIKCnN0cmlrZVRp",
            "bWUYAyABKAkSEwoLc3RyaWtlUHJpY2UYBCABKAESDwoHc3VzcGVuZBgFIAEo",
            "CBIOCgZtYXJrZXQYBiABKAkSFwoPc3RyaWtlVGltZXN0YW1wGAcgASgBIrIB",
            "ChJTZWN1cml0eVN0YXRpY0luZm8SLgoFYmFzaWMYASABKAsyHy5Rb3RfQ29t",
            "bW9uLlNlY3VyaXR5U3RhdGljQmFzaWMSNgoNd2FycmFudEV4RGF0YRgCIAEo",
            "CzIfLlFvdF9Db21tb24uV2FycmFudFN0YXRpY0V4RGF0YRI0CgxvcHRpb25F",
            "eERhdGEYAyABKAsyHi5Rb3RfQ29tbW9uLk9wdGlvblN0YXRpY0V4RGF0YSIv",
            "CgZCcm9rZXISCgoCaWQYASABKAMSDAoEbmFtZRgCIAEoCRILCgNwb3MYAyAB",
            "KAUiwQEKBlRpY2tlchIMCgR0aW1lGAEgASgJEhAKCHNlcXVlbmNlGAIgASgD",
            "EgsKA2RpchgDIAEoBRINCgVwcmljZRgEIAEoARIOCgZ2b2x1bWUYBSABKAMS",
            "EAoIdHVybm92ZXIYBiABKAESEAoIcmVjdlRpbWUYByABKAESDAoEdHlwZRgI",
            "IAEoBRIQCgh0eXBlU2lnbhgJIAEoBRIUCgxwdXNoRGF0YVR5cGUYCiABKAUS",
            "EQoJdGltZXN0YW1wGAsgASgBIj8KCU9yZGVyQm9vaxINCgVwcmljZRgBIAEo",
            "ARIOCgZ2b2x1bWUYAiABKAMSEwoLb3JlZGVyQ291bnQYAyABKAUiMwoLT3Jk",
            "ZXJEZXRhaWwSEgoKb3JkZXJDb3VudBgBIAEoBRIQCghvcmRlclZvbBgCIAMo",
            "ASKbAQoSU2hhcmVIb2xkaW5nQ2hhbmdlEhIKCmhvbGRlck5hbWUYASABKAkS",
            "EgoKaG9sZGluZ1F0eRgCIAEoARIUCgxob2xkaW5nUmF0aW8YAyABKAESEQoJ",
            "Y2hhbmdlUXR5GAQgASgBEhMKC2NoYW5nZVJhdGlvGAUgASgBEgwKBHRpbWUY",
            "BiABKAkSEQoJdGltZXN0YW1wGAcgASgBIkYKB1N1YkluZm8SDwoHc3ViVHlw",
            "ZRgBIAEoBRIqCgxzZWN1cml0eUxpc3QYAiADKAsyFC5Rb3RfQ29tbW9uLlNl",
            "Y3VyaXR5ImEKC0Nvbm5TdWJJbmZvEigKC3N1YkluZm9MaXN0GAEgAygLMhMu",
            "UW90X0NvbW1vbi5TdWJJbmZvEhEKCXVzZWRRdW90YRgCIAEoBRIVCg1pc093",
            "bkNvbm5EYXRhGAMgASgIIlEKCVBsYXRlSW5mbxIjCgVwbGF0ZRgBIAEoCzIU",
            "LlFvdF9Db21tb24uU2VjdXJpdHkSDAoEbmFtZRgCIAEoCRIRCglwbGF0ZVR5",
            "cGUYAyABKAUiugMKBVJlaGFiEgwKBHRpbWUYASABKAkSFgoOY29tcGFueUFj",
            "dEZsYWcYAiABKAMSEgoKZndkRmFjdG9yQRgDIAEoARISCgpmd2RGYWN0b3JC",
            "GAQgASgBEhIKCmJ3ZEZhY3RvckEYBSABKAESEgoKYndkRmFjdG9yQhgGIAEo",
            "ARIRCglzcGxpdEJhc2UYByABKAUSEAoIc3BsaXRFcnQYCCABKAUSEAoIam9p",
            "bkJhc2UYCSABKAUSDwoHam9pbkVydBgKIAEoBRIRCglib251c0Jhc2UYCyAB",
            "KAUSEAoIYm9udXNFcnQYDCABKAUSFAoMdHJhbnNmZXJCYXNlGA0gASgFEhMK",
            "C3RyYW5zZmVyRXJ0GA4gASgFEhEKCWFsbG90QmFzZRgPIAEoBRIQCghhbGxv",
            "dEVydBgQIAEoBRISCgphbGxvdFByaWNlGBEgASgBEg8KB2FkZEJhc2UYEiAB",
            "KAUSDgoGYWRkRXJ0GBMgASgFEhAKCGFkZFByaWNlGBQgASgBEhAKCGRpdmlk",
            "ZW5kGBUgASgBEhIKCnNwRGl2aWRlbmQYFiABKAESEQoJdGltZXN0YW1wGBcg",
            "ASgBKqsBCglRb3RNYXJrZXQSFQoRUW90TWFya2V0X1Vua25vd24QABIZChVR",
            "b3RNYXJrZXRfSEtfU2VjdXJpdHkQARIXChNRb3RNYXJrZXRfSEtfRnV0dXJl",
            "EAISGQoVUW90TWFya2V0X1VTX1NlY3VyaXR5EAsSGwoXUW90TWFya2V0X0NO",
            "U0hfU2VjdXJpdHkQFRIbChdRb3RNYXJrZXRfQ05TWl9TZWN1cml0eRAWKoEC",
            "CgxTZWN1cml0eVR5cGUSGAoUU2VjdXJpdHlUeXBlX1Vua25vd24QABIVChFT",
            "ZWN1cml0eVR5cGVfQm9uZBABEhUKEVNlY3VyaXR5VHlwZV9Cd3J0EAISFQoR",
            "U2VjdXJpdHlUeXBlX0VxdHkQAxIWChJTZWN1cml0eVR5cGVfVHJ1c3QQBBIY",
            "ChRTZWN1cml0eVR5cGVfV2FycmFudBAFEhYKElNlY3VyaXR5VHlwZV9JbmRl",
            "eBAGEhYKElNlY3VyaXR5VHlwZV9QbGF0ZRAHEhUKEVNlY3VyaXR5VHlwZV9E",
            "cnZ0EAgSGQoVU2VjdXJpdHlUeXBlX1BsYXRlU2V0EAkqigEKDFBsYXRlU2V0",
            "VHlwZRIUChBQbGF0ZVNldFR5cGVfQWxsEAASGQoVUGxhdGVTZXRUeXBlX0lu",
            "ZHVzdHJ5EAESFwoTUGxhdGVTZXRUeXBlX1JlZ2lvbhACEhgKFFBsYXRlU2V0",
            "VHlwZV9Db25jZXB0EAMSFgoSUGxhdGVTZXRUeXBlX090aGVyEAQqfQoLV2Fy",
            "cmFudFR5cGUSFwoTV2FycmFudFR5cGVfVW5rbm93bhAAEhMKD1dhcnJhbnRU",
            "eXBlX0J1eRABEhQKEFdhcnJhbnRUeXBlX1NlbGwQAhIUChBXYXJyYW50VHlw",
            "ZV9CdWxsEAMSFAoQV2FycmFudFR5cGVfQmVhchAEKk0KCk9wdGlvblR5cGUS",
            "FgoST3B0aW9uVHlwZV9Vbmtub3duEAASEwoPT3B0aW9uVHlwZV9DYWxsEAES",
            "EgoOT3B0aW9uVHlwZV9QdXQQAirDBAoOUW90TWFya2V0U3RhdGUSFwoTUW90",
            "TWFya2V0U3RhdGVfTm9uZRAAEhoKFlFvdE1hcmtldFN0YXRlX0F1Y3Rpb24Q",
            "ARIeChpRb3RNYXJrZXRTdGF0ZV9XYWl0aW5nT3BlbhACEhoKFlFvdE1hcmtl",
            "dFN0YXRlX01vcm5pbmcQAxIXChNRb3RNYXJrZXRTdGF0ZV9SZXN0EAQSHAoY",
            "UW90TWFya2V0U3RhdGVfQWZ0ZXJub29uEAUSGQoVUW90TWFya2V0U3RhdGVf",
            "Q2xvc2VkEAYSIQodUW90TWFya2V0U3RhdGVfUHJlTWFya2V0QmVnaW4QCBIf",
            "ChtRb3RNYXJrZXRTdGF0ZV9QcmVNYXJrZXRFbmQQCRIiCh5Rb3RNYXJrZXRT",
            "dGF0ZV9BZnRlckhvdXJzQmVnaW4QChIgChxRb3RNYXJrZXRTdGF0ZV9BZnRl",
            "ckhvdXJzRW5kEAsSHAoYUW90TWFya2V0U3RhdGVfTmlnaHRPcGVuEA0SGwoX",
            "UW90TWFya2V0U3RhdGVfTmlnaHRFbmQQDhIgChxRb3RNYXJrZXRTdGF0ZV9G",
            "dXR1cmVEYXlPcGVuEA8SIQodUW90TWFya2V0U3RhdGVfRnV0dXJlRGF5QnJl",
            "YWsQEBIhCh1Rb3RNYXJrZXRTdGF0ZV9GdXR1cmVEYXlDbG9zZRAREicKI1Fv",
            "dE1hcmtldFN0YXRlX0Z1dHVyZURheVdhaXRGb3JPcGVuEBISGAoUUW90TWFy",
            "a2V0U3RhdGVfSGtDYXMQEypgCg1UcmFkZURhdGVUeXBlEhcKE1RyYWRlRGF0",
            "ZVR5cGVfV2hvbGUQABIZChVUcmFkZURhdGVUeXBlX01vcm5pbmcQARIbChdU",
            "cmFkZURhdGVUeXBlX0FmdGVybm9vbhACKk4KCVJlaGFiVHlwZRISCg5SZWhh",
            "YlR5cGVfTm9uZRAAEhUKEVJlaGFiVHlwZV9Gb3J3YXJkEAESFgoSUmVoYWJU",
            "eXBlX0JhY2t3YXJkEAIq3QEKBktMVHlwZRISCg5LTFR5cGVfVW5rbm93bhAA",
            "Eg8KC0tMVHlwZV8xTWluEAESDgoKS0xUeXBlX0RheRACEg8KC0tMVHlwZV9X",
            "ZWVrEAMSEAoMS0xUeXBlX01vbnRoEAQSDwoLS0xUeXBlX1llYXIQBRIPCgtL",
            "TFR5cGVfNU1pbhAGEhAKDEtMVHlwZV8xNU1pbhAHEhAKDEtMVHlwZV8zME1p",
            "bhAIEhAKDEtMVHlwZV82ME1pbhAJEg8KC0tMVHlwZV8zTWluEAoSEgoOS0xU",
            "eXBlX1F1YXJ0ZXIQCyr1AQoIS0xGaWVsZHMSEQoNS0xGaWVsZHNfTm9uZRAA",
            "EhEKDUtMRmllbGRzX0hpZ2gQARIRCg1LTEZpZWxkc19PcGVuEAISEAoMS0xG",
            "aWVsZHNfTG93EAQSEgoOS0xGaWVsZHNfQ2xvc2UQCBIWChJLTEZpZWxkc19M",
            "YXN0Q2xvc2UQEBITCg9LTEZpZWxkc19Wb2x1bWUQIBIVChFLTEZpZWxkc19U",
            "dXJub3ZlchBAEhoKFUtMRmllbGRzX1R1cm5vdmVyUmF0ZRCAARIQCgtLTEZp",
            "ZWxkc19QRRCAAhIYChNLTEZpZWxkc19DaGFuZ2VSYXRlEIAEKoMDCgdTdWJU",
            "eXBlEhAKDFN1YlR5cGVfTm9uZRAAEhEKDVN1YlR5cGVfQmFzaWMQARIVChFT",
            "dWJUeXBlX09yZGVyQm9vaxACEhIKDlN1YlR5cGVfVGlja2VyEAQSDgoKU3Vi",
            "VHlwZV9SVBAFEhIKDlN1YlR5cGVfS0xfRGF5EAYSEwoPU3ViVHlwZV9LTF81",
            "TWluEAcSFAoQU3ViVHlwZV9LTF8xNU1pbhAIEhQKEFN1YlR5cGVfS0xfMzBN",
            "aW4QCRIUChBTdWJUeXBlX0tMXzYwTWluEAoSEwoPU3ViVHlwZV9LTF8xTWlu",
            "EAsSEwoPU3ViVHlwZV9LTF9XZWVrEAwSFAoQU3ViVHlwZV9LTF9Nb250aBAN",
            "EhIKDlN1YlR5cGVfQnJva2VyEA4SFgoSU3ViVHlwZV9LTF9RdXJhdGVyEA8S",
            "EwoPU3ViVHlwZV9LTF9ZZWFyEBASEwoPU3ViVHlwZV9LTF8zTWluEBESFwoT",
            "U3ViVHlwZV9PcmRlckRldGFpbBASKn0KD1RpY2tlckRpcmVjdGlvbhIbChdU",
            "aWNrZXJEaXJlY3Rpb25fVW5rbm93bhAAEhcKE1RpY2tlckRpcmVjdGlvbl9C",
            "aWQQARIXChNUaWNrZXJEaXJlY3Rpb25fQXNrEAISGwoXVGlja2VyRGlyZWN0",
            "aW9uX05ldXRyYWwQAyqHBwoKVGlja2VyVHlwZRIWChJUaWNrZXJUeXBlX1Vu",
            "a25vd24QABIYChRUaWNrZXJUeXBlX0F1dG9tYXRjaBABEhMKD1RpY2tlclR5",
            "cGVfTGF0ZRACEhwKGFRpY2tlclR5cGVfTm9uZUF1dG9tYXRjaBADEh0KGVRp",
            "Y2tlclR5cGVfSW50ZXJBdXRvbWF0Y2gQBBIhCh1UaWNrZXJUeXBlX0ludGVy",
            "Tm9uZUF1dG9tYXRjaBAFEhUKEVRpY2tlclR5cGVfT2RkTG90EAYSFgoSVGlj",
            "a2VyVHlwZV9BdWN0aW9uEAcSEwoPVGlja2VyVHlwZV9CdWxrEAgSFAoQVGlj",
            "a2VyVHlwZV9DcmFzaBAJEhoKFlRpY2tlclR5cGVfQ3Jvc3NNYXJrZXQQChIX",
            "ChNUaWNrZXJUeXBlX0J1bGtTb2xkEAsSGgoWVGlja2VyVHlwZV9GcmVlT25C",
            "b2FyZBAMEhsKF1RpY2tlclR5cGVfUnVsZTEyN09yMTU1EA0SFAoQVGlja2Vy",
            "VHlwZV9EZWxheRAOEiUKIVRpY2tlclR5cGVfTWFya2V0Q2VudGVyQ2xvc2VQ",
            "cmljZRAPEhYKElRpY2tlclR5cGVfTmV4dERheRAQEiIKHlRpY2tlclR5cGVf",
            "TWFya2V0Q2VudGVyT3BlbmluZxAREiIKHlRpY2tlclR5cGVfUHJpb3JSZWZl",
            "cmVuY2VQcmljZRASEiQKIFRpY2tlclR5cGVfTWFya2V0Q2VudGVyT3BlblBy",
            "aWNlEBMSFQoRVGlja2VyVHlwZV9TZWxsZXIQFBIQCgxUaWNrZXJUeXBlX1QQ",
            "FRIjCh9UaWNrZXJUeXBlX0V4dGVuZGVkVHJhZGluZ0hvdXJzEBYSGQoVVGlj",
            "a2VyVHlwZV9Db250aW5nZW50EBcSGwoXVGlja2VyVHlwZV9BdmVyYWdlUHJp",
            "Y2UQGBIWChJUaWNrZXJUeXBlX09UQ1NvbGQQGRIgChxUaWNrZXJUeXBlX09k",
            "ZExvdENyb3NzTWFya2V0EBoSIQodVGlja2VyVHlwZV9EZXJpdmF0aXZlbHlQ",
            "cmljZWQQGxIeChpUaWNrZXJUeXBlX1JlT3BlbmluZ1ByaWNlZBAcEhwKGFRp",
            "Y2tlclR5cGVfQ2xvc2luZ1ByaWNlZBAdEiYKIlRpY2tlclR5cGVfQ29tcHJl",
            "aGVuc2l2ZURlbGF5UHJpY2UQHipNCgpEYXJrU3RhdHVzEhMKD0RhcmtTdGF0",
            "dXNfTm9uZRAAEhYKEkRhcmtTdGF0dXNfVHJhZGluZxABEhIKDkRhcmtTdGF0",
            "dXNfRW5kEAIqgQEKDkhvbGRlckNhdGVnb3J5EhkKFUhvbGRlckNhdGVnb3J5",
            "X1Vua25vdxAAEhkKFUhvbGRlckNhdGVnb3J5X0FnZW5jeRABEhcKE0hvbGRl",
            "ckNhdGVnb3J5X0Z1bmQQAhIgChxIb2xkZXJDYXRlZ29yeV9TZW5pb3JNYW5h",
            "Z2VyEAMqdgoMUHVzaERhdGFUeXBlEhcKE1B1c2hEYXRhVHlwZV9Vbmtub3cQ",
            "ABIZChVQdXNoRGF0YVR5cGVfUmVhbHRpbWUQARIaChZQdXNoRGF0YVR5cGVf",
            "QnlEaXNDb25uEAISFgoSUHVzaERhdGFUeXBlX0NhY2hlEAMq8wYKCVNvcnRG",
            "aWVsZBIUChBTb3J0RmllbGRfVW5rbm93EAASEgoOU29ydEZpZWxkX0NvZGUQ",
            "ARIWChJTb3J0RmllbGRfQ3VyUHJpY2UQAhIcChhTb3J0RmllbGRfUHJpY2VD",
            "aGFuZ2VWYWwQAxIYChRTb3J0RmllbGRfQ2hhbmdlUmF0ZRAEEhQKEFNvcnRG",
            "aWVsZF9TdGF0dXMQBRIWChJTb3J0RmllbGRfQmlkUHJpY2UQBhIWChJTb3J0",
            "RmllbGRfQXNrUHJpY2UQBxIUChBTb3J0RmllbGRfQmlkVm9sEAgSFAoQU29y",
            "dEZpZWxkX0Fza1ZvbBAJEhQKEFNvcnRGaWVsZF9Wb2x1bWUQChIWChJTb3J0",
            "RmllbGRfVHVybm92ZXIQCxITCg9Tb3J0RmllbGRfU2NvcmUQDBIVChFTb3J0",
            "RmllbGRfUHJlbWl1bRANEh8KG1NvcnRGaWVsZF9FZmZlY3RpdmVMZXZlcmFn",
            "ZRAOEhMKD1NvcnRGaWVsZF9EZWx0YRAPEh8KG1NvcnRGaWVsZF9JbXBsaWVk",
            "Vm9sYXRpbGl0eRAQEhIKDlNvcnRGaWVsZF9UeXBlEBESGQoVU29ydEZpZWxk",
            "X1N0cmlrZVByaWNlEBISHAoYU29ydEZpZWxkX0JyZWFrRXZlblBvaW50EBMS",
            "GgoWU29ydEZpZWxkX01hdHVyaXR5VGltZRAUEhYKElNvcnRGaWVsZF9MaXN0",
            "VGltZRAVEhsKF1NvcnRGaWVsZF9MYXN0VHJhZGVUaW1lEBYSFgoSU29ydEZp",
            "ZWxkX0xldmVyYWdlEBcSGAoUU29ydEZpZWxkX0luT3V0TW9uZXkQGBIbChdT",
            "b3J0RmllbGRfUmVjb3ZlcnlQcmljZRAZEhkKFVNvcnRGaWVsZF9DaGFuZ2VQ",
            "cmljZRAaEhQKEFNvcnRGaWVsZF9DaGFuZ2UQGxIYChRTb3J0RmllbGRfU3Ry",
            "ZWV0UmF0ZRAcEhcKE1NvcnRGaWVsZF9TdHJlZXRWb2wQHRIXChNTb3J0Rmll",
            "bGRfQW1wbGl0dWRlEB4SGQoVU29ydEZpZWxkX1dhcnJhbnROYW1lEB8SFAoQ",
            "U29ydEZpZWxkX0lzc3VlchAgEhUKEVNvcnRGaWVsZF9Mb3RTaXplECESFwoT",
            "U29ydEZpZWxkX0lzc3VlU2l6ZRAiKuUCCgZJc3N1ZXISEQoNSXNzdWVyX1Vu",
            "a25vdxAAEg0KCUlzc3Vlcl9TRxABEg0KCUlzc3Vlcl9CUBACEg0KCUlzc3Vl",
            "cl9DUxADEg0KCUlzc3Vlcl9DVBAEEg0KCUlzc3Vlcl9FQRAFEg0KCUlzc3Vl",
            "cl9HUxAGEg0KCUlzc3Vlcl9IUxAHEg0KCUlzc3Vlcl9KUBAIEg0KCUlzc3Vl",
            "cl9NQhAJEg0KCUlzc3Vlcl9TQxAKEg0KCUlzc3Vlcl9VQhALEg0KCUlzc3Vl",
            "cl9CSRAMEg0KCUlzc3Vlcl9EQhANEg0KCUlzc3Vlcl9EQxAOEg0KCUlzc3Vl",
            "cl9NTBAPEg0KCUlzc3Vlcl9OTRAQEg0KCUlzc3Vlcl9SQhAREg0KCUlzc3Vl",
            "cl9SUxASEg0KCUlzc3Vlcl9CQxATEg0KCUlzc3Vlcl9IVBAUEg0KCUlzc3Vl",
            "cl9WVBAVEg0KCUlzc3Vlcl9LQxAWKpcBCglJcG9QZXJpb2QSFAoQSXBvUGVy",
            "aW9kX1Vua25vdxAAEhMKD0lwb1BlcmlvZF9Ub2RheRABEhYKEklwb1Blcmlv",
            "ZF9Ub21vcnJvdxACEhYKEklwb1BlcmlvZF9OZXh0d2VlaxADEhYKEklwb1Bl",
            "cmlvZF9MYXN0d2VlaxAEEhcKE0lwb1BlcmlvZF9MYXN0bW9udGgQBSpOCglQ",
            "cmljZVR5cGUSFAoQUHJpY2VUeXBlX1Vua25vdxAAEhUKEVByaWNlVHlwZV9P",
            "dXRzaWRlEAESFAoQUHJpY2VUeXBlX1dpdGhJbhACKp0BCg1XYXJyYW50U3Rh",
            "dHVzEhgKFFdhcnJhbnRTdGF0dXNfVW5rbm93EAASGAoUV2FycmFudFN0YXR1",
            "c19Ob3JtYWwQARIZChVXYXJyYW50U3RhdHVzX1N1c3BlbmQQAhIbChdXYXJy",
            "YW50U3RhdHVzX1N0b3BUcmFkZRADEiAKHFdhcnJhbnRTdGF0dXNfUGVuZGlu",
            "Z0xpc3RpbmcQBCraAQoKQ29tcGFueUFjdBITCg9Db21wYW55QWN0X05vbmUQ",
            "ABIUChBDb21wYW55QWN0X1NwbGl0EAESEwoPQ29tcGFueUFjdF9Kb2luEAIS",
            "FAoQQ29tcGFueUFjdF9Cb251cxAEEhcKE0NvbXBhbnlBY3RfVHJhbnNmZXIQ",
            "CBIUChBDb21wYW55QWN0X0FsbG90EBASEgoOQ29tcGFueUFjdF9BZGQQIBIX",
            "ChNDb21wYW55QWN0X0RpdmlkZW5kEEASGgoVQ29tcGFueUFjdF9TUERpdmlk",
            "ZW5kEIABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::QotCommon.QotMarket), typeof(global::QotCommon.SecurityType), typeof(global::QotCommon.PlateSetType), typeof(global::QotCommon.WarrantType), typeof(global::QotCommon.OptionType), typeof(global::QotCommon.QotMarketState), typeof(global::QotCommon.TradeDateType), typeof(global::QotCommon.RehabType), typeof(global::QotCommon.KLType), typeof(global::QotCommon.KLFields), typeof(global::QotCommon.SubType), typeof(global::QotCommon.TickerDirection), typeof(global::QotCommon.TickerType), typeof(global::QotCommon.DarkStatus), typeof(global::QotCommon.HolderCategory), typeof(global::QotCommon.PushDataType), typeof(global::QotCommon.SortField), typeof(global::QotCommon.Issuer), typeof(global::QotCommon.IpoPeriod), typeof(global::QotCommon.PriceType), typeof(global::QotCommon.WarrantStatus), typeof(global::QotCommon.CompanyAct), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.Security), global::QotCommon.Security.Parser, new[]{ "Market", "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.KLine), global::QotCommon.KLine.Parser, new[]{ "Time", "IsBlank", "HighPrice", "OpenPrice", "LowPrice", "ClosePrice", "LastClosePrice", "Volume", "Turnover", "TurnoverRate", "Pe", "ChangeRate", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.OptionBasicQotExData), global::QotCommon.OptionBasicQotExData.Parser, new[]{ "StrikePrice", "ContractSize", "OpenInterest", "ImpliedVolatility", "Premium", "Delta", "Gamma", "Vega", "Theta", "Rho" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.BasicQot), global::QotCommon.BasicQot.Parser, new[]{ "Security", "IsSuspended", "ListTime", "PriceSpread", "UpdateTime", "HighPrice", "OpenPrice", "LowPrice", "CurPrice", "LastClosePrice", "Volume", "Turnover", "TurnoverRate", "Amplitude", "DarkStatus", "ListTimestamp", "UpdateTimestamp", "OptionExData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.TimeShare), global::QotCommon.TimeShare.Parser, new[]{ "Time", "Minute", "IsBlank", "Price", "LastClosePrice", "AvgPrice", "Volume", "Turnover", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.SecurityStaticBasic), global::QotCommon.SecurityStaticBasic.Parser, new[]{ "Security", "Id", "LotSize", "SecType", "Name", "ListTime", "Delisting", "ListTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.WarrantStaticExData), global::QotCommon.WarrantStaticExData.Parser, new[]{ "Type", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.OptionStaticExData), global::QotCommon.OptionStaticExData.Parser, new[]{ "Type", "Owner", "StrikeTime", "StrikePrice", "Suspend", "Market", "StrikeTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.SecurityStaticInfo), global::QotCommon.SecurityStaticInfo.Parser, new[]{ "Basic", "WarrantExData", "OptionExData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.Broker), global::QotCommon.Broker.Parser, new[]{ "Id", "Name", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.Ticker), global::QotCommon.Ticker.Parser, new[]{ "Time", "Sequence", "Dir", "Price", "Volume", "Turnover", "RecvTime", "Type", "TypeSign", "PushDataType", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.OrderBook), global::QotCommon.OrderBook.Parser, new[]{ "Price", "Volume", "OrederCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.OrderDetail), global::QotCommon.OrderDetail.Parser, new[]{ "OrderCount", "OrderVol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.ShareHoldingChange), global::QotCommon.ShareHoldingChange.Parser, new[]{ "HolderName", "HoldingQty", "HoldingRatio", "ChangeQty", "ChangeRatio", "Time", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.SubInfo), global::QotCommon.SubInfo.Parser, new[]{ "SubType", "SecurityList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.ConnSubInfo), global::QotCommon.ConnSubInfo.Parser, new[]{ "SubInfoList", "UsedQuota", "IsOwnConnData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.PlateInfo), global::QotCommon.PlateInfo.Parser, new[]{ "Plate", "Name", "PlateType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotCommon.Rehab), global::QotCommon.Rehab.Parser, new[]{ "Time", "CompanyActFlag", "FwdFactorA", "FwdFactorB", "BwdFactorA", "BwdFactorB", "SplitBase", "SplitErt", "JoinBase", "JoinErt", "BonusBase", "BonusErt", "TransferBase", "TransferErt", "AllotBase", "AllotErt", "AllotPrice", "AddBase", "AddErt", "AddPrice", "Dividend", "SpDividend", "Timestamp" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum QotMarket {
    /// <summary>
    ///未知市场
    /// </summary>
    [pbr::OriginalName("QotMarket_Unknown")] Unknown = 0,
    /// <summary>
    ///港股
    /// </summary>
    [pbr::OriginalName("QotMarket_HK_Security")] HkSecurity = 1,
    /// <summary>
    ///港期货(目前是恒指的当月、下月期货行情)
    /// </summary>
    [pbr::OriginalName("QotMarket_HK_Future")] HkFuture = 2,
    /// <summary>
    ///美股
    /// </summary>
    [pbr::OriginalName("QotMarket_US_Security")] UsSecurity = 11,
    /// <summary>
    ///沪股
    /// </summary>
    [pbr::OriginalName("QotMarket_CNSH_Security")] CnshSecurity = 21,
    /// <summary>
    ///深股
    /// </summary>
    [pbr::OriginalName("QotMarket_CNSZ_Security")] CnszSecurity = 22,
  }

  public enum SecurityType {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("SecurityType_Unknown")] Unknown = 0,
    /// <summary>
    ///债券
    /// </summary>
    [pbr::OriginalName("SecurityType_Bond")] Bond = 1,
    /// <summary>
    ///一揽子权证
    /// </summary>
    [pbr::OriginalName("SecurityType_Bwrt")] Bwrt = 2,
    /// <summary>
    ///正股
    /// </summary>
    [pbr::OriginalName("SecurityType_Eqty")] Eqty = 3,
    /// <summary>
    ///信托,基金
    /// </summary>
    [pbr::OriginalName("SecurityType_Trust")] Trust = 4,
    /// <summary>
    ///涡轮
    /// </summary>
    [pbr::OriginalName("SecurityType_Warrant")] Warrant = 5,
    /// <summary>
    ///指数
    /// </summary>
    [pbr::OriginalName("SecurityType_Index")] Index = 6,
    /// <summary>
    ///板块
    /// </summary>
    [pbr::OriginalName("SecurityType_Plate")] Plate = 7,
    /// <summary>
    ///期权
    /// </summary>
    [pbr::OriginalName("SecurityType_Drvt")] Drvt = 8,
    /// <summary>
    ///板块集
    /// </summary>
    [pbr::OriginalName("SecurityType_PlateSet")] PlateSet = 9,
  }

  public enum PlateSetType {
    /// <summary>
    ///所有板块
    /// </summary>
    [pbr::OriginalName("PlateSetType_All")] All = 0,
    /// <summary>
    ///行业板块
    /// </summary>
    [pbr::OriginalName("PlateSetType_Industry")] Industry = 1,
    /// <summary>
    ///地域板块,港美股市场的地域分类数据暂为空
    /// </summary>
    [pbr::OriginalName("PlateSetType_Region")] Region = 2,
    /// <summary>
    ///概念板块
    /// </summary>
    [pbr::OriginalName("PlateSetType_Concept")] Concept = 3,
    /// <summary>
    ///其他板块, 仅用于3207（获取股票所属板块）协议返回,不可作为其他协议的请求参数
    /// </summary>
    [pbr::OriginalName("PlateSetType_Other")] Other = 4,
  }

  public enum WarrantType {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("WarrantType_Unknown")] Unknown = 0,
    /// <summary>
    ///认购
    /// </summary>
    [pbr::OriginalName("WarrantType_Buy")] Buy = 1,
    /// <summary>
    ///认沽
    /// </summary>
    [pbr::OriginalName("WarrantType_Sell")] Sell = 2,
    /// <summary>
    ///牛
    /// </summary>
    [pbr::OriginalName("WarrantType_Bull")] Bull = 3,
    /// <summary>
    ///熊
    /// </summary>
    [pbr::OriginalName("WarrantType_Bear")] Bear = 4,
  }

  public enum OptionType {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("OptionType_Unknown")] Unknown = 0,
    /// <summary>
    ///涨
    /// </summary>
    [pbr::OriginalName("OptionType_Call")] Call = 1,
    /// <summary>
    ///跌
    /// </summary>
    [pbr::OriginalName("OptionType_Put")] Put = 2,
  }

  public enum QotMarketState {
    /// <summary>
    /// 无交易,美股未开盘
    /// </summary>
    [pbr::OriginalName("QotMarketState_None")] None = 0,
    /// <summary>
    /// 竞价 
    /// </summary>
    [pbr::OriginalName("QotMarketState_Auction")] Auction = 1,
    /// <summary>
    /// 早盘前等待开盘
    /// </summary>
    [pbr::OriginalName("QotMarketState_WaitingOpen")] WaitingOpen = 2,
    /// <summary>
    /// 早盘 
    /// </summary>
    [pbr::OriginalName("QotMarketState_Morning")] Morning = 3,
    /// <summary>
    /// 午间休市 
    /// </summary>
    [pbr::OriginalName("QotMarketState_Rest")] Rest = 4,
    /// <summary>
    /// 午盘 
    /// </summary>
    [pbr::OriginalName("QotMarketState_Afternoon")] Afternoon = 5,
    /// <summary>
    /// 收盘
    /// </summary>
    [pbr::OriginalName("QotMarketState_Closed")] Closed = 6,
    /// <summary>
    /// 盘前
    /// </summary>
    [pbr::OriginalName("QotMarketState_PreMarketBegin")] PreMarketBegin = 8,
    /// <summary>
    /// 盘前结束 
    /// </summary>
    [pbr::OriginalName("QotMarketState_PreMarketEnd")] PreMarketEnd = 9,
    /// <summary>
    /// 盘后
    /// </summary>
    [pbr::OriginalName("QotMarketState_AfterHoursBegin")] AfterHoursBegin = 10,
    /// <summary>
    /// 盘后结束 
    /// </summary>
    [pbr::OriginalName("QotMarketState_AfterHoursEnd")] AfterHoursEnd = 11,
    /// <summary>
    /// 夜市开盘 
    /// </summary>
    [pbr::OriginalName("QotMarketState_NightOpen")] NightOpen = 13,
    /// <summary>
    /// 夜市收盘 
    /// </summary>
    [pbr::OriginalName("QotMarketState_NightEnd")] NightEnd = 14,
    /// <summary>
    /// 期指日市开盘 
    /// </summary>
    [pbr::OriginalName("QotMarketState_FutureDayOpen")] FutureDayOpen = 15,
    /// <summary>
    /// 期指日市休市 
    /// </summary>
    [pbr::OriginalName("QotMarketState_FutureDayBreak")] FutureDayBreak = 16,
    /// <summary>
    /// 期指日市收盘 
    /// </summary>
    [pbr::OriginalName("QotMarketState_FutureDayClose")] FutureDayClose = 17,
    /// <summary>
    /// 期指日市等待开盘 
    /// </summary>
    [pbr::OriginalName("QotMarketState_FutureDayWaitForOpen")] FutureDayWaitForOpen = 18,
    /// <summary>
    /// 盘后竞价,港股市场增加CAS机制对应的市场状态
    /// </summary>
    [pbr::OriginalName("QotMarketState_HkCas")] HkCas = 19,
  }

  /// <summary>
  ///交易时间类型
  /// </summary>
  public enum TradeDateType {
    /// <summary>
    ///全天交易
    /// </summary>
    [pbr::OriginalName("TradeDateType_Whole")] Whole = 0,
    /// <summary>
    ///上午交易，下午休市
    /// </summary>
    [pbr::OriginalName("TradeDateType_Morning")] Morning = 1,
    /// <summary>
    ///下午交易，上午休市
    /// </summary>
    [pbr::OriginalName("TradeDateType_Afternoon")] Afternoon = 2,
  }

  public enum RehabType {
    /// <summary>
    ///不复权
    /// </summary>
    [pbr::OriginalName("RehabType_None")] None = 0,
    /// <summary>
    ///前复权
    /// </summary>
    [pbr::OriginalName("RehabType_Forward")] Forward = 1,
    /// <summary>
    ///后复权
    /// </summary>
    [pbr::OriginalName("RehabType_Backward")] Backward = 2,
  }

  /// <summary>
  ///枚举值兼容旧协议定义
  ///新类型季K,年K,3分K暂时没有支持历史K线
  /// </summary>
  public enum KLType {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("KLType_Unknown")] Unknown = 0,
    /// <summary>
    ///1分K
    /// </summary>
    [pbr::OriginalName("KLType_1Min")] _1Min = 1,
    /// <summary>
    ///日K
    /// </summary>
    [pbr::OriginalName("KLType_Day")] Day = 2,
    /// <summary>
    ///周K
    /// </summary>
    [pbr::OriginalName("KLType_Week")] Week = 3,
    /// <summary>
    ///月K	
    /// </summary>
    [pbr::OriginalName("KLType_Month")] Month = 4,
    /// <summary>
    ///年K
    /// </summary>
    [pbr::OriginalName("KLType_Year")] Year = 5,
    /// <summary>
    ///5分K
    /// </summary>
    [pbr::OriginalName("KLType_5Min")] _5Min = 6,
    /// <summary>
    ///15分K
    /// </summary>
    [pbr::OriginalName("KLType_15Min")] _15Min = 7,
    /// <summary>
    ///30分K
    /// </summary>
    [pbr::OriginalName("KLType_30Min")] _30Min = 8,
    /// <summary>
    ///60分K		
    /// </summary>
    [pbr::OriginalName("KLType_60Min")] _60Min = 9,
    /// <summary>
    ///3分K
    /// </summary>
    [pbr::OriginalName("KLType_3Min")] _3Min = 10,
    /// <summary>
    ///季K
    /// </summary>
    [pbr::OriginalName("KLType_Quarter")] Quarter = 11,
  }

  public enum KLFields {
    /// <summary>
    /// </summary>
    [pbr::OriginalName("KLFields_None")] None = 0,
    /// <summary>
    ///最高价
    /// </summary>
    [pbr::OriginalName("KLFields_High")] High = 1,
    /// <summary>
    ///开盘价
    /// </summary>
    [pbr::OriginalName("KLFields_Open")] Open = 2,
    /// <summary>
    ///最低价
    /// </summary>
    [pbr::OriginalName("KLFields_Low")] Low = 4,
    /// <summary>
    ///收盘价
    /// </summary>
    [pbr::OriginalName("KLFields_Close")] Close = 8,
    /// <summary>
    ///昨收价
    /// </summary>
    [pbr::OriginalName("KLFields_LastClose")] LastClose = 16,
    /// <summary>
    ///成交量
    /// </summary>
    [pbr::OriginalName("KLFields_Volume")] Volume = 32,
    /// <summary>
    ///成交额
    /// </summary>
    [pbr::OriginalName("KLFields_Turnover")] Turnover = 64,
    /// <summary>
    ///换手率
    /// </summary>
    [pbr::OriginalName("KLFields_TurnoverRate")] TurnoverRate = 128,
    /// <summary>
    ///市盈率
    /// </summary>
    [pbr::OriginalName("KLFields_PE")] Pe = 256,
    /// <summary>
    ///涨跌幅
    /// </summary>
    [pbr::OriginalName("KLFields_ChangeRate")] ChangeRate = 512,
  }

  /// <summary>
  ///订阅类型
  ///枚举值兼容旧协议定义
  /// </summary>
  public enum SubType {
    [pbr::OriginalName("SubType_None")] None = 0,
    /// <summary>
    ///基础报价
    /// </summary>
    [pbr::OriginalName("SubType_Basic")] Basic = 1,
    /// <summary>
    ///摆盘
    /// </summary>
    [pbr::OriginalName("SubType_OrderBook")] OrderBook = 2,
    /// <summary>
    ///逐笔
    /// </summary>
    [pbr::OriginalName("SubType_Ticker")] Ticker = 4,
    /// <summary>
    ///分时
    /// </summary>
    [pbr::OriginalName("SubType_RT")] Rt = 5,
    /// <summary>
    ///日K
    /// </summary>
    [pbr::OriginalName("SubType_KL_Day")] KlDay = 6,
    /// <summary>
    ///5分K
    /// </summary>
    [pbr::OriginalName("SubType_KL_5Min")] Kl5Min = 7,
    /// <summary>
    ///15分K
    /// </summary>
    [pbr::OriginalName("SubType_KL_15Min")] Kl15Min = 8,
    /// <summary>
    ///30分K
    /// </summary>
    [pbr::OriginalName("SubType_KL_30Min")] Kl30Min = 9,
    /// <summary>
    ///60分K
    /// </summary>
    [pbr::OriginalName("SubType_KL_60Min")] Kl60Min = 10,
    /// <summary>
    ///1分K
    /// </summary>
    [pbr::OriginalName("SubType_KL_1Min")] Kl1Min = 11,
    /// <summary>
    ///周K
    /// </summary>
    [pbr::OriginalName("SubType_KL_Week")] KlWeek = 12,
    /// <summary>
    ///月K
    /// </summary>
    [pbr::OriginalName("SubType_KL_Month")] KlMonth = 13,
    /// <summary>
    ///经纪队列
    /// </summary>
    [pbr::OriginalName("SubType_Broker")] Broker = 14,
    /// <summary>
    ///季K
    /// </summary>
    [pbr::OriginalName("SubType_KL_Qurater")] KlQurater = 15,
    /// <summary>
    ///年K
    /// </summary>
    [pbr::OriginalName("SubType_KL_Year")] KlYear = 16,
    /// <summary>
    ///3分K
    /// </summary>
    [pbr::OriginalName("SubType_KL_3Min")] Kl3Min = 17,
    /// <summary>
    ///委托明细
    /// </summary>
    [pbr::OriginalName("SubType_OrderDetail")] OrderDetail = 18,
  }

  public enum TickerDirection {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("TickerDirection_Unknown")] Unknown = 0,
    /// <summary>
    ///外盘
    /// </summary>
    [pbr::OriginalName("TickerDirection_Bid")] Bid = 1,
    /// <summary>
    ///内盘
    /// </summary>
    [pbr::OriginalName("TickerDirection_Ask")] Ask = 2,
    /// <summary>
    ///中性盘
    /// </summary>
    [pbr::OriginalName("TickerDirection_Neutral")] Neutral = 3,
  }

  public enum TickerType {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("TickerType_Unknown")] Unknown = 0,
    /// <summary>
    ///自动对盘
    /// </summary>
    [pbr::OriginalName("TickerType_Automatch")] Automatch = 1,
    /// <summary>
    ///开市前成交盘
    /// </summary>
    [pbr::OriginalName("TickerType_Late")] Late = 2,
    /// <summary>
    ///非自动对盘
    /// </summary>
    [pbr::OriginalName("TickerType_NoneAutomatch")] NoneAutomatch = 3,
    /// <summary>
    ///同一证券商自动对盘
    /// </summary>
    [pbr::OriginalName("TickerType_InterAutomatch")] InterAutomatch = 4,
    /// <summary>
    ///同一证券商非自动对盘
    /// </summary>
    [pbr::OriginalName("TickerType_InterNoneAutomatch")] InterNoneAutomatch = 5,
    /// <summary>
    ///碎股交易
    /// </summary>
    [pbr::OriginalName("TickerType_OddLot")] OddLot = 6,
    /// <summary>
    ///竞价交易	
    /// </summary>
    [pbr::OriginalName("TickerType_Auction")] Auction = 7,
    /// <summary>
    ///批量交易
    /// </summary>
    [pbr::OriginalName("TickerType_Bulk")] Bulk = 8,
    /// <summary>
    ///现金交易
    /// </summary>
    [pbr::OriginalName("TickerType_Crash")] Crash = 9,
    /// <summary>
    ///跨市场交易
    /// </summary>
    [pbr::OriginalName("TickerType_CrossMarket")] CrossMarket = 10,
    /// <summary>
    ///批量卖出
    /// </summary>
    [pbr::OriginalName("TickerType_BulkSold")] BulkSold = 11,
    /// <summary>
    ///离价交易
    /// </summary>
    [pbr::OriginalName("TickerType_FreeOnBoard")] FreeOnBoard = 12,
    /// <summary>
    ///第127条交易（纽交所规则）或第155条交易
    /// </summary>
    [pbr::OriginalName("TickerType_Rule127Or155")] Rule127Or155 = 13,
    /// <summary>
    ///延迟交易
    /// </summary>
    [pbr::OriginalName("TickerType_Delay")] Delay = 14,
    /// <summary>
    ///中央收市价
    /// </summary>
    [pbr::OriginalName("TickerType_MarketCenterClosePrice")] MarketCenterClosePrice = 15,
    /// <summary>
    ///隔日交易
    /// </summary>
    [pbr::OriginalName("TickerType_NextDay")] NextDay = 16,
    /// <summary>
    ///中央开盘价交易
    /// </summary>
    [pbr::OriginalName("TickerType_MarketCenterOpening")] MarketCenterOpening = 17,
    /// <summary>
    ///前参考价
    /// </summary>
    [pbr::OriginalName("TickerType_PriorReferencePrice")] PriorReferencePrice = 18,
    /// <summary>
    ///中央开盘价
    /// </summary>
    [pbr::OriginalName("TickerType_MarketCenterOpenPrice")] MarketCenterOpenPrice = 19,
    /// <summary>
    ///卖方
    /// </summary>
    [pbr::OriginalName("TickerType_Seller")] Seller = 20,
    /// <summary>
    ///T类交易(盘前和盘后交易)
    /// </summary>
    [pbr::OriginalName("TickerType_T")] T = 21,
    /// <summary>
    ///延长交易时段
    /// </summary>
    [pbr::OriginalName("TickerType_ExtendedTradingHours")] ExtendedTradingHours = 22,
    /// <summary>
    ///合单交易
    /// </summary>
    [pbr::OriginalName("TickerType_Contingent")] Contingent = 23,
    /// <summary>
    ///平均价成交
    /// </summary>
    [pbr::OriginalName("TickerType_AveragePrice")] AveragePrice = 24,
    /// <summary>
    ///场外售出
    /// </summary>
    [pbr::OriginalName("TickerType_OTCSold")] Otcsold = 25,
    /// <summary>
    ///碎股跨市场交易
    /// </summary>
    [pbr::OriginalName("TickerType_OddLotCrossMarket")] OddLotCrossMarket = 26,
    /// <summary>
    ///衍生工具定价
    /// </summary>
    [pbr::OriginalName("TickerType_DerivativelyPriced")] DerivativelyPriced = 27,
    /// <summary>
    ///再开盘定价
    /// </summary>
    [pbr::OriginalName("TickerType_ReOpeningPriced")] ReOpeningPriced = 28,
    /// <summary>
    ///收盘定价
    /// </summary>
    [pbr::OriginalName("TickerType_ClosingPriced")] ClosingPriced = 29,
    /// <summary>
    ///综合延迟价格
    /// </summary>
    [pbr::OriginalName("TickerType_ComprehensiveDelayPrice")] ComprehensiveDelayPrice = 30,
  }

  public enum DarkStatus {
    /// <summary>
    ///无暗盘交易
    /// </summary>
    [pbr::OriginalName("DarkStatus_None")] None = 0,
    /// <summary>
    ///暗盘交易中
    /// </summary>
    [pbr::OriginalName("DarkStatus_Trading")] Trading = 1,
    /// <summary>
    ///暗盘交易结束
    /// </summary>
    [pbr::OriginalName("DarkStatus_End")] End = 2,
  }

  public enum HolderCategory {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("HolderCategory_Unknow")] Unknow = 0,
    /// <summary>
    ///机构
    /// </summary>
    [pbr::OriginalName("HolderCategory_Agency")] Agency = 1,
    /// <summary>
    ///基金
    /// </summary>
    [pbr::OriginalName("HolderCategory_Fund")] Fund = 2,
    /// <summary>
    ///高管
    /// </summary>
    [pbr::OriginalName("HolderCategory_SeniorManager")] SeniorManager = 3,
  }

  /// <summary>
  ///推送数据的分类，目前只有逐笔在使用
  /// </summary>
  public enum PushDataType {
    [pbr::OriginalName("PushDataType_Unknow")] Unknow = 0,
    /// <summary>
    ///实时推送的数据
    /// </summary>
    [pbr::OriginalName("PushDataType_Realtime")] Realtime = 1,
    /// <summary>
    ///对后台行情连接断开期间拉取补充的数据 最多50个
    /// </summary>
    [pbr::OriginalName("PushDataType_ByDisConn")] ByDisConn = 2,
    /// <summary>
    ///非实时非连接断开补充数据
    /// </summary>
    [pbr::OriginalName("PushDataType_Cache")] Cache = 3,
  }

  /// <summary>
  ///涡轮排序
  /// </summary>
  public enum SortField {
    [pbr::OriginalName("SortField_Unknow")] Unknow = 0,
    /// <summary>
    ///代码
    /// </summary>
    [pbr::OriginalName("SortField_Code")] Code = 1,
    /// <summary>
    ///最新价
    /// </summary>
    [pbr::OriginalName("SortField_CurPrice")] CurPrice = 2,
    /// <summary>
    ///涨跌额
    /// </summary>
    [pbr::OriginalName("SortField_PriceChangeVal")] PriceChangeVal = 3,
    /// <summary>
    ///涨跌幅%
    /// </summary>
    [pbr::OriginalName("SortField_ChangeRate")] ChangeRate = 4,
    /// <summary>
    ///状态
    /// </summary>
    [pbr::OriginalName("SortField_Status")] Status = 5,
    /// <summary>
    ///买入价
    /// </summary>
    [pbr::OriginalName("SortField_BidPrice")] BidPrice = 6,
    /// <summary>
    ///卖出价
    /// </summary>
    [pbr::OriginalName("SortField_AskPrice")] AskPrice = 7,
    /// <summary>
    ///买量
    /// </summary>
    [pbr::OriginalName("SortField_BidVol")] BidVol = 8,
    /// <summary>
    ///卖量
    /// </summary>
    [pbr::OriginalName("SortField_AskVol")] AskVol = 9,
    /// <summary>
    ///成交量
    /// </summary>
    [pbr::OriginalName("SortField_Volume")] Volume = 10,
    /// <summary>
    ///成交额
    /// </summary>
    [pbr::OriginalName("SortField_Turnover")] Turnover = 11,
    /// <summary>
    ///综合评分
    /// </summary>
    [pbr::OriginalName("SortField_Score")] Score = 12,
    /// <summary>
    ///溢价%
    /// </summary>
    [pbr::OriginalName("SortField_Premium")] Premium = 13,
    /// <summary>
    ///有效杠杆
    /// </summary>
    [pbr::OriginalName("SortField_EffectiveLeverage")] EffectiveLeverage = 14,
    /// <summary>
    ///对冲值,仅认购认沽支持该字段
    /// </summary>
    [pbr::OriginalName("SortField_Delta")] Delta = 15,
    /// <summary>
    ///引伸波幅,仅认购认沽支持该字段
    /// </summary>
    [pbr::OriginalName("SortField_ImpliedVolatility")] ImpliedVolatility = 16,
    /// <summary>
    ///类型
    /// </summary>
    [pbr::OriginalName("SortField_Type")] Type = 17,
    /// <summary>
    ///行权价
    /// </summary>
    [pbr::OriginalName("SortField_StrikePrice")] StrikePrice = 18,
    /// <summary>
    ///打和点
    /// </summary>
    [pbr::OriginalName("SortField_BreakEvenPoint")] BreakEvenPoint = 19,
    /// <summary>
    ///到期日
    /// </summary>
    [pbr::OriginalName("SortField_MaturityTime")] MaturityTime = 20,
    /// <summary>
    ///上市日期
    /// </summary>
    [pbr::OriginalName("SortField_ListTime")] ListTime = 21,
    /// <summary>
    ///最后交易日
    /// </summary>
    [pbr::OriginalName("SortField_LastTradeTime")] LastTradeTime = 22,
    /// <summary>
    ///杠杆比率
    /// </summary>
    [pbr::OriginalName("SortField_Leverage")] Leverage = 23,
    /// <summary>
    ///价内/价外%
    /// </summary>
    [pbr::OriginalName("SortField_InOutMoney")] InOutMoney = 24,
    /// <summary>
    ///收回价,仅牛熊证支持该字段
    /// </summary>
    [pbr::OriginalName("SortField_RecoveryPrice")] RecoveryPrice = 25,
    /// <summary>
    /// 换股价
    /// </summary>
    [pbr::OriginalName("SortField_ChangePrice")] ChangePrice = 26,
    /// <summary>
    ///换股比率
    /// </summary>
    [pbr::OriginalName("SortField_Change")] Change = 27,
    /// <summary>
    ///街货比%
    /// </summary>
    [pbr::OriginalName("SortField_StreetRate")] StreetRate = 28,
    /// <summary>
    ///街货量
    /// </summary>
    [pbr::OriginalName("SortField_StreetVol")] StreetVol = 29,
    /// <summary>
    ///振幅%
    /// </summary>
    [pbr::OriginalName("SortField_Amplitude")] Amplitude = 30,
    /// <summary>
    /// 名称
    /// </summary>
    [pbr::OriginalName("SortField_WarrantName")] WarrantName = 31,
    /// <summary>
    ///发行人
    /// </summary>
    [pbr::OriginalName("SortField_Issuer")] Issuer = 32,
    /// <summary>
    /// 每手
    /// </summary>
    [pbr::OriginalName("SortField_LotSize")] LotSize = 33,
    /// <summary>
    ///发行量
    /// </summary>
    [pbr::OriginalName("SortField_IssueSize")] IssueSize = 34,
  }

  /// <summary>
  ///涡轮发行人
  /// </summary>
  public enum Issuer {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("Issuer_Unknow")] Unknow = 0,
    /// <summary>
    ///法兴
    /// </summary>
    [pbr::OriginalName("Issuer_SG")] Sg = 1,
    /// <summary>
    ///法巴
    /// </summary>
    [pbr::OriginalName("Issuer_BP")] Bp = 2,
    /// <summary>
    ///瑞信
    /// </summary>
    [pbr::OriginalName("Issuer_CS")] Cs = 3,
    /// <summary>
    ///花旗	
    /// </summary>
    [pbr::OriginalName("Issuer_CT")] Ct = 4,
    /// <summary>
    ///东亚
    /// </summary>
    [pbr::OriginalName("Issuer_EA")] Ea = 5,
    /// <summary>
    ///高盛
    /// </summary>
    [pbr::OriginalName("Issuer_GS")] Gs = 6,
    /// <summary>
    ///汇丰
    /// </summary>
    [pbr::OriginalName("Issuer_HS")] Hs = 7,
    /// <summary>
    ///摩通	
    /// </summary>
    [pbr::OriginalName("Issuer_JP")] Jp = 8,
    /// <summary>
    ///麦银	
    /// </summary>
    [pbr::OriginalName("Issuer_MB")] Mb = 9,
    /// <summary>
    ///渣打
    /// </summary>
    [pbr::OriginalName("Issuer_SC")] Sc = 10,
    /// <summary>
    ///瑞银
    /// </summary>
    [pbr::OriginalName("Issuer_UB")] Ub = 11,
    /// <summary>
    ///中银
    /// </summary>
    [pbr::OriginalName("Issuer_BI")] Bi = 12,
    /// <summary>
    ///德银
    /// </summary>
    [pbr::OriginalName("Issuer_DB")] Db = 13,
    /// <summary>
    ///大和
    /// </summary>
    [pbr::OriginalName("Issuer_DC")] Dc = 14,
    /// <summary>
    ///美林
    /// </summary>
    [pbr::OriginalName("Issuer_ML")] Ml = 15,
    /// <summary>
    ///野村
    /// </summary>
    [pbr::OriginalName("Issuer_NM")] Nm = 16,
    /// <summary>
    ///荷合
    /// </summary>
    [pbr::OriginalName("Issuer_RB")] Rb = 17,
    /// <summary>
    ///苏皇	
    /// </summary>
    [pbr::OriginalName("Issuer_RS")] Rs = 18,
    /// <summary>
    ///巴克莱
    /// </summary>
    [pbr::OriginalName("Issuer_BC")] Bc = 19,
    /// <summary>
    ///海通
    /// </summary>
    [pbr::OriginalName("Issuer_HT")] Ht = 20,
    /// <summary>
    ///瑞通
    /// </summary>
    [pbr::OriginalName("Issuer_VT")] Vt = 21,
    /// <summary>
    ///比联
    /// </summary>
    [pbr::OriginalName("Issuer_KC")] Kc = 22,
  }

  /// <summary>
  ///涡轮上市日
  /// </summary>
  public enum IpoPeriod {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("IpoPeriod_Unknow")] Unknow = 0,
    /// <summary>
    ///今日上市
    /// </summary>
    [pbr::OriginalName("IpoPeriod_Today")] Today = 1,
    /// <summary>
    ///明日上市
    /// </summary>
    [pbr::OriginalName("IpoPeriod_Tomorrow")] Tomorrow = 2,
    /// <summary>
    ///未来一周上市
    /// </summary>
    [pbr::OriginalName("IpoPeriod_Nextweek")] Nextweek = 3,
    /// <summary>
    ///过去一周上市
    /// </summary>
    [pbr::OriginalName("IpoPeriod_Lastweek")] Lastweek = 4,
    /// <summary>
    ///过去一月上市
    /// </summary>
    [pbr::OriginalName("IpoPeriod_Lastmonth")] Lastmonth = 5,
  }

  /// <summary>
  ///涡轮价外/内
  /// </summary>
  public enum PriceType {
    [pbr::OriginalName("PriceType_Unknow")] Unknow = 0,
    /// <summary>
    ///价外
    /// </summary>
    [pbr::OriginalName("PriceType_Outside")] Outside = 1,
    /// <summary>
    ///价内
    /// </summary>
    [pbr::OriginalName("PriceType_WithIn")] WithIn = 2,
  }

  /// <summary>
  ///涡轮状态
  /// </summary>
  public enum WarrantStatus {
    /// <summary>
    ///未知
    /// </summary>
    [pbr::OriginalName("WarrantStatus_Unknow")] Unknow = 0,
    /// <summary>
    ///正常状态
    /// </summary>
    [pbr::OriginalName("WarrantStatus_Normal")] Normal = 1,
    /// <summary>
    ///停牌
    /// </summary>
    [pbr::OriginalName("WarrantStatus_Suspend")] Suspend = 2,
    /// <summary>
    ///终止交易
    /// </summary>
    [pbr::OriginalName("WarrantStatus_StopTrade")] StopTrade = 3,
    /// <summary>
    ///等待上市
    /// </summary>
    [pbr::OriginalName("WarrantStatus_PendingListing")] PendingListing = 4,
  }

  public enum CompanyAct {
    /// <summary>
    ///无
    /// </summary>
    [pbr::OriginalName("CompanyAct_None")] None = 0,
    /// <summary>
    ///拆股		
    /// </summary>
    [pbr::OriginalName("CompanyAct_Split")] Split = 1,
    /// <summary>
    ///合股
    /// </summary>
    [pbr::OriginalName("CompanyAct_Join")] Join = 2,
    /// <summary>
    ///送股
    /// </summary>
    [pbr::OriginalName("CompanyAct_Bonus")] Bonus = 4,
    /// <summary>
    ///转赠股
    /// </summary>
    [pbr::OriginalName("CompanyAct_Transfer")] Transfer = 8,
    /// <summary>
    ///配股	
    /// </summary>
    [pbr::OriginalName("CompanyAct_Allot")] Allot = 16,
    /// <summary>
    ///增发股
    /// </summary>
    [pbr::OriginalName("CompanyAct_Add")] Add = 32,
    /// <summary>
    ///现金分红
    /// </summary>
    [pbr::OriginalName("CompanyAct_Dividend")] Dividend = 64,
    /// <summary>
    ///特别股息	
    /// </summary>
    [pbr::OriginalName("CompanyAct_SPDividend")] Spdividend = 128,
  }

  #endregion

  #region Messages
  /// <summary>
  ///两个字段确定一支股票
  /// </summary>
  public sealed partial class Security : pb::IMessage<Security> {
    private static readonly pb::MessageParser<Security> _parser = new pb::MessageParser<Security>(() => new Security());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Security> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Security() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Security(Security other) : this() {
      market_ = other.market_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Security Clone() {
      return new Security(this);
    }

    /// <summary>Field number for the "market" field.</summary>
    public const int MarketFieldNumber = 1;
    private int market_;
    /// <summary>
    ///QotMarket,股票市场
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Market {
      get { return market_; }
      set {
        market_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    /// <summary>
    ///股票代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Security);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Security other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Market != other.Market) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Market != 0) hash ^= Market.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Market != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Market);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Market != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Market);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Security other) {
      if (other == null) {
        return;
      }
      if (other.Market != 0) {
        Market = other.Market;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Market = input.ReadInt32();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KLine : pb::IMessage<KLine> {
    private static readonly pb::MessageParser<KLine> _parser = new pb::MessageParser<KLine>(() => new KLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KLine(KLine other) : this() {
      time_ = other.time_;
      isBlank_ = other.isBlank_;
      highPrice_ = other.highPrice_;
      openPrice_ = other.openPrice_;
      lowPrice_ = other.lowPrice_;
      closePrice_ = other.closePrice_;
      lastClosePrice_ = other.lastClosePrice_;
      volume_ = other.volume_;
      turnover_ = other.turnover_;
      turnoverRate_ = other.turnoverRate_;
      pe_ = other.pe_;
      changeRate_ = other.changeRate_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KLine Clone() {
      return new KLine(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private string time_ = "";
    /// <summary>
    ///时间戳字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isBlank" field.</summary>
    public const int IsBlankFieldNumber = 2;
    private bool isBlank_;
    /// <summary>
    ///是否是空内容的点,若为ture则只有时间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBlank {
      get { return isBlank_; }
      set {
        isBlank_ = value;
      }
    }

    /// <summary>Field number for the "highPrice" field.</summary>
    public const int HighPriceFieldNumber = 3;
    private double highPrice_;
    /// <summary>
    ///最高价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = value;
      }
    }

    /// <summary>Field number for the "openPrice" field.</summary>
    public const int OpenPriceFieldNumber = 4;
    private double openPrice_;
    /// <summary>
    ///开盘价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OpenPrice {
      get { return openPrice_; }
      set {
        openPrice_ = value;
      }
    }

    /// <summary>Field number for the "lowPrice" field.</summary>
    public const int LowPriceFieldNumber = 5;
    private double lowPrice_;
    /// <summary>
    ///最低价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    /// <summary>Field number for the "closePrice" field.</summary>
    public const int ClosePriceFieldNumber = 6;
    private double closePrice_;
    /// <summary>
    ///收盘价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ClosePrice {
      get { return closePrice_; }
      set {
        closePrice_ = value;
      }
    }

    /// <summary>Field number for the "lastClosePrice" field.</summary>
    public const int LastClosePriceFieldNumber = 7;
    private double lastClosePrice_;
    /// <summary>
    ///昨收价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastClosePrice {
      get { return lastClosePrice_; }
      set {
        lastClosePrice_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 8;
    private long volume_;
    /// <summary>
    ///成交量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "turnover" field.</summary>
    public const int TurnoverFieldNumber = 9;
    private double turnover_;
    /// <summary>
    ///成交额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Turnover {
      get { return turnover_; }
      set {
        turnover_ = value;
      }
    }

    /// <summary>Field number for the "turnoverRate" field.</summary>
    public const int TurnoverRateFieldNumber = 10;
    private double turnoverRate_;
    /// <summary>
    ///换手率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TurnoverRate {
      get { return turnoverRate_; }
      set {
        turnoverRate_ = value;
      }
    }

    /// <summary>Field number for the "pe" field.</summary>
    public const int PeFieldNumber = 11;
    private double pe_;
    /// <summary>
    ///市盈率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pe {
      get { return pe_; }
      set {
        pe_ = value;
      }
    }

    /// <summary>Field number for the "changeRate" field.</summary>
    public const int ChangeRateFieldNumber = 12;
    private double changeRate_;
    /// <summary>
    ///涨跌幅
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ChangeRate {
      get { return changeRate_; }
      set {
        changeRate_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 13;
    private double timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (IsBlank != other.IsBlank) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HighPrice, other.HighPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpenPrice, other.OpenPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowPrice, other.LowPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClosePrice, other.ClosePrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastClosePrice, other.LastClosePrice)) return false;
      if (Volume != other.Volume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Turnover, other.Turnover)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TurnoverRate, other.TurnoverRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pe, other.Pe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChangeRate, other.ChangeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (IsBlank != false) hash ^= IsBlank.GetHashCode();
      if (HighPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HighPrice);
      if (OpenPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpenPrice);
      if (LowPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowPrice);
      if (ClosePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClosePrice);
      if (LastClosePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastClosePrice);
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (Turnover != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Turnover);
      if (TurnoverRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TurnoverRate);
      if (Pe != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pe);
      if (ChangeRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChangeRate);
      if (Timestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Time);
      }
      if (IsBlank != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsBlank);
      }
      if (HighPrice != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(HighPrice);
      }
      if (OpenPrice != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(OpenPrice);
      }
      if (LowPrice != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LowPrice);
      }
      if (ClosePrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ClosePrice);
      }
      if (LastClosePrice != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(LastClosePrice);
      }
      if (Volume != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Volume);
      }
      if (Turnover != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Turnover);
      }
      if (TurnoverRate != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(TurnoverRate);
      }
      if (Pe != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Pe);
      }
      if (ChangeRate != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(ChangeRate);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (IsBlank != false) {
        size += 1 + 1;
      }
      if (HighPrice != 0D) {
        size += 1 + 8;
      }
      if (OpenPrice != 0D) {
        size += 1 + 8;
      }
      if (LowPrice != 0D) {
        size += 1 + 8;
      }
      if (ClosePrice != 0D) {
        size += 1 + 8;
      }
      if (LastClosePrice != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (Turnover != 0D) {
        size += 1 + 8;
      }
      if (TurnoverRate != 0D) {
        size += 1 + 8;
      }
      if (Pe != 0D) {
        size += 1 + 8;
      }
      if (ChangeRate != 0D) {
        size += 1 + 8;
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KLine other) {
      if (other == null) {
        return;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.IsBlank != false) {
        IsBlank = other.IsBlank;
      }
      if (other.HighPrice != 0D) {
        HighPrice = other.HighPrice;
      }
      if (other.OpenPrice != 0D) {
        OpenPrice = other.OpenPrice;
      }
      if (other.LowPrice != 0D) {
        LowPrice = other.LowPrice;
      }
      if (other.ClosePrice != 0D) {
        ClosePrice = other.ClosePrice;
      }
      if (other.LastClosePrice != 0D) {
        LastClosePrice = other.LastClosePrice;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.Turnover != 0D) {
        Turnover = other.Turnover;
      }
      if (other.TurnoverRate != 0D) {
        TurnoverRate = other.TurnoverRate;
      }
      if (other.Pe != 0D) {
        Pe = other.Pe;
      }
      if (other.ChangeRate != 0D) {
        ChangeRate = other.ChangeRate;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Time = input.ReadString();
            break;
          }
          case 16: {
            IsBlank = input.ReadBool();
            break;
          }
          case 25: {
            HighPrice = input.ReadDouble();
            break;
          }
          case 33: {
            OpenPrice = input.ReadDouble();
            break;
          }
          case 41: {
            LowPrice = input.ReadDouble();
            break;
          }
          case 49: {
            ClosePrice = input.ReadDouble();
            break;
          }
          case 57: {
            LastClosePrice = input.ReadDouble();
            break;
          }
          case 64: {
            Volume = input.ReadInt64();
            break;
          }
          case 73: {
            Turnover = input.ReadDouble();
            break;
          }
          case 81: {
            TurnoverRate = input.ReadDouble();
            break;
          }
          case 89: {
            Pe = input.ReadDouble();
            break;
          }
          case 97: {
            ChangeRate = input.ReadDouble();
            break;
          }
          case 105: {
            Timestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OptionBasicQotExData : pb::IMessage<OptionBasicQotExData> {
    private static readonly pb::MessageParser<OptionBasicQotExData> _parser = new pb::MessageParser<OptionBasicQotExData>(() => new OptionBasicQotExData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionBasicQotExData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionBasicQotExData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionBasicQotExData(OptionBasicQotExData other) : this() {
      strikePrice_ = other.strikePrice_;
      contractSize_ = other.contractSize_;
      openInterest_ = other.openInterest_;
      impliedVolatility_ = other.impliedVolatility_;
      premium_ = other.premium_;
      delta_ = other.delta_;
      gamma_ = other.gamma_;
      vega_ = other.vega_;
      theta_ = other.theta_;
      rho_ = other.rho_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionBasicQotExData Clone() {
      return new OptionBasicQotExData(this);
    }

    /// <summary>Field number for the "strikePrice" field.</summary>
    public const int StrikePriceFieldNumber = 1;
    private double strikePrice_;
    /// <summary>
    ///行权价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikePrice {
      get { return strikePrice_; }
      set {
        strikePrice_ = value;
      }
    }

    /// <summary>Field number for the "contractSize" field.</summary>
    public const int ContractSizeFieldNumber = 2;
    private int contractSize_;
    /// <summary>
    ///每份合约数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContractSize {
      get { return contractSize_; }
      set {
        contractSize_ = value;
      }
    }

    /// <summary>Field number for the "openInterest" field.</summary>
    public const int OpenInterestFieldNumber = 3;
    private int openInterest_;
    /// <summary>
    ///未平仓合约数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    /// <summary>Field number for the "impliedVolatility" field.</summary>
    public const int ImpliedVolatilityFieldNumber = 4;
    private double impliedVolatility_;
    /// <summary>
    ///隐含波动率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ImpliedVolatility {
      get { return impliedVolatility_; }
      set {
        impliedVolatility_ = value;
      }
    }

    /// <summary>Field number for the "premium" field.</summary>
    public const int PremiumFieldNumber = 5;
    private double premium_;
    /// <summary>
    ///溢价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Premium {
      get { return premium_; }
      set {
        premium_ = value;
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 6;
    private double delta_;
    /// <summary>
    ///希腊值 Delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 7;
    private double gamma_;
    /// <summary>
    ///希腊值 Gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "vega" field.</summary>
    public const int VegaFieldNumber = 8;
    private double vega_;
    /// <summary>
    ///希腊值 Vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Vega {
      get { return vega_; }
      set {
        vega_ = value;
      }
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 9;
    private double theta_;
    /// <summary>
    ///希腊值 Theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Theta {
      get { return theta_; }
      set {
        theta_ = value;
      }
    }

    /// <summary>Field number for the "rho" field.</summary>
    public const int RhoFieldNumber = 10;
    private double rho_;
    /// <summary>
    ///希腊值 Rho
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rho {
      get { return rho_; }
      set {
        rho_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionBasicQotExData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionBasicQotExData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePrice, other.StrikePrice)) return false;
      if (ContractSize != other.ContractSize) return false;
      if (OpenInterest != other.OpenInterest) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ImpliedVolatility, other.ImpliedVolatility)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Premium, other.Premium)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Delta, other.Delta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gamma, other.Gamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Vega, other.Vega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Theta, other.Theta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rho, other.Rho)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StrikePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePrice);
      if (ContractSize != 0) hash ^= ContractSize.GetHashCode();
      if (OpenInterest != 0) hash ^= OpenInterest.GetHashCode();
      if (ImpliedVolatility != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ImpliedVolatility);
      if (Premium != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Premium);
      if (Delta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Delta);
      if (Gamma != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gamma);
      if (Vega != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Vega);
      if (Theta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Theta);
      if (Rho != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rho);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StrikePrice != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(StrikePrice);
      }
      if (ContractSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ContractSize);
      }
      if (OpenInterest != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OpenInterest);
      }
      if (ImpliedVolatility != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(ImpliedVolatility);
      }
      if (Premium != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Premium);
      }
      if (Delta != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Delta);
      }
      if (Gamma != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Gamma);
      }
      if (Vega != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Vega);
      }
      if (Theta != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Theta);
      }
      if (Rho != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Rho);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StrikePrice != 0D) {
        size += 1 + 8;
      }
      if (ContractSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContractSize);
      }
      if (OpenInterest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenInterest);
      }
      if (ImpliedVolatility != 0D) {
        size += 1 + 8;
      }
      if (Premium != 0D) {
        size += 1 + 8;
      }
      if (Delta != 0D) {
        size += 1 + 8;
      }
      if (Gamma != 0D) {
        size += 1 + 8;
      }
      if (Vega != 0D) {
        size += 1 + 8;
      }
      if (Theta != 0D) {
        size += 1 + 8;
      }
      if (Rho != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionBasicQotExData other) {
      if (other == null) {
        return;
      }
      if (other.StrikePrice != 0D) {
        StrikePrice = other.StrikePrice;
      }
      if (other.ContractSize != 0) {
        ContractSize = other.ContractSize;
      }
      if (other.OpenInterest != 0) {
        OpenInterest = other.OpenInterest;
      }
      if (other.ImpliedVolatility != 0D) {
        ImpliedVolatility = other.ImpliedVolatility;
      }
      if (other.Premium != 0D) {
        Premium = other.Premium;
      }
      if (other.Delta != 0D) {
        Delta = other.Delta;
      }
      if (other.Gamma != 0D) {
        Gamma = other.Gamma;
      }
      if (other.Vega != 0D) {
        Vega = other.Vega;
      }
      if (other.Theta != 0D) {
        Theta = other.Theta;
      }
      if (other.Rho != 0D) {
        Rho = other.Rho;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            StrikePrice = input.ReadDouble();
            break;
          }
          case 16: {
            ContractSize = input.ReadInt32();
            break;
          }
          case 24: {
            OpenInterest = input.ReadInt32();
            break;
          }
          case 33: {
            ImpliedVolatility = input.ReadDouble();
            break;
          }
          case 41: {
            Premium = input.ReadDouble();
            break;
          }
          case 49: {
            Delta = input.ReadDouble();
            break;
          }
          case 57: {
            Gamma = input.ReadDouble();
            break;
          }
          case 65: {
            Vega = input.ReadDouble();
            break;
          }
          case 73: {
            Theta = input.ReadDouble();
            break;
          }
          case 81: {
            Rho = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasicQot : pb::IMessage<BasicQot> {
    private static readonly pb::MessageParser<BasicQot> _parser = new pb::MessageParser<BasicQot>(() => new BasicQot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicQot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicQot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicQot(BasicQot other) : this() {
      security_ = other.security_ != null ? other.security_.Clone() : null;
      isSuspended_ = other.isSuspended_;
      listTime_ = other.listTime_;
      priceSpread_ = other.priceSpread_;
      updateTime_ = other.updateTime_;
      highPrice_ = other.highPrice_;
      openPrice_ = other.openPrice_;
      lowPrice_ = other.lowPrice_;
      curPrice_ = other.curPrice_;
      lastClosePrice_ = other.lastClosePrice_;
      volume_ = other.volume_;
      turnover_ = other.turnover_;
      turnoverRate_ = other.turnoverRate_;
      amplitude_ = other.amplitude_;
      darkStatus_ = other.darkStatus_;
      listTimestamp_ = other.listTimestamp_;
      updateTimestamp_ = other.updateTimestamp_;
      optionExData_ = other.optionExData_ != null ? other.optionExData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicQot Clone() {
      return new BasicQot(this);
    }

    /// <summary>Field number for the "security" field.</summary>
    public const int SecurityFieldNumber = 1;
    private global::QotCommon.Security security_;
    /// <summary>
    ///股票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Security {
      get { return security_; }
      set {
        security_ = value;
      }
    }

    /// <summary>Field number for the "isSuspended" field.</summary>
    public const int IsSuspendedFieldNumber = 2;
    private bool isSuspended_;
    /// <summary>
    ///是否停牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuspended {
      get { return isSuspended_; }
      set {
        isSuspended_ = value;
      }
    }

    /// <summary>Field number for the "listTime" field.</summary>
    public const int ListTimeFieldNumber = 3;
    private string listTime_ = "";
    /// <summary>
    ///上市日期字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListTime {
      get { return listTime_; }
      set {
        listTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priceSpread" field.</summary>
    public const int PriceSpreadFieldNumber = 4;
    private double priceSpread_;
    /// <summary>
    ///价差
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceSpread {
      get { return priceSpread_; }
      set {
        priceSpread_ = value;
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 5;
    private string updateTime_ = "";
    /// <summary>
    ///更新时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highPrice" field.</summary>
    public const int HighPriceFieldNumber = 6;
    private double highPrice_;
    /// <summary>
    ///最高价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = value;
      }
    }

    /// <summary>Field number for the "openPrice" field.</summary>
    public const int OpenPriceFieldNumber = 7;
    private double openPrice_;
    /// <summary>
    ///开盘价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OpenPrice {
      get { return openPrice_; }
      set {
        openPrice_ = value;
      }
    }

    /// <summary>Field number for the "lowPrice" field.</summary>
    public const int LowPriceFieldNumber = 8;
    private double lowPrice_;
    /// <summary>
    ///最低价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    /// <summary>Field number for the "curPrice" field.</summary>
    public const int CurPriceFieldNumber = 9;
    private double curPrice_;
    /// <summary>
    ///最新价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurPrice {
      get { return curPrice_; }
      set {
        curPrice_ = value;
      }
    }

    /// <summary>Field number for the "lastClosePrice" field.</summary>
    public const int LastClosePriceFieldNumber = 10;
    private double lastClosePrice_;
    /// <summary>
    ///昨收价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastClosePrice {
      get { return lastClosePrice_; }
      set {
        lastClosePrice_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 11;
    private long volume_;
    /// <summary>
    ///成交量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "turnover" field.</summary>
    public const int TurnoverFieldNumber = 12;
    private double turnover_;
    /// <summary>
    ///成交额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Turnover {
      get { return turnover_; }
      set {
        turnover_ = value;
      }
    }

    /// <summary>Field number for the "turnoverRate" field.</summary>
    public const int TurnoverRateFieldNumber = 13;
    private double turnoverRate_;
    /// <summary>
    ///换手率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TurnoverRate {
      get { return turnoverRate_; }
      set {
        turnoverRate_ = value;
      }
    }

    /// <summary>Field number for the "amplitude" field.</summary>
    public const int AmplitudeFieldNumber = 14;
    private double amplitude_;
    /// <summary>
    ///振幅
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amplitude {
      get { return amplitude_; }
      set {
        amplitude_ = value;
      }
    }

    /// <summary>Field number for the "darkStatus" field.</summary>
    public const int DarkStatusFieldNumber = 15;
    private int darkStatus_;
    /// <summary>
    ///DarkStatus, 暗盘交易状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DarkStatus {
      get { return darkStatus_; }
      set {
        darkStatus_ = value;
      }
    }

    /// <summary>Field number for the "listTimestamp" field.</summary>
    public const int ListTimestampFieldNumber = 17;
    private double listTimestamp_;
    /// <summary>
    ///上市日期时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ListTimestamp {
      get { return listTimestamp_; }
      set {
        listTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "updateTimestamp" field.</summary>
    public const int UpdateTimestampFieldNumber = 18;
    private double updateTimestamp_;
    /// <summary>
    ///更新时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpdateTimestamp {
      get { return updateTimestamp_; }
      set {
        updateTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "optionExData" field.</summary>
    public const int OptionExDataFieldNumber = 16;
    private global::QotCommon.OptionBasicQotExData optionExData_;
    /// <summary>
    ///期权特有字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.OptionBasicQotExData OptionExData {
      get { return optionExData_; }
      set {
        optionExData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicQot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicQot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Security, other.Security)) return false;
      if (IsSuspended != other.IsSuspended) return false;
      if (ListTime != other.ListTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceSpread, other.PriceSpread)) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HighPrice, other.HighPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpenPrice, other.OpenPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowPrice, other.LowPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurPrice, other.CurPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastClosePrice, other.LastClosePrice)) return false;
      if (Volume != other.Volume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Turnover, other.Turnover)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TurnoverRate, other.TurnoverRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amplitude, other.Amplitude)) return false;
      if (DarkStatus != other.DarkStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ListTimestamp, other.ListTimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpdateTimestamp, other.UpdateTimestamp)) return false;
      if (!object.Equals(OptionExData, other.OptionExData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (security_ != null) hash ^= Security.GetHashCode();
      if (IsSuspended != false) hash ^= IsSuspended.GetHashCode();
      if (ListTime.Length != 0) hash ^= ListTime.GetHashCode();
      if (PriceSpread != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceSpread);
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      if (HighPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HighPrice);
      if (OpenPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpenPrice);
      if (LowPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowPrice);
      if (CurPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurPrice);
      if (LastClosePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastClosePrice);
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (Turnover != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Turnover);
      if (TurnoverRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TurnoverRate);
      if (Amplitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amplitude);
      if (DarkStatus != 0) hash ^= DarkStatus.GetHashCode();
      if (ListTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ListTimestamp);
      if (UpdateTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpdateTimestamp);
      if (optionExData_ != null) hash ^= OptionExData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (security_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Security);
      }
      if (IsSuspended != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSuspended);
      }
      if (ListTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ListTime);
      }
      if (PriceSpread != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PriceSpread);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UpdateTime);
      }
      if (HighPrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(HighPrice);
      }
      if (OpenPrice != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(OpenPrice);
      }
      if (LowPrice != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(LowPrice);
      }
      if (CurPrice != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CurPrice);
      }
      if (LastClosePrice != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(LastClosePrice);
      }
      if (Volume != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Volume);
      }
      if (Turnover != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Turnover);
      }
      if (TurnoverRate != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(TurnoverRate);
      }
      if (Amplitude != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Amplitude);
      }
      if (DarkStatus != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(DarkStatus);
      }
      if (optionExData_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(OptionExData);
      }
      if (ListTimestamp != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(ListTimestamp);
      }
      if (UpdateTimestamp != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(UpdateTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (security_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Security);
      }
      if (IsSuspended != false) {
        size += 1 + 1;
      }
      if (ListTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListTime);
      }
      if (PriceSpread != 0D) {
        size += 1 + 8;
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      if (HighPrice != 0D) {
        size += 1 + 8;
      }
      if (OpenPrice != 0D) {
        size += 1 + 8;
      }
      if (LowPrice != 0D) {
        size += 1 + 8;
      }
      if (CurPrice != 0D) {
        size += 1 + 8;
      }
      if (LastClosePrice != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (Turnover != 0D) {
        size += 1 + 8;
      }
      if (TurnoverRate != 0D) {
        size += 1 + 8;
      }
      if (Amplitude != 0D) {
        size += 1 + 8;
      }
      if (DarkStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DarkStatus);
      }
      if (ListTimestamp != 0D) {
        size += 2 + 8;
      }
      if (UpdateTimestamp != 0D) {
        size += 2 + 8;
      }
      if (optionExData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OptionExData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicQot other) {
      if (other == null) {
        return;
      }
      if (other.security_ != null) {
        if (security_ == null) {
          Security = new global::QotCommon.Security();
        }
        Security.MergeFrom(other.Security);
      }
      if (other.IsSuspended != false) {
        IsSuspended = other.IsSuspended;
      }
      if (other.ListTime.Length != 0) {
        ListTime = other.ListTime;
      }
      if (other.PriceSpread != 0D) {
        PriceSpread = other.PriceSpread;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
      if (other.HighPrice != 0D) {
        HighPrice = other.HighPrice;
      }
      if (other.OpenPrice != 0D) {
        OpenPrice = other.OpenPrice;
      }
      if (other.LowPrice != 0D) {
        LowPrice = other.LowPrice;
      }
      if (other.CurPrice != 0D) {
        CurPrice = other.CurPrice;
      }
      if (other.LastClosePrice != 0D) {
        LastClosePrice = other.LastClosePrice;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.Turnover != 0D) {
        Turnover = other.Turnover;
      }
      if (other.TurnoverRate != 0D) {
        TurnoverRate = other.TurnoverRate;
      }
      if (other.Amplitude != 0D) {
        Amplitude = other.Amplitude;
      }
      if (other.DarkStatus != 0) {
        DarkStatus = other.DarkStatus;
      }
      if (other.ListTimestamp != 0D) {
        ListTimestamp = other.ListTimestamp;
      }
      if (other.UpdateTimestamp != 0D) {
        UpdateTimestamp = other.UpdateTimestamp;
      }
      if (other.optionExData_ != null) {
        if (optionExData_ == null) {
          OptionExData = new global::QotCommon.OptionBasicQotExData();
        }
        OptionExData.MergeFrom(other.OptionExData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (security_ == null) {
              Security = new global::QotCommon.Security();
            }
            input.ReadMessage(Security);
            break;
          }
          case 16: {
            IsSuspended = input.ReadBool();
            break;
          }
          case 26: {
            ListTime = input.ReadString();
            break;
          }
          case 33: {
            PriceSpread = input.ReadDouble();
            break;
          }
          case 42: {
            UpdateTime = input.ReadString();
            break;
          }
          case 49: {
            HighPrice = input.ReadDouble();
            break;
          }
          case 57: {
            OpenPrice = input.ReadDouble();
            break;
          }
          case 65: {
            LowPrice = input.ReadDouble();
            break;
          }
          case 73: {
            CurPrice = input.ReadDouble();
            break;
          }
          case 81: {
            LastClosePrice = input.ReadDouble();
            break;
          }
          case 88: {
            Volume = input.ReadInt64();
            break;
          }
          case 97: {
            Turnover = input.ReadDouble();
            break;
          }
          case 105: {
            TurnoverRate = input.ReadDouble();
            break;
          }
          case 113: {
            Amplitude = input.ReadDouble();
            break;
          }
          case 120: {
            DarkStatus = input.ReadInt32();
            break;
          }
          case 130: {
            if (optionExData_ == null) {
              OptionExData = new global::QotCommon.OptionBasicQotExData();
            }
            input.ReadMessage(OptionExData);
            break;
          }
          case 137: {
            ListTimestamp = input.ReadDouble();
            break;
          }
          case 145: {
            UpdateTimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeShare : pb::IMessage<TimeShare> {
    private static readonly pb::MessageParser<TimeShare> _parser = new pb::MessageParser<TimeShare>(() => new TimeShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeShare(TimeShare other) : this() {
      time_ = other.time_;
      minute_ = other.minute_;
      isBlank_ = other.isBlank_;
      price_ = other.price_;
      lastClosePrice_ = other.lastClosePrice_;
      avgPrice_ = other.avgPrice_;
      volume_ = other.volume_;
      turnover_ = other.turnover_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeShare Clone() {
      return new TimeShare(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private string time_ = "";
    /// <summary>
    ///时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minute" field.</summary>
    public const int MinuteFieldNumber = 2;
    private int minute_;
    /// <summary>
    ///距离0点过了多少分钟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minute {
      get { return minute_; }
      set {
        minute_ = value;
      }
    }

    /// <summary>Field number for the "isBlank" field.</summary>
    public const int IsBlankFieldNumber = 3;
    private bool isBlank_;
    /// <summary>
    ///是否是空内容的点,若为ture则只有时间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBlank {
      get { return isBlank_; }
      set {
        isBlank_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private double price_;
    /// <summary>
    ///当前价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "lastClosePrice" field.</summary>
    public const int LastClosePriceFieldNumber = 5;
    private double lastClosePrice_;
    /// <summary>
    ///昨收价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastClosePrice {
      get { return lastClosePrice_; }
      set {
        lastClosePrice_ = value;
      }
    }

    /// <summary>Field number for the "avgPrice" field.</summary>
    public const int AvgPriceFieldNumber = 6;
    private double avgPrice_;
    /// <summary>
    ///均价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgPrice {
      get { return avgPrice_; }
      set {
        avgPrice_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 7;
    private long volume_;
    /// <summary>
    ///成交量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "turnover" field.</summary>
    public const int TurnoverFieldNumber = 8;
    private double turnover_;
    /// <summary>
    ///成交额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Turnover {
      get { return turnover_; }
      set {
        turnover_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 9;
    private double timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Minute != other.Minute) return false;
      if (IsBlank != other.IsBlank) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastClosePrice, other.LastClosePrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgPrice, other.AvgPrice)) return false;
      if (Volume != other.Volume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Turnover, other.Turnover)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (Minute != 0) hash ^= Minute.GetHashCode();
      if (IsBlank != false) hash ^= IsBlank.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (LastClosePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastClosePrice);
      if (AvgPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgPrice);
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (Turnover != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Turnover);
      if (Timestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Time);
      }
      if (Minute != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Minute);
      }
      if (IsBlank != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsBlank);
      }
      if (Price != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Price);
      }
      if (LastClosePrice != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LastClosePrice);
      }
      if (AvgPrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(AvgPrice);
      }
      if (Volume != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Volume);
      }
      if (Turnover != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Turnover);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (Minute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minute);
      }
      if (IsBlank != false) {
        size += 1 + 1;
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (LastClosePrice != 0D) {
        size += 1 + 8;
      }
      if (AvgPrice != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (Turnover != 0D) {
        size += 1 + 8;
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeShare other) {
      if (other == null) {
        return;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.Minute != 0) {
        Minute = other.Minute;
      }
      if (other.IsBlank != false) {
        IsBlank = other.IsBlank;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.LastClosePrice != 0D) {
        LastClosePrice = other.LastClosePrice;
      }
      if (other.AvgPrice != 0D) {
        AvgPrice = other.AvgPrice;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.Turnover != 0D) {
        Turnover = other.Turnover;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Time = input.ReadString();
            break;
          }
          case 16: {
            Minute = input.ReadInt32();
            break;
          }
          case 24: {
            IsBlank = input.ReadBool();
            break;
          }
          case 33: {
            Price = input.ReadDouble();
            break;
          }
          case 41: {
            LastClosePrice = input.ReadDouble();
            break;
          }
          case 49: {
            AvgPrice = input.ReadDouble();
            break;
          }
          case 56: {
            Volume = input.ReadInt64();
            break;
          }
          case 65: {
            Turnover = input.ReadDouble();
            break;
          }
          case 73: {
            Timestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SecurityStaticBasic : pb::IMessage<SecurityStaticBasic> {
    private static readonly pb::MessageParser<SecurityStaticBasic> _parser = new pb::MessageParser<SecurityStaticBasic>(() => new SecurityStaticBasic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityStaticBasic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityStaticBasic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityStaticBasic(SecurityStaticBasic other) : this() {
      security_ = other.security_ != null ? other.security_.Clone() : null;
      id_ = other.id_;
      lotSize_ = other.lotSize_;
      secType_ = other.secType_;
      name_ = other.name_;
      listTime_ = other.listTime_;
      delisting_ = other.delisting_;
      listTimestamp_ = other.listTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityStaticBasic Clone() {
      return new SecurityStaticBasic(this);
    }

    /// <summary>Field number for the "security" field.</summary>
    public const int SecurityFieldNumber = 1;
    private global::QotCommon.Security security_;
    /// <summary>
    ///股票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Security {
      get { return security_; }
      set {
        security_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private long id_;
    /// <summary>
    ///股票ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "lotSize" field.</summary>
    public const int LotSizeFieldNumber = 3;
    private int lotSize_;
    /// <summary>
    ///每手数量,期权类型表示一份合约的股数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LotSize {
      get { return lotSize_; }
      set {
        lotSize_ = value;
      }
    }

    /// <summary>Field number for the "secType" field.</summary>
    public const int SecTypeFieldNumber = 4;
    private int secType_;
    /// <summary>
    ///Qot_Common.SecurityType,股票类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecType {
      get { return secType_; }
      set {
        secType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    ///股票名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "listTime" field.</summary>
    public const int ListTimeFieldNumber = 6;
    private string listTime_ = "";
    /// <summary>
    ///上市时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListTime {
      get { return listTime_; }
      set {
        listTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delisting" field.</summary>
    public const int DelistingFieldNumber = 7;
    private bool delisting_;
    /// <summary>
    ///是否退市
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Delisting {
      get { return delisting_; }
      set {
        delisting_ = value;
      }
    }

    /// <summary>Field number for the "listTimestamp" field.</summary>
    public const int ListTimestampFieldNumber = 8;
    private double listTimestamp_;
    /// <summary>
    ///上市时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ListTimestamp {
      get { return listTimestamp_; }
      set {
        listTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityStaticBasic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityStaticBasic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Security, other.Security)) return false;
      if (Id != other.Id) return false;
      if (LotSize != other.LotSize) return false;
      if (SecType != other.SecType) return false;
      if (Name != other.Name) return false;
      if (ListTime != other.ListTime) return false;
      if (Delisting != other.Delisting) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ListTimestamp, other.ListTimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (security_ != null) hash ^= Security.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (LotSize != 0) hash ^= LotSize.GetHashCode();
      if (SecType != 0) hash ^= SecType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ListTime.Length != 0) hash ^= ListTime.GetHashCode();
      if (Delisting != false) hash ^= Delisting.GetHashCode();
      if (ListTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ListTimestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (security_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Security);
      }
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (LotSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LotSize);
      }
      if (SecType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SecType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (ListTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ListTime);
      }
      if (Delisting != false) {
        output.WriteRawTag(56);
        output.WriteBool(Delisting);
      }
      if (ListTimestamp != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ListTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (security_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Security);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (LotSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LotSize);
      }
      if (SecType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ListTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListTime);
      }
      if (Delisting != false) {
        size += 1 + 1;
      }
      if (ListTimestamp != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityStaticBasic other) {
      if (other == null) {
        return;
      }
      if (other.security_ != null) {
        if (security_ == null) {
          Security = new global::QotCommon.Security();
        }
        Security.MergeFrom(other.Security);
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.LotSize != 0) {
        LotSize = other.LotSize;
      }
      if (other.SecType != 0) {
        SecType = other.SecType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ListTime.Length != 0) {
        ListTime = other.ListTime;
      }
      if (other.Delisting != false) {
        Delisting = other.Delisting;
      }
      if (other.ListTimestamp != 0D) {
        ListTimestamp = other.ListTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (security_ == null) {
              Security = new global::QotCommon.Security();
            }
            input.ReadMessage(Security);
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 24: {
            LotSize = input.ReadInt32();
            break;
          }
          case 32: {
            SecType = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            ListTime = input.ReadString();
            break;
          }
          case 56: {
            Delisting = input.ReadBool();
            break;
          }
          case 65: {
            ListTimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WarrantStaticExData : pb::IMessage<WarrantStaticExData> {
    private static readonly pb::MessageParser<WarrantStaticExData> _parser = new pb::MessageParser<WarrantStaticExData>(() => new WarrantStaticExData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarrantStaticExData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarrantStaticExData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarrantStaticExData(WarrantStaticExData other) : this() {
      type_ = other.type_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarrantStaticExData Clone() {
      return new WarrantStaticExData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///Qot_Common.WarrantType,涡轮类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::QotCommon.Security owner_;
    /// <summary>
    ///所属正股
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarrantStaticExData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarrantStaticExData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarrantStaticExData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::QotCommon.Security();
        }
        Owner.MergeFrom(other.Owner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::QotCommon.Security();
            }
            input.ReadMessage(Owner);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OptionStaticExData : pb::IMessage<OptionStaticExData> {
    private static readonly pb::MessageParser<OptionStaticExData> _parser = new pb::MessageParser<OptionStaticExData>(() => new OptionStaticExData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionStaticExData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionStaticExData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionStaticExData(OptionStaticExData other) : this() {
      type_ = other.type_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      strikeTime_ = other.strikeTime_;
      strikePrice_ = other.strikePrice_;
      suspend_ = other.suspend_;
      market_ = other.market_;
      strikeTimestamp_ = other.strikeTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionStaticExData Clone() {
      return new OptionStaticExData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///Qot_Common.OptionType,期权
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::QotCommon.Security owner_;
    /// <summary>
    ///标的股
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "strikeTime" field.</summary>
    public const int StrikeTimeFieldNumber = 3;
    private string strikeTime_ = "";
    /// <summary>
    ///行权日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrikeTime {
      get { return strikeTime_; }
      set {
        strikeTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strikePrice" field.</summary>
    public const int StrikePriceFieldNumber = 4;
    private double strikePrice_;
    /// <summary>
    ///行权价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikePrice {
      get { return strikePrice_; }
      set {
        strikePrice_ = value;
      }
    }

    /// <summary>Field number for the "suspend" field.</summary>
    public const int SuspendFieldNumber = 5;
    private bool suspend_;
    /// <summary>
    ///是否停牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Suspend {
      get { return suspend_; }
      set {
        suspend_ = value;
      }
    }

    /// <summary>Field number for the "market" field.</summary>
    public const int MarketFieldNumber = 6;
    private string market_ = "";
    /// <summary>
    ///发行市场名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Market {
      get { return market_; }
      set {
        market_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strikeTimestamp" field.</summary>
    public const int StrikeTimestampFieldNumber = 7;
    private double strikeTimestamp_;
    /// <summary>
    ///行权日时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikeTimestamp {
      get { return strikeTimestamp_; }
      set {
        strikeTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionStaticExData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionStaticExData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (StrikeTime != other.StrikeTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePrice, other.StrikePrice)) return false;
      if (Suspend != other.Suspend) return false;
      if (Market != other.Market) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikeTimestamp, other.StrikeTimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (StrikeTime.Length != 0) hash ^= StrikeTime.GetHashCode();
      if (StrikePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePrice);
      if (Suspend != false) hash ^= Suspend.GetHashCode();
      if (Market.Length != 0) hash ^= Market.GetHashCode();
      if (StrikeTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikeTimestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (StrikeTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StrikeTime);
      }
      if (StrikePrice != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(StrikePrice);
      }
      if (Suspend != false) {
        output.WriteRawTag(40);
        output.WriteBool(Suspend);
      }
      if (Market.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Market);
      }
      if (StrikeTimestamp != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(StrikeTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (StrikeTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrikeTime);
      }
      if (StrikePrice != 0D) {
        size += 1 + 8;
      }
      if (Suspend != false) {
        size += 1 + 1;
      }
      if (Market.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Market);
      }
      if (StrikeTimestamp != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionStaticExData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::QotCommon.Security();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.StrikeTime.Length != 0) {
        StrikeTime = other.StrikeTime;
      }
      if (other.StrikePrice != 0D) {
        StrikePrice = other.StrikePrice;
      }
      if (other.Suspend != false) {
        Suspend = other.Suspend;
      }
      if (other.Market.Length != 0) {
        Market = other.Market;
      }
      if (other.StrikeTimestamp != 0D) {
        StrikeTimestamp = other.StrikeTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::QotCommon.Security();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            StrikeTime = input.ReadString();
            break;
          }
          case 33: {
            StrikePrice = input.ReadDouble();
            break;
          }
          case 40: {
            Suspend = input.ReadBool();
            break;
          }
          case 50: {
            Market = input.ReadString();
            break;
          }
          case 57: {
            StrikeTimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SecurityStaticInfo : pb::IMessage<SecurityStaticInfo> {
    private static readonly pb::MessageParser<SecurityStaticInfo> _parser = new pb::MessageParser<SecurityStaticInfo>(() => new SecurityStaticInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityStaticInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityStaticInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityStaticInfo(SecurityStaticInfo other) : this() {
      basic_ = other.basic_ != null ? other.basic_.Clone() : null;
      warrantExData_ = other.warrantExData_ != null ? other.warrantExData_.Clone() : null;
      optionExData_ = other.optionExData_ != null ? other.optionExData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityStaticInfo Clone() {
      return new SecurityStaticInfo(this);
    }

    /// <summary>Field number for the "basic" field.</summary>
    public const int BasicFieldNumber = 1;
    private global::QotCommon.SecurityStaticBasic basic_;
    /// <summary>
    ///基本股票静态信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.SecurityStaticBasic Basic {
      get { return basic_; }
      set {
        basic_ = value;
      }
    }

    /// <summary>Field number for the "warrantExData" field.</summary>
    public const int WarrantExDataFieldNumber = 2;
    private global::QotCommon.WarrantStaticExData warrantExData_;
    /// <summary>
    ///窝轮额外股票静态信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.WarrantStaticExData WarrantExData {
      get { return warrantExData_; }
      set {
        warrantExData_ = value;
      }
    }

    /// <summary>Field number for the "optionExData" field.</summary>
    public const int OptionExDataFieldNumber = 3;
    private global::QotCommon.OptionStaticExData optionExData_;
    /// <summary>
    ///期权额外股票静态信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.OptionStaticExData OptionExData {
      get { return optionExData_; }
      set {
        optionExData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityStaticInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityStaticInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Basic, other.Basic)) return false;
      if (!object.Equals(WarrantExData, other.WarrantExData)) return false;
      if (!object.Equals(OptionExData, other.OptionExData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (basic_ != null) hash ^= Basic.GetHashCode();
      if (warrantExData_ != null) hash ^= WarrantExData.GetHashCode();
      if (optionExData_ != null) hash ^= OptionExData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (basic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Basic);
      }
      if (warrantExData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WarrantExData);
      }
      if (optionExData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OptionExData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (basic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Basic);
      }
      if (warrantExData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WarrantExData);
      }
      if (optionExData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionExData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityStaticInfo other) {
      if (other == null) {
        return;
      }
      if (other.basic_ != null) {
        if (basic_ == null) {
          Basic = new global::QotCommon.SecurityStaticBasic();
        }
        Basic.MergeFrom(other.Basic);
      }
      if (other.warrantExData_ != null) {
        if (warrantExData_ == null) {
          WarrantExData = new global::QotCommon.WarrantStaticExData();
        }
        WarrantExData.MergeFrom(other.WarrantExData);
      }
      if (other.optionExData_ != null) {
        if (optionExData_ == null) {
          OptionExData = new global::QotCommon.OptionStaticExData();
        }
        OptionExData.MergeFrom(other.OptionExData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (basic_ == null) {
              Basic = new global::QotCommon.SecurityStaticBasic();
            }
            input.ReadMessage(Basic);
            break;
          }
          case 18: {
            if (warrantExData_ == null) {
              WarrantExData = new global::QotCommon.WarrantStaticExData();
            }
            input.ReadMessage(WarrantExData);
            break;
          }
          case 26: {
            if (optionExData_ == null) {
              OptionExData = new global::QotCommon.OptionStaticExData();
            }
            input.ReadMessage(OptionExData);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Broker : pb::IMessage<Broker> {
    private static readonly pb::MessageParser<Broker> _parser = new pb::MessageParser<Broker>(() => new Broker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Broker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broker(Broker other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broker Clone() {
      return new Broker(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///经纪ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///经纪名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private int pos_;
    /// <summary>
    ///经纪档位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Broker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Broker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Broker other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ticker : pb::IMessage<Ticker> {
    private static readonly pb::MessageParser<Ticker> _parser = new pb::MessageParser<Ticker>(() => new Ticker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ticker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticker(Ticker other) : this() {
      time_ = other.time_;
      sequence_ = other.sequence_;
      dir_ = other.dir_;
      price_ = other.price_;
      volume_ = other.volume_;
      turnover_ = other.turnover_;
      recvTime_ = other.recvTime_;
      type_ = other.type_;
      typeSign_ = other.typeSign_;
      pushDataType_ = other.pushDataType_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticker Clone() {
      return new Ticker(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private string time_ = "";
    /// <summary>
    ///时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private long sequence_;
    /// <summary>
    /// 唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 3;
    private int dir_;
    /// <summary>
    ///TickerDirection, 买卖方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private double price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 5;
    private long volume_;
    /// <summary>
    ///成交量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "turnover" field.</summary>
    public const int TurnoverFieldNumber = 6;
    private double turnover_;
    /// <summary>
    ///成交额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Turnover {
      get { return turnover_; }
      set {
        turnover_ = value;
      }
    }

    /// <summary>Field number for the "recvTime" field.</summary>
    public const int RecvTimeFieldNumber = 7;
    private double recvTime_;
    /// <summary>
    ///收到推送数据的本地时间戳，用于定位延迟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RecvTime {
      get { return recvTime_; }
      set {
        recvTime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private int type_;
    /// <summary>
    ///TickerType, 逐笔类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "typeSign" field.</summary>
    public const int TypeSignFieldNumber = 9;
    private int typeSign_;
    /// <summary>
    ///逐笔类型符号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeSign {
      get { return typeSign_; }
      set {
        typeSign_ = value;
      }
    }

    /// <summary>Field number for the "pushDataType" field.</summary>
    public const int PushDataTypeFieldNumber = 10;
    private int pushDataType_;
    /// <summary>
    ///用于区分推送情况
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PushDataType {
      get { return pushDataType_; }
      set {
        pushDataType_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 11;
    private double timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ticker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ticker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Sequence != other.Sequence) return false;
      if (Dir != other.Dir) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (Volume != other.Volume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Turnover, other.Turnover)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RecvTime, other.RecvTime)) return false;
      if (Type != other.Type) return false;
      if (TypeSign != other.TypeSign) return false;
      if (PushDataType != other.PushDataType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (Sequence != 0L) hash ^= Sequence.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (Turnover != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Turnover);
      if (RecvTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RecvTime);
      if (Type != 0) hash ^= Type.GetHashCode();
      if (TypeSign != 0) hash ^= TypeSign.GetHashCode();
      if (PushDataType != 0) hash ^= PushDataType.GetHashCode();
      if (Timestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Time);
      }
      if (Sequence != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Sequence);
      }
      if (Dir != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Dir);
      }
      if (Price != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Price);
      }
      if (Volume != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Volume);
      }
      if (Turnover != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Turnover);
      }
      if (RecvTime != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(RecvTime);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Type);
      }
      if (TypeSign != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TypeSign);
      }
      if (PushDataType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PushDataType);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (Sequence != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sequence);
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (Turnover != 0D) {
        size += 1 + 8;
      }
      if (RecvTime != 0D) {
        size += 1 + 8;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (TypeSign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeSign);
      }
      if (PushDataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PushDataType);
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ticker other) {
      if (other == null) {
        return;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.Sequence != 0L) {
        Sequence = other.Sequence;
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.Turnover != 0D) {
        Turnover = other.Turnover;
      }
      if (other.RecvTime != 0D) {
        RecvTime = other.RecvTime;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.TypeSign != 0) {
        TypeSign = other.TypeSign;
      }
      if (other.PushDataType != 0) {
        PushDataType = other.PushDataType;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Time = input.ReadString();
            break;
          }
          case 16: {
            Sequence = input.ReadInt64();
            break;
          }
          case 24: {
            Dir = input.ReadInt32();
            break;
          }
          case 33: {
            Price = input.ReadDouble();
            break;
          }
          case 40: {
            Volume = input.ReadInt64();
            break;
          }
          case 49: {
            Turnover = input.ReadDouble();
            break;
          }
          case 57: {
            RecvTime = input.ReadDouble();
            break;
          }
          case 64: {
            Type = input.ReadInt32();
            break;
          }
          case 72: {
            TypeSign = input.ReadInt32();
            break;
          }
          case 80: {
            PushDataType = input.ReadInt32();
            break;
          }
          case 89: {
            Timestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderBook : pb::IMessage<OrderBook> {
    private static readonly pb::MessageParser<OrderBook> _parser = new pb::MessageParser<OrderBook>(() => new OrderBook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderBook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBook(OrderBook other) : this() {
      price_ = other.price_;
      volume_ = other.volume_;
      orederCount_ = other.orederCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBook Clone() {
      return new OrderBook(this);
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 1;
    private double price_;
    /// <summary>
    ///委托价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 2;
    private long volume_;
    /// <summary>
    ///委托数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "orederCount" field.</summary>
    public const int OrederCountFieldNumber = 3;
    private int orederCount_;
    /// <summary>
    ///委托订单个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrederCount {
      get { return orederCount_; }
      set {
        orederCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderBook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderBook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (Volume != other.Volume) return false;
      if (OrederCount != other.OrederCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (OrederCount != 0) hash ^= OrederCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Price != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Price);
      }
      if (Volume != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Volume);
      }
      if (OrederCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OrederCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (OrederCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrederCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderBook other) {
      if (other == null) {
        return;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.OrederCount != 0) {
        OrederCount = other.OrederCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Price = input.ReadDouble();
            break;
          }
          case 16: {
            Volume = input.ReadInt64();
            break;
          }
          case 24: {
            OrederCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderDetail : pb::IMessage<OrderDetail> {
    private static readonly pb::MessageParser<OrderDetail> _parser = new pb::MessageParser<OrderDetail>(() => new OrderDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDetail(OrderDetail other) : this() {
      orderCount_ = other.orderCount_;
      orderVol_ = other.orderVol_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDetail Clone() {
      return new OrderDetail(this);
    }

    /// <summary>Field number for the "orderCount" field.</summary>
    public const int OrderCountFieldNumber = 1;
    private int orderCount_;
    /// <summary>
    ///委托订单个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderCount {
      get { return orderCount_; }
      set {
        orderCount_ = value;
      }
    }

    /// <summary>Field number for the "orderVol" field.</summary>
    public const int OrderVolFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_orderVol_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> orderVol_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///每笔委托的委托量，注意：当前只会返回最多前50笔委托的委托数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> OrderVol {
      get { return orderVol_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderCount != other.OrderCount) return false;
      if(!orderVol_.Equals(other.orderVol_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderCount != 0) hash ^= OrderCount.GetHashCode();
      hash ^= orderVol_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderCount);
      }
      orderVol_.WriteTo(output, _repeated_orderVol_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderCount);
      }
      size += orderVol_.CalculateSize(_repeated_orderVol_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderDetail other) {
      if (other == null) {
        return;
      }
      if (other.OrderCount != 0) {
        OrderCount = other.OrderCount;
      }
      orderVol_.Add(other.orderVol_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrderCount = input.ReadInt32();
            break;
          }
          case 18:
          case 17: {
            orderVol_.AddEntriesFrom(input, _repeated_orderVol_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///持股变动
  /// </summary>
  public sealed partial class ShareHoldingChange : pb::IMessage<ShareHoldingChange> {
    private static readonly pb::MessageParser<ShareHoldingChange> _parser = new pb::MessageParser<ShareHoldingChange>(() => new ShareHoldingChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareHoldingChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareHoldingChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareHoldingChange(ShareHoldingChange other) : this() {
      holderName_ = other.holderName_;
      holdingQty_ = other.holdingQty_;
      holdingRatio_ = other.holdingRatio_;
      changeQty_ = other.changeQty_;
      changeRatio_ = other.changeRatio_;
      time_ = other.time_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareHoldingChange Clone() {
      return new ShareHoldingChange(this);
    }

    /// <summary>Field number for the "holderName" field.</summary>
    public const int HolderNameFieldNumber = 1;
    private string holderName_ = "";
    /// <summary>
    ///持有者名称（机构名称 或 基金名称 或 高管姓名）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HolderName {
      get { return holderName_; }
      set {
        holderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "holdingQty" field.</summary>
    public const int HoldingQtyFieldNumber = 2;
    private double holdingQty_;
    /// <summary>
    ///当前持股数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HoldingQty {
      get { return holdingQty_; }
      set {
        holdingQty_ = value;
      }
    }

    /// <summary>Field number for the "holdingRatio" field.</summary>
    public const int HoldingRatioFieldNumber = 3;
    private double holdingRatio_;
    /// <summary>
    ///当前持股百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HoldingRatio {
      get { return holdingRatio_; }
      set {
        holdingRatio_ = value;
      }
    }

    /// <summary>Field number for the "changeQty" field.</summary>
    public const int ChangeQtyFieldNumber = 4;
    private double changeQty_;
    /// <summary>
    ///较上一次变动数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ChangeQty {
      get { return changeQty_; }
      set {
        changeQty_ = value;
      }
    }

    /// <summary>Field number for the "changeRatio" field.</summary>
    public const int ChangeRatioFieldNumber = 5;
    private double changeRatio_;
    /// <summary>
    ///较上一次变动百分比（是相对于自身的比例，而不是总的。如总股本1万股，持有100股，持股百分比是1%，卖掉50股，变动比例是50%，而不是0.5%）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ChangeRatio {
      get { return changeRatio_; }
      set {
        changeRatio_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 6;
    private string time_ = "";
    /// <summary>
    ///发布时间(YYYY-MM-DD HH:MM:SS字符串)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 7;
    private double timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShareHoldingChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShareHoldingChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HolderName != other.HolderName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HoldingQty, other.HoldingQty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HoldingRatio, other.HoldingRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChangeQty, other.ChangeQty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChangeRatio, other.ChangeRatio)) return false;
      if (Time != other.Time) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HolderName.Length != 0) hash ^= HolderName.GetHashCode();
      if (HoldingQty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HoldingQty);
      if (HoldingRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HoldingRatio);
      if (ChangeQty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChangeQty);
      if (ChangeRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChangeRatio);
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (Timestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HolderName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HolderName);
      }
      if (HoldingQty != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(HoldingQty);
      }
      if (HoldingRatio != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(HoldingRatio);
      }
      if (ChangeQty != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(ChangeQty);
      }
      if (ChangeRatio != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(ChangeRatio);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Time);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HolderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HolderName);
      }
      if (HoldingQty != 0D) {
        size += 1 + 8;
      }
      if (HoldingRatio != 0D) {
        size += 1 + 8;
      }
      if (ChangeQty != 0D) {
        size += 1 + 8;
      }
      if (ChangeRatio != 0D) {
        size += 1 + 8;
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (Timestamp != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShareHoldingChange other) {
      if (other == null) {
        return;
      }
      if (other.HolderName.Length != 0) {
        HolderName = other.HolderName;
      }
      if (other.HoldingQty != 0D) {
        HoldingQty = other.HoldingQty;
      }
      if (other.HoldingRatio != 0D) {
        HoldingRatio = other.HoldingRatio;
      }
      if (other.ChangeQty != 0D) {
        ChangeQty = other.ChangeQty;
      }
      if (other.ChangeRatio != 0D) {
        ChangeRatio = other.ChangeRatio;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HolderName = input.ReadString();
            break;
          }
          case 17: {
            HoldingQty = input.ReadDouble();
            break;
          }
          case 25: {
            HoldingRatio = input.ReadDouble();
            break;
          }
          case 33: {
            ChangeQty = input.ReadDouble();
            break;
          }
          case 41: {
            ChangeRatio = input.ReadDouble();
            break;
          }
          case 50: {
            Time = input.ReadString();
            break;
          }
          case 57: {
            Timestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubInfo : pb::IMessage<SubInfo> {
    private static readonly pb::MessageParser<SubInfo> _parser = new pb::MessageParser<SubInfo>(() => new SubInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubInfo(SubInfo other) : this() {
      subType_ = other.subType_;
      securityList_ = other.securityList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubInfo Clone() {
      return new SubInfo(this);
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 1;
    private int subType_;
    /// <summary>
    ///Qot_Common.SubType,订阅类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "securityList" field.</summary>
    public const int SecurityListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::QotCommon.Security> _repeated_securityList_codec
        = pb::FieldCodec.ForMessage(18, global::QotCommon.Security.Parser);
    private readonly pbc::RepeatedField<global::QotCommon.Security> securityList_ = new pbc::RepeatedField<global::QotCommon.Security>();
    /// <summary>
    ///订阅该类型行情的股票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::QotCommon.Security> SecurityList {
      get { return securityList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubType != other.SubType) return false;
      if(!securityList_.Equals(other.securityList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubType != 0) hash ^= SubType.GetHashCode();
      hash ^= securityList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SubType);
      }
      securityList_.WriteTo(output, _repeated_securityList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubType);
      }
      size += securityList_.CalculateSize(_repeated_securityList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubInfo other) {
      if (other == null) {
        return;
      }
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      securityList_.Add(other.securityList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SubType = input.ReadInt32();
            break;
          }
          case 18: {
            securityList_.AddEntriesFrom(input, _repeated_securityList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnSubInfo : pb::IMessage<ConnSubInfo> {
    private static readonly pb::MessageParser<ConnSubInfo> _parser = new pb::MessageParser<ConnSubInfo>(() => new ConnSubInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnSubInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnSubInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnSubInfo(ConnSubInfo other) : this() {
      subInfoList_ = other.subInfoList_.Clone();
      usedQuota_ = other.usedQuota_;
      isOwnConnData_ = other.isOwnConnData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnSubInfo Clone() {
      return new ConnSubInfo(this);
    }

    /// <summary>Field number for the "subInfoList" field.</summary>
    public const int SubInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::QotCommon.SubInfo> _repeated_subInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::QotCommon.SubInfo.Parser);
    private readonly pbc::RepeatedField<global::QotCommon.SubInfo> subInfoList_ = new pbc::RepeatedField<global::QotCommon.SubInfo>();
    /// <summary>
    ///该连接订阅信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::QotCommon.SubInfo> SubInfoList {
      get { return subInfoList_; }
    }

    /// <summary>Field number for the "usedQuota" field.</summary>
    public const int UsedQuotaFieldNumber = 2;
    private int usedQuota_;
    /// <summary>
    ///该连接已经使用的订阅额度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsedQuota {
      get { return usedQuota_; }
      set {
        usedQuota_ = value;
      }
    }

    /// <summary>Field number for the "isOwnConnData" field.</summary>
    public const int IsOwnConnDataFieldNumber = 3;
    private bool isOwnConnData_;
    /// <summary>
    ///用于区分是否是自己连接的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOwnConnData {
      get { return isOwnConnData_; }
      set {
        isOwnConnData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnSubInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnSubInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!subInfoList_.Equals(other.subInfoList_)) return false;
      if (UsedQuota != other.UsedQuota) return false;
      if (IsOwnConnData != other.IsOwnConnData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= subInfoList_.GetHashCode();
      if (UsedQuota != 0) hash ^= UsedQuota.GetHashCode();
      if (IsOwnConnData != false) hash ^= IsOwnConnData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      subInfoList_.WriteTo(output, _repeated_subInfoList_codec);
      if (UsedQuota != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UsedQuota);
      }
      if (IsOwnConnData != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsOwnConnData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += subInfoList_.CalculateSize(_repeated_subInfoList_codec);
      if (UsedQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsedQuota);
      }
      if (IsOwnConnData != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnSubInfo other) {
      if (other == null) {
        return;
      }
      subInfoList_.Add(other.subInfoList_);
      if (other.UsedQuota != 0) {
        UsedQuota = other.UsedQuota;
      }
      if (other.IsOwnConnData != false) {
        IsOwnConnData = other.IsOwnConnData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            subInfoList_.AddEntriesFrom(input, _repeated_subInfoList_codec);
            break;
          }
          case 16: {
            UsedQuota = input.ReadInt32();
            break;
          }
          case 24: {
            IsOwnConnData = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlateInfo : pb::IMessage<PlateInfo> {
    private static readonly pb::MessageParser<PlateInfo> _parser = new pb::MessageParser<PlateInfo>(() => new PlateInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlateInfo(PlateInfo other) : this() {
      plate_ = other.plate_ != null ? other.plate_.Clone() : null;
      name_ = other.name_;
      plateType_ = other.plateType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlateInfo Clone() {
      return new PlateInfo(this);
    }

    /// <summary>Field number for the "plate" field.</summary>
    public const int PlateFieldNumber = 1;
    private global::QotCommon.Security plate_;
    /// <summary>
    ///板块
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Plate {
      get { return plate_; }
      set {
        plate_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///板块名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plateType" field.</summary>
    public const int PlateTypeFieldNumber = 3;
    private int plateType_;
    /// <summary>
    ///PlateSetType 板块类型, 仅3207（获取股票所属板块）协议返回该字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlateType {
      get { return plateType_; }
      set {
        plateType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Plate, other.Plate)) return false;
      if (Name != other.Name) return false;
      if (PlateType != other.PlateType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (plate_ != null) hash ^= Plate.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PlateType != 0) hash ^= PlateType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (plate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Plate);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PlateType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlateType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (plate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plate);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PlateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlateType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlateInfo other) {
      if (other == null) {
        return;
      }
      if (other.plate_ != null) {
        if (plate_ == null) {
          Plate = new global::QotCommon.Security();
        }
        Plate.MergeFrom(other.Plate);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PlateType != 0) {
        PlateType = other.PlateType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (plate_ == null) {
              Plate = new global::QotCommon.Security();
            }
            input.ReadMessage(Plate);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            PlateType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rehab : pb::IMessage<Rehab> {
    private static readonly pb::MessageParser<Rehab> _parser = new pb::MessageParser<Rehab>(() => new Rehab());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rehab> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotCommon.QotCommonReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rehab() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rehab(Rehab other) : this() {
      time_ = other.time_;
      companyActFlag_ = other.companyActFlag_;
      fwdFactorA_ = other.fwdFactorA_;
      fwdFactorB_ = other.fwdFactorB_;
      bwdFactorA_ = other.bwdFactorA_;
      bwdFactorB_ = other.bwdFactorB_;
      splitBase_ = other.splitBase_;
      splitErt_ = other.splitErt_;
      joinBase_ = other.joinBase_;
      joinErt_ = other.joinErt_;
      bonusBase_ = other.bonusBase_;
      bonusErt_ = other.bonusErt_;
      transferBase_ = other.transferBase_;
      transferErt_ = other.transferErt_;
      allotBase_ = other.allotBase_;
      allotErt_ = other.allotErt_;
      allotPrice_ = other.allotPrice_;
      addBase_ = other.addBase_;
      addErt_ = other.addErt_;
      addPrice_ = other.addPrice_;
      dividend_ = other.dividend_;
      spDividend_ = other.spDividend_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rehab Clone() {
      return new Rehab(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private string time_ = "";
    /// <summary>
    ///时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "companyActFlag" field.</summary>
    public const int CompanyActFlagFieldNumber = 2;
    private long companyActFlag_;
    /// <summary>
    ///公司行动(CompanyAct)组合标志位,指定某些字段值是否有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompanyActFlag {
      get { return companyActFlag_; }
      set {
        companyActFlag_ = value;
      }
    }

    /// <summary>Field number for the "fwdFactorA" field.</summary>
    public const int FwdFactorAFieldNumber = 3;
    private double fwdFactorA_;
    /// <summary>
    ///前复权因子A
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FwdFactorA {
      get { return fwdFactorA_; }
      set {
        fwdFactorA_ = value;
      }
    }

    /// <summary>Field number for the "fwdFactorB" field.</summary>
    public const int FwdFactorBFieldNumber = 4;
    private double fwdFactorB_;
    /// <summary>
    ///前复权因子B
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FwdFactorB {
      get { return fwdFactorB_; }
      set {
        fwdFactorB_ = value;
      }
    }

    /// <summary>Field number for the "bwdFactorA" field.</summary>
    public const int BwdFactorAFieldNumber = 5;
    private double bwdFactorA_;
    /// <summary>
    ///后复权因子A
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BwdFactorA {
      get { return bwdFactorA_; }
      set {
        bwdFactorA_ = value;
      }
    }

    /// <summary>Field number for the "bwdFactorB" field.</summary>
    public const int BwdFactorBFieldNumber = 6;
    private double bwdFactorB_;
    /// <summary>
    ///后复权因子B
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BwdFactorB {
      get { return bwdFactorB_; }
      set {
        bwdFactorB_ = value;
      }
    }

    /// <summary>Field number for the "splitBase" field.</summary>
    public const int SplitBaseFieldNumber = 7;
    private int splitBase_;
    /// <summary>
    ///拆股(eg.1拆5，Base为1，Ert为5)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SplitBase {
      get { return splitBase_; }
      set {
        splitBase_ = value;
      }
    }

    /// <summary>Field number for the "splitErt" field.</summary>
    public const int SplitErtFieldNumber = 8;
    private int splitErt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SplitErt {
      get { return splitErt_; }
      set {
        splitErt_ = value;
      }
    }

    /// <summary>Field number for the "joinBase" field.</summary>
    public const int JoinBaseFieldNumber = 9;
    private int joinBase_;
    /// <summary>
    ///合股(eg.50合1，Base为50，Ert为1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinBase {
      get { return joinBase_; }
      set {
        joinBase_ = value;
      }
    }

    /// <summary>Field number for the "joinErt" field.</summary>
    public const int JoinErtFieldNumber = 10;
    private int joinErt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinErt {
      get { return joinErt_; }
      set {
        joinErt_ = value;
      }
    }

    /// <summary>Field number for the "bonusBase" field.</summary>
    public const int BonusBaseFieldNumber = 11;
    private int bonusBase_;
    /// <summary>
    ///送股(eg.10送3, Base为10,Ert为3)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BonusBase {
      get { return bonusBase_; }
      set {
        bonusBase_ = value;
      }
    }

    /// <summary>Field number for the "bonusErt" field.</summary>
    public const int BonusErtFieldNumber = 12;
    private int bonusErt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BonusErt {
      get { return bonusErt_; }
      set {
        bonusErt_ = value;
      }
    }

    /// <summary>Field number for the "transferBase" field.</summary>
    public const int TransferBaseFieldNumber = 13;
    private int transferBase_;
    /// <summary>
    ///转赠股(eg.10转3, Base为10,Ert为3)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransferBase {
      get { return transferBase_; }
      set {
        transferBase_ = value;
      }
    }

    /// <summary>Field number for the "transferErt" field.</summary>
    public const int TransferErtFieldNumber = 14;
    private int transferErt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransferErt {
      get { return transferErt_; }
      set {
        transferErt_ = value;
      }
    }

    /// <summary>Field number for the "allotBase" field.</summary>
    public const int AllotBaseFieldNumber = 15;
    private int allotBase_;
    /// <summary>
    ///配股(eg.10送2, 配股价为6.3元, Base为10, Ert为2, Price为6.3)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllotBase {
      get { return allotBase_; }
      set {
        allotBase_ = value;
      }
    }

    /// <summary>Field number for the "allotErt" field.</summary>
    public const int AllotErtFieldNumber = 16;
    private int allotErt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllotErt {
      get { return allotErt_; }
      set {
        allotErt_ = value;
      }
    }

    /// <summary>Field number for the "allotPrice" field.</summary>
    public const int AllotPriceFieldNumber = 17;
    private double allotPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AllotPrice {
      get { return allotPrice_; }
      set {
        allotPrice_ = value;
      }
    }

    /// <summary>Field number for the "addBase" field.</summary>
    public const int AddBaseFieldNumber = 18;
    private int addBase_;
    /// <summary>
    ///增发股(eg.10送2, 增发股价为6.3元, Base为10, Ert为2, Price为6.3)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddBase {
      get { return addBase_; }
      set {
        addBase_ = value;
      }
    }

    /// <summary>Field number for the "addErt" field.</summary>
    public const int AddErtFieldNumber = 19;
    private int addErt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddErt {
      get { return addErt_; }
      set {
        addErt_ = value;
      }
    }

    /// <summary>Field number for the "addPrice" field.</summary>
    public const int AddPriceFieldNumber = 20;
    private double addPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AddPrice {
      get { return addPrice_; }
      set {
        addPrice_ = value;
      }
    }

    /// <summary>Field number for the "dividend" field.</summary>
    public const int DividendFieldNumber = 21;
    private double dividend_;
    /// <summary>
    ///现金分红(eg.每10股派现0.5元,则该字段值为0.05)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Dividend {
      get { return dividend_; }
      set {
        dividend_ = value;
      }
    }

    /// <summary>Field number for the "spDividend" field.</summary>
    public const int SpDividendFieldNumber = 22;
    private double spDividend_;
    /// <summary>
    ///特别股息(eg.每10股派特别股息0.5元,则该字段值为0.05)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpDividend {
      get { return spDividend_; }
      set {
        spDividend_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 23;
    private double timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rehab);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rehab other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (CompanyActFlag != other.CompanyActFlag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FwdFactorA, other.FwdFactorA)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FwdFactorB, other.FwdFactorB)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BwdFactorA, other.BwdFactorA)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BwdFactorB, other.BwdFactorB)) return false;
      if (SplitBase != other.SplitBase) return false;
      if (SplitErt != other.SplitErt) return false;
      if (JoinBase != other.JoinBase) return false;
      if (JoinErt != other.JoinErt) return false;
      if (BonusBase != other.BonusBase) return false;
      if (BonusErt != other.BonusErt) return false;
      if (TransferBase != other.TransferBase) return false;
      if (TransferErt != other.TransferErt) return false;
      if (AllotBase != other.AllotBase) return false;
      if (AllotErt != other.AllotErt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AllotPrice, other.AllotPrice)) return false;
      if (AddBase != other.AddBase) return false;
      if (AddErt != other.AddErt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AddPrice, other.AddPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Dividend, other.Dividend)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpDividend, other.SpDividend)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (CompanyActFlag != 0L) hash ^= CompanyActFlag.GetHashCode();
      if (FwdFactorA != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FwdFactorA);
      if (FwdFactorB != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FwdFactorB);
      if (BwdFactorA != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BwdFactorA);
      if (BwdFactorB != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BwdFactorB);
      if (SplitBase != 0) hash ^= SplitBase.GetHashCode();
      if (SplitErt != 0) hash ^= SplitErt.GetHashCode();
      if (JoinBase != 0) hash ^= JoinBase.GetHashCode();
      if (JoinErt != 0) hash ^= JoinErt.GetHashCode();
      if (BonusBase != 0) hash ^= BonusBase.GetHashCode();
      if (BonusErt != 0) hash ^= BonusErt.GetHashCode();
      if (TransferBase != 0) hash ^= TransferBase.GetHashCode();
      if (TransferErt != 0) hash ^= TransferErt.GetHashCode();
      if (AllotBase != 0) hash ^= AllotBase.GetHashCode();
      if (AllotErt != 0) hash ^= AllotErt.GetHashCode();
      if (AllotPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AllotPrice);
      if (AddBase != 0) hash ^= AddBase.GetHashCode();
      if (AddErt != 0) hash ^= AddErt.GetHashCode();
      if (AddPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AddPrice);
      if (Dividend != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Dividend);
      if (SpDividend != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpDividend);
      if (Timestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Time);
      }
      if (CompanyActFlag != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CompanyActFlag);
      }
      if (FwdFactorA != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FwdFactorA);
      }
      if (FwdFactorB != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FwdFactorB);
      }
      if (BwdFactorA != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(BwdFactorA);
      }
      if (BwdFactorB != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(BwdFactorB);
      }
      if (SplitBase != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SplitBase);
      }
      if (SplitErt != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SplitErt);
      }
      if (JoinBase != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(JoinBase);
      }
      if (JoinErt != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JoinErt);
      }
      if (BonusBase != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BonusBase);
      }
      if (BonusErt != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BonusErt);
      }
      if (TransferBase != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TransferBase);
      }
      if (TransferErt != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TransferErt);
      }
      if (AllotBase != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AllotBase);
      }
      if (AllotErt != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AllotErt);
      }
      if (AllotPrice != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(AllotPrice);
      }
      if (AddBase != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(AddBase);
      }
      if (AddErt != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(AddErt);
      }
      if (AddPrice != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(AddPrice);
      }
      if (Dividend != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Dividend);
      }
      if (SpDividend != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(SpDividend);
      }
      if (Timestamp != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (CompanyActFlag != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompanyActFlag);
      }
      if (FwdFactorA != 0D) {
        size += 1 + 8;
      }
      if (FwdFactorB != 0D) {
        size += 1 + 8;
      }
      if (BwdFactorA != 0D) {
        size += 1 + 8;
      }
      if (BwdFactorB != 0D) {
        size += 1 + 8;
      }
      if (SplitBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SplitBase);
      }
      if (SplitErt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SplitErt);
      }
      if (JoinBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinBase);
      }
      if (JoinErt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinErt);
      }
      if (BonusBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusBase);
      }
      if (BonusErt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusErt);
      }
      if (TransferBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransferBase);
      }
      if (TransferErt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransferErt);
      }
      if (AllotBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllotBase);
      }
      if (AllotErt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AllotErt);
      }
      if (AllotPrice != 0D) {
        size += 2 + 8;
      }
      if (AddBase != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AddBase);
      }
      if (AddErt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AddErt);
      }
      if (AddPrice != 0D) {
        size += 2 + 8;
      }
      if (Dividend != 0D) {
        size += 2 + 8;
      }
      if (SpDividend != 0D) {
        size += 2 + 8;
      }
      if (Timestamp != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rehab other) {
      if (other == null) {
        return;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.CompanyActFlag != 0L) {
        CompanyActFlag = other.CompanyActFlag;
      }
      if (other.FwdFactorA != 0D) {
        FwdFactorA = other.FwdFactorA;
      }
      if (other.FwdFactorB != 0D) {
        FwdFactorB = other.FwdFactorB;
      }
      if (other.BwdFactorA != 0D) {
        BwdFactorA = other.BwdFactorA;
      }
      if (other.BwdFactorB != 0D) {
        BwdFactorB = other.BwdFactorB;
      }
      if (other.SplitBase != 0) {
        SplitBase = other.SplitBase;
      }
      if (other.SplitErt != 0) {
        SplitErt = other.SplitErt;
      }
      if (other.JoinBase != 0) {
        JoinBase = other.JoinBase;
      }
      if (other.JoinErt != 0) {
        JoinErt = other.JoinErt;
      }
      if (other.BonusBase != 0) {
        BonusBase = other.BonusBase;
      }
      if (other.BonusErt != 0) {
        BonusErt = other.BonusErt;
      }
      if (other.TransferBase != 0) {
        TransferBase = other.TransferBase;
      }
      if (other.TransferErt != 0) {
        TransferErt = other.TransferErt;
      }
      if (other.AllotBase != 0) {
        AllotBase = other.AllotBase;
      }
      if (other.AllotErt != 0) {
        AllotErt = other.AllotErt;
      }
      if (other.AllotPrice != 0D) {
        AllotPrice = other.AllotPrice;
      }
      if (other.AddBase != 0) {
        AddBase = other.AddBase;
      }
      if (other.AddErt != 0) {
        AddErt = other.AddErt;
      }
      if (other.AddPrice != 0D) {
        AddPrice = other.AddPrice;
      }
      if (other.Dividend != 0D) {
        Dividend = other.Dividend;
      }
      if (other.SpDividend != 0D) {
        SpDividend = other.SpDividend;
      }
      if (other.Timestamp != 0D) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Time = input.ReadString();
            break;
          }
          case 16: {
            CompanyActFlag = input.ReadInt64();
            break;
          }
          case 25: {
            FwdFactorA = input.ReadDouble();
            break;
          }
          case 33: {
            FwdFactorB = input.ReadDouble();
            break;
          }
          case 41: {
            BwdFactorA = input.ReadDouble();
            break;
          }
          case 49: {
            BwdFactorB = input.ReadDouble();
            break;
          }
          case 56: {
            SplitBase = input.ReadInt32();
            break;
          }
          case 64: {
            SplitErt = input.ReadInt32();
            break;
          }
          case 72: {
            JoinBase = input.ReadInt32();
            break;
          }
          case 80: {
            JoinErt = input.ReadInt32();
            break;
          }
          case 88: {
            BonusBase = input.ReadInt32();
            break;
          }
          case 96: {
            BonusErt = input.ReadInt32();
            break;
          }
          case 104: {
            TransferBase = input.ReadInt32();
            break;
          }
          case 112: {
            TransferErt = input.ReadInt32();
            break;
          }
          case 120: {
            AllotBase = input.ReadInt32();
            break;
          }
          case 128: {
            AllotErt = input.ReadInt32();
            break;
          }
          case 137: {
            AllotPrice = input.ReadDouble();
            break;
          }
          case 144: {
            AddBase = input.ReadInt32();
            break;
          }
          case 152: {
            AddErt = input.ReadInt32();
            break;
          }
          case 161: {
            AddPrice = input.ReadDouble();
            break;
          }
          case 169: {
            Dividend = input.ReadDouble();
            break;
          }
          case 177: {
            SpDividend = input.ReadDouble();
            break;
          }
          case 185: {
            Timestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
