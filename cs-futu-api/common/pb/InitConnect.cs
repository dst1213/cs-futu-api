// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: InitConnect.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InitConnect {

  /// <summary>Holder for reflection information generated from InitConnect.proto</summary>
  public static partial class InitConnectReflection {

    #region Descriptor
    /// <summary>File descriptor for InitConnect.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InitConnectReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFJbml0Q29ubmVjdC5wcm90bxILSW5pdENvbm5lY3QaDENvbW1vbi5wcm90",
            "byJVCgNDMlMSEQoJY2xpZW50VmVyGAEgASgFEhAKCGNsaWVudElEGAIgASgJ",
            "EhIKCnJlY3ZOb3RpZnkYAyABKAgSFQoNcGFja2V0RW5jQWxnbxgEIAEoBSJs",
            "CgNTMkMSEQoJc2VydmVyVmVyGAEgASgFEhMKC2xvZ2luVXNlcklEGAIgASgE",
            "Eg4KBmNvbm5JRBgDIAEoBBISCgpjb25uQUVTS2V5GAQgASgJEhkKEWtlZXBB",
            "bGl2ZUludGVydmFsGAUgASgFIigKB1JlcXVlc3QSHQoDYzJzGAEgASgLMhAu",
            "SW5pdENvbm5lY3QuQzJTIlsKCFJlc3BvbnNlEg8KB3JldFR5cGUYASABKAUS",
            "DgoGcmV0TXNnGAIgASgJEg8KB2VyckNvZGUYAyABKAUSHQoDczJjGAQgASgL",
            "MhAuSW5pdENvbm5lY3QuUzJDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InitConnect.C2S), global::InitConnect.C2S.Parser, new[]{ "ClientVer", "ClientID", "RecvNotify", "PacketEncAlgo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InitConnect.S2C), global::InitConnect.S2C.Parser, new[]{ "ServerVer", "LoginUserID", "ConnID", "ConnAESKey", "KeepAliveInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InitConnect.Request), global::InitConnect.Request.Parser, new[]{ "C2S" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InitConnect.Response), global::InitConnect.Response.Parser, new[]{ "RetType", "RetMsg", "ErrCode", "S2C" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class C2S : pb::IMessage<C2S> {
    private static readonly pb::MessageParser<C2S> _parser = new pb::MessageParser<C2S>(() => new C2S());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InitConnect.InitConnectReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S(C2S other) : this() {
      clientVer_ = other.clientVer_;
      clientID_ = other.clientID_;
      recvNotify_ = other.recvNotify_;
      packetEncAlgo_ = other.packetEncAlgo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S Clone() {
      return new C2S(this);
    }

    /// <summary>Field number for the "clientVer" field.</summary>
    public const int ClientVerFieldNumber = 1;
    private int clientVer_;
    /// <summary>
    ///客户端版本号，clientVer = "."以前的数 * 100 + "."以后的，举例：1.1版本的clientVer为1 * 100 + 1 = 101，2.21版本为2 * 100 + 21 = 221
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientVer {
      get { return clientVer_; }
      set {
        clientVer_ = value;
      }
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 2;
    private string clientID_ = "";
    /// <summary>
    ///客户端唯一标识，无生具体生成规则，客户端自己保证唯一性即可
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientID {
      get { return clientID_; }
      set {
        clientID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recvNotify" field.</summary>
    public const int RecvNotifyFieldNumber = 3;
    private bool recvNotify_;
    /// <summary>
    ///此连接是否接收市场状态、交易需要重新解锁等等事件通知，true代表接收，FutuOpenD就会向此连接推送这些通知，反之false代表不接收不推送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecvNotify {
      get { return recvNotify_; }
      set {
        recvNotify_ = value;
      }
    }

    /// <summary>Field number for the "packetEncAlgo" field.</summary>
    public const int PacketEncAlgoFieldNumber = 4;
    private int packetEncAlgo_;
    /// <summary>
    ///如果通信要加密，首先得在FutuOpenD和客户端都配置RSA密钥，不配置始终不加密
    ///如果配置了RSA密钥且指定的加密算法不为PacketEncAlgo_None则加密(即便这里不设置，配置了RSA密钥，也会采用默认加密方式)，默认采用FTAES_ECB算法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PacketEncAlgo {
      get { return packetEncAlgo_; }
      set {
        packetEncAlgo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVer != other.ClientVer) return false;
      if (ClientID != other.ClientID) return false;
      if (RecvNotify != other.RecvNotify) return false;
      if (PacketEncAlgo != other.PacketEncAlgo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVer != 0) hash ^= ClientVer.GetHashCode();
      if (ClientID.Length != 0) hash ^= ClientID.GetHashCode();
      if (RecvNotify != false) hash ^= RecvNotify.GetHashCode();
      if (PacketEncAlgo != 0) hash ^= PacketEncAlgo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVer != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientVer);
      }
      if (ClientID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientID);
      }
      if (RecvNotify != false) {
        output.WriteRawTag(24);
        output.WriteBool(RecvNotify);
      }
      if (PacketEncAlgo != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PacketEncAlgo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientVer);
      }
      if (ClientID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientID);
      }
      if (RecvNotify != false) {
        size += 1 + 1;
      }
      if (PacketEncAlgo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketEncAlgo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S other) {
      if (other == null) {
        return;
      }
      if (other.ClientVer != 0) {
        ClientVer = other.ClientVer;
      }
      if (other.ClientID.Length != 0) {
        ClientID = other.ClientID;
      }
      if (other.RecvNotify != false) {
        RecvNotify = other.RecvNotify;
      }
      if (other.PacketEncAlgo != 0) {
        PacketEncAlgo = other.PacketEncAlgo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientVer = input.ReadInt32();
            break;
          }
          case 18: {
            ClientID = input.ReadString();
            break;
          }
          case 24: {
            RecvNotify = input.ReadBool();
            break;
          }
          case 32: {
            PacketEncAlgo = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C : pb::IMessage<S2C> {
    private static readonly pb::MessageParser<S2C> _parser = new pb::MessageParser<S2C>(() => new S2C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InitConnect.InitConnectReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C(S2C other) : this() {
      serverVer_ = other.serverVer_;
      loginUserID_ = other.loginUserID_;
      connID_ = other.connID_;
      connAESKey_ = other.connAESKey_;
      keepAliveInterval_ = other.keepAliveInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C Clone() {
      return new S2C(this);
    }

    /// <summary>Field number for the "serverVer" field.</summary>
    public const int ServerVerFieldNumber = 1;
    private int serverVer_;
    /// <summary>
    ///FutuOpenD的版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerVer {
      get { return serverVer_; }
      set {
        serverVer_ = value;
      }
    }

    /// <summary>Field number for the "loginUserID" field.</summary>
    public const int LoginUserIDFieldNumber = 2;
    private ulong loginUserID_;
    /// <summary>
    ///FutuOpenD登陆的牛牛用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LoginUserID {
      get { return loginUserID_; }
      set {
        loginUserID_ = value;
      }
    }

    /// <summary>Field number for the "connID" field.</summary>
    public const int ConnIDFieldNumber = 3;
    private ulong connID_;
    /// <summary>
    ///此连接的连接ID，连接的唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConnID {
      get { return connID_; }
      set {
        connID_ = value;
      }
    }

    /// <summary>Field number for the "connAESKey" field.</summary>
    public const int ConnAESKeyFieldNumber = 4;
    private string connAESKey_ = "";
    /// <summary>
    ///此连接后续AES加密通信的Key，固定为16字节长字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnAESKey {
      get { return connAESKey_; }
      set {
        connAESKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keepAliveInterval" field.</summary>
    public const int KeepAliveIntervalFieldNumber = 5;
    private int keepAliveInterval_;
    /// <summary>
    ///心跳保活间隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepAliveInterval {
      get { return keepAliveInterval_; }
      set {
        keepAliveInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerVer != other.ServerVer) return false;
      if (LoginUserID != other.LoginUserID) return false;
      if (ConnID != other.ConnID) return false;
      if (ConnAESKey != other.ConnAESKey) return false;
      if (KeepAliveInterval != other.KeepAliveInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerVer != 0) hash ^= ServerVer.GetHashCode();
      if (LoginUserID != 0UL) hash ^= LoginUserID.GetHashCode();
      if (ConnID != 0UL) hash ^= ConnID.GetHashCode();
      if (ConnAESKey.Length != 0) hash ^= ConnAESKey.GetHashCode();
      if (KeepAliveInterval != 0) hash ^= KeepAliveInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerVer != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerVer);
      }
      if (LoginUserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LoginUserID);
      }
      if (ConnID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ConnID);
      }
      if (ConnAESKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ConnAESKey);
      }
      if (KeepAliveInterval != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(KeepAliveInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerVer);
      }
      if (LoginUserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LoginUserID);
      }
      if (ConnID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConnID);
      }
      if (ConnAESKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnAESKey);
      }
      if (KeepAliveInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepAliveInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C other) {
      if (other == null) {
        return;
      }
      if (other.ServerVer != 0) {
        ServerVer = other.ServerVer;
      }
      if (other.LoginUserID != 0UL) {
        LoginUserID = other.LoginUserID;
      }
      if (other.ConnID != 0UL) {
        ConnID = other.ConnID;
      }
      if (other.ConnAESKey.Length != 0) {
        ConnAESKey = other.ConnAESKey;
      }
      if (other.KeepAliveInterval != 0) {
        KeepAliveInterval = other.KeepAliveInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerVer = input.ReadInt32();
            break;
          }
          case 16: {
            LoginUserID = input.ReadUInt64();
            break;
          }
          case 24: {
            ConnID = input.ReadUInt64();
            break;
          }
          case 34: {
            ConnAESKey = input.ReadString();
            break;
          }
          case 40: {
            KeepAliveInterval = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InitConnect.InitConnectReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      c2S_ = other.c2S_ != null ? other.c2S_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "c2s" field.</summary>
    public const int C2SFieldNumber = 1;
    private global::InitConnect.C2S c2S_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InitConnect.C2S C2S {
      get { return c2S_; }
      set {
        c2S_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(C2S, other.C2S)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (c2S_ != null) hash ^= C2S.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (c2S_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(C2S);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (c2S_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(C2S);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.c2S_ != null) {
        if (c2S_ == null) {
          C2S = new global::InitConnect.C2S();
        }
        C2S.MergeFrom(other.C2S);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (c2S_ == null) {
              C2S = new global::InitConnect.C2S();
            }
            input.ReadMessage(C2S);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InitConnect.InitConnectReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      retType_ = other.retType_;
      retMsg_ = other.retMsg_;
      errCode_ = other.errCode_;
      s2C_ = other.s2C_ != null ? other.s2C_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "retType" field.</summary>
    public const int RetTypeFieldNumber = 1;
    private int retType_;
    /// <summary>
    ///返回结果，参见Common.RetType的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetType {
      get { return retType_; }
      set {
        retType_ = value;
      }
    }

    /// <summary>Field number for the "retMsg" field.</summary>
    public const int RetMsgFieldNumber = 2;
    private string retMsg_ = "";
    /// <summary>
    ///返回结果描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RetMsg {
      get { return retMsg_; }
      set {
        retMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 3;
    private int errCode_;
    /// <summary>
    ///错误码，客户端一般通过retType和retMsg来判断结果和详情，errCode只做日志记录，仅在个别协议失败时对账用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "s2c" field.</summary>
    public const int S2CFieldNumber = 4;
    private global::InitConnect.S2C s2C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InitConnect.S2C S2C {
      get { return s2C_; }
      set {
        s2C_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetType != other.RetType) return false;
      if (RetMsg != other.RetMsg) return false;
      if (ErrCode != other.ErrCode) return false;
      if (!object.Equals(S2C, other.S2C)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RetType != 0) hash ^= RetType.GetHashCode();
      if (RetMsg.Length != 0) hash ^= RetMsg.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (s2C_ != null) hash ^= S2C.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetType);
      }
      if (RetMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RetMsg);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ErrCode);
      }
      if (s2C_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(S2C);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetType);
      }
      if (RetMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RetMsg);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (s2C_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(S2C);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.RetType != 0) {
        RetType = other.RetType;
      }
      if (other.RetMsg.Length != 0) {
        RetMsg = other.RetMsg;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.s2C_ != null) {
        if (s2C_ == null) {
          S2C = new global::InitConnect.S2C();
        }
        S2C.MergeFrom(other.S2C);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetType = input.ReadInt32();
            break;
          }
          case 18: {
            RetMsg = input.ReadString();
            break;
          }
          case 24: {
            ErrCode = input.ReadInt32();
            break;
          }
          case 34: {
            if (s2C_ == null) {
              S2C = new global::InitConnect.S2C();
            }
            input.ReadMessage(S2C);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
