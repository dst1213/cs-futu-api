// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Qot_GetSecuritySnapshot.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QotGetSecuritySnapshot {

  /// <summary>Holder for reflection information generated from Qot_GetSecuritySnapshot.proto</summary>
  public static partial class QotGetSecuritySnapshotReflection {

    #region Descriptor
    /// <summary>File descriptor for Qot_GetSecuritySnapshot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QotGetSecuritySnapshotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Rb3RfR2V0U2VjdXJpdHlTbmFwc2hvdC5wcm90bxIXUW90X0dldFNlY3Vy",
            "aXR5U25hcHNob3QaDENvbW1vbi5wcm90bxoQUW90X0NvbW1vbi5wcm90byIx",
            "CgNDMlMSKgoMc2VjdXJpdHlMaXN0GAEgAygLMhQuUW90X0NvbW1vbi5TZWN1",
            "cml0eSKaAgoURXF1aXR5U25hcHNob3RFeERhdGESFAoMaXNzdWVkU2hhcmVz",
            "GAEgASgDEhcKD2lzc3VlZE1hcmtldFZhbBgCIAEoARIQCghuZXRBc3NldBgD",
            "IAEoARIRCgluZXRQcm9maXQYBCABKAESGAoQZWFybmluZ3NQZXJzaGFyZRgF",
            "IAEoARIZChFvdXRzdGFuZGluZ1NoYXJlcxgGIAEoAxIcChRvdXRzdGFuZGlu",
            "Z01hcmtldFZhbBgHIAEoARIYChBuZXRBc3NldFBlcnNoYXJlGAggASgBEg4K",
            "BmV5UmF0ZRgJIAEoARIOCgZwZVJhdGUYCiABKAESDgoGcGJSYXRlGAsgASgB",
            "EhEKCXBlVFRNUmF0ZRgMIAEoASLxAgoVV2FycmFudFNuYXBzaG90RXhEYXRh",
            "EhYKDmNvbnZlcnNpb25SYXRlGAEgASgBEhMKC3dhcnJhbnRUeXBlGAIgASgF",
            "EhMKC3N0cmlrZVByaWNlGAMgASgBEhQKDG1hdHVyaXR5VGltZRgEIAEoCRIU",
            "CgxlbmRUcmFkZVRpbWUYBSABKAkSIwoFb3duZXIYBiABKAsyFC5Rb3RfQ29t",
            "bW9uLlNlY3VyaXR5EhUKDXJlY292ZXJ5UHJpY2UYByABKAESFAoMc3RyZWV0",
            "Vm9sdW1uGAggASgDEhMKC2lzc3VlVm9sdW1uGAkgASgDEhIKCnN0cmVldFJh",
            "dGUYCiABKAESDQoFZGVsdGEYCyABKAESGQoRaW1wbGllZFZvbGF0aWxpdHkY",
            "DCABKAESDwoHcHJlbWl1bRgNIAEoARIZChFtYXR1cml0eVRpbWVzdGFtcBgO",
            "IAEoARIZChFlbmRUcmFkZVRpbWVzdGFtcBgPIAEoASKrAgoUT3B0aW9uU25h",
            "cHNob3RFeERhdGESDAoEdHlwZRgBIAEoBRIjCgVvd25lchgCIAEoCzIULlFv",
            "dF9Db21tb24uU2VjdXJpdHkSEgoKc3RyaWtlVGltZRgDIAEoCRITCgtzdHJp",
            "a2VQcmljZRgEIAEoARIUCgxjb250cmFjdFNpemUYBSABKAUSFAoMb3Blbklu",
            "dGVyZXN0GAYgASgFEhkKEWltcGxpZWRWb2xhdGlsaXR5GAcgASgBEg8KB3By",
            "ZW1pdW0YCCABKAESDQoFZGVsdGEYCSABKAESDQoFZ2FtbWEYCiABKAESDAoE",
            "dmVnYRgLIAEoARINCgV0aGV0YRgMIAEoARILCgNyaG8YDSABKAESFwoPc3Ry",
            "aWtlVGltZXN0YW1wGA4gASgBIvIEChFTbmFwc2hvdEJhc2ljRGF0YRImCghz",
            "ZWN1cml0eRgBIAEoCzIULlFvdF9Db21tb24uU2VjdXJpdHkSDAoEdHlwZRgC",
            "IAEoBRIRCglpc1N1c3BlbmQYAyABKAgSEAoIbGlzdFRpbWUYBCABKAkSDwoH",
            "bG90U2l6ZRgFIAEoBRITCgtwcmljZVNwcmVhZBgGIAEoARISCgp1cGRhdGVU",
            "aW1lGAcgASgJEhEKCWhpZ2hQcmljZRgIIAEoARIRCglvcGVuUHJpY2UYCSAB",
            "KAESEAoIbG93UHJpY2UYCiABKAESFgoObGFzdENsb3NlUHJpY2UYCyABKAES",
            "EAoIY3VyUHJpY2UYDCABKAESDgoGdm9sdW1lGA0gASgDEhAKCHR1cm5vdmVy",
            "GA4gASgBEhQKDHR1cm5vdmVyUmF0ZRgPIAEoARIVCg1saXN0VGltZXN0YW1w",
            "GBAgASgBEhcKD3VwZGF0ZVRpbWVzdGFtcBgRIAEoARIQCghhc2tQcmljZRgS",
            "IAEoARIQCghiaWRQcmljZRgTIAEoARIOCgZhc2tWb2wYFCABKAMSDgoGYmlk",
            "Vm9sGBUgASgDEhQKDGVuYWJsZU1hcmdpbhgWIAEoCBIVCg1tb3J0Z2FnZVJh",
            "dGlvGBcgASgBEh4KFmxvbmdNYXJnaW5Jbml0aWFsUmF0aW8YGCABKAESFwoP",
            "ZW5hYmxlU2hvcnRTZWxsGBkgASgIEhUKDXNob3J0U2VsbFJhdGUYGiABKAES",
            "HAoUc2hvcnRBdmFpbGFibGVWb2x1bWUYGyABKAMSHwoXc2hvcnRNYXJnaW5J",
            "bml0aWFsUmF0aW8YHCABKAEilgIKCFNuYXBzaG90EjkKBWJhc2ljGAEgASgL",
            "MiouUW90X0dldFNlY3VyaXR5U25hcHNob3QuU25hcHNob3RCYXNpY0RhdGES",
            "QwoMZXF1aXR5RXhEYXRhGAIgASgLMi0uUW90X0dldFNlY3VyaXR5U25hcHNo",
            "b3QuRXF1aXR5U25hcHNob3RFeERhdGESRQoNd2FycmFudEV4RGF0YRgDIAEo",
            "CzIuLlFvdF9HZXRTZWN1cml0eVNuYXBzaG90LldhcnJhbnRTbmFwc2hvdEV4",
            "RGF0YRJDCgxvcHRpb25FeERhdGEYBCABKAsyLS5Rb3RfR2V0U2VjdXJpdHlT",
            "bmFwc2hvdC5PcHRpb25TbmFwc2hvdEV4RGF0YSI+CgNTMkMSNwoMc25hcHNo",
            "b3RMaXN0GAEgAygLMiEuUW90X0dldFNlY3VyaXR5U25hcHNob3QuU25hcHNo",
            "b3QiNAoHUmVxdWVzdBIpCgNjMnMYASABKAsyHC5Rb3RfR2V0U2VjdXJpdHlT",
            "bmFwc2hvdC5DMlMiZwoIUmVzcG9uc2USDwoHcmV0VHlwZRgBIAEoBRIOCgZy",
            "ZXRNc2cYAiABKAkSDwoHZXJyQ29kZRgDIAEoBRIpCgNzMmMYBCABKAsyHC5R",
            "b3RfR2V0U2VjdXJpdHlTbmFwc2hvdC5TMkNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonReflection.Descriptor, global::QotCommon.QotCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetSecuritySnapshot.C2S), global::QotGetSecuritySnapshot.C2S.Parser, new[]{ "SecurityList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetSecuritySnapshot.EquitySnapshotExData), global::QotGetSecuritySnapshot.EquitySnapshotExData.Parser, new[]{ "IssuedShares", "IssuedMarketVal", "NetAsset", "NetProfit", "EarningsPershare", "OutstandingShares", "OutstandingMarketVal", "NetAssetPershare", "EyRate", "PeRate", "PbRate", "PeTTMRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetSecuritySnapshot.WarrantSnapshotExData), global::QotGetSecuritySnapshot.WarrantSnapshotExData.Parser, new[]{ "ConversionRate", "WarrantType", "StrikePrice", "MaturityTime", "EndTradeTime", "Owner", "RecoveryPrice", "StreetVolumn", "IssueVolumn", "StreetRate", "Delta", "ImpliedVolatility", "Premium", "MaturityTimestamp", "EndTradeTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetSecuritySnapshot.OptionSnapshotExData), global::QotGetSecuritySnapshot.OptionSnapshotExData.Parser, new[]{ "Type", "Owner", "StrikeTime", "StrikePrice", "ContractSize", "OpenInterest", "ImpliedVolatility", "Premium", "Delta", "Gamma", "Vega", "Theta", "Rho", "StrikeTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetSecuritySnapshot.SnapshotBasicData), global::QotGetSecuritySnapshot.SnapshotBasicData.Parser, new[]{ "Security", "Type", "IsSuspend", "ListTime", "LotSize", "PriceSpread", "UpdateTime", "HighPrice", "OpenPrice", "LowPrice", "LastClosePrice", "CurPrice", "Volume", "Turnover", "TurnoverRate", "ListTimestamp", "UpdateTimestamp", "AskPrice", "BidPrice", "AskVol", "BidVol", "EnableMargin", "MortgageRatio", "LongMarginInitialRatio", "EnableShortSell", "ShortSellRate", "ShortAvailableVolume", "ShortMarginInitialRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetSecuritySnapshot.Snapshot), global::QotGetSecuritySnapshot.Snapshot.Parser, new[]{ "Basic", "EquityExData", "WarrantExData", "OptionExData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetSecuritySnapshot.S2C), global::QotGetSecuritySnapshot.S2C.Parser, new[]{ "SnapshotList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetSecuritySnapshot.Request), global::QotGetSecuritySnapshot.Request.Parser, new[]{ "C2S" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetSecuritySnapshot.Response), global::QotGetSecuritySnapshot.Response.Parser, new[]{ "RetType", "RetMsg", "ErrCode", "S2C" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class C2S : pb::IMessage<C2S> {
    private static readonly pb::MessageParser<C2S> _parser = new pb::MessageParser<C2S>(() => new C2S());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetSecuritySnapshot.QotGetSecuritySnapshotReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S(C2S other) : this() {
      securityList_ = other.securityList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S Clone() {
      return new C2S(this);
    }

    /// <summary>Field number for the "securityList" field.</summary>
    public const int SecurityListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::QotCommon.Security> _repeated_securityList_codec
        = pb::FieldCodec.ForMessage(10, global::QotCommon.Security.Parser);
    private readonly pbc::RepeatedField<global::QotCommon.Security> securityList_ = new pbc::RepeatedField<global::QotCommon.Security>();
    /// <summary>
    ///股票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::QotCommon.Security> SecurityList {
      get { return securityList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!securityList_.Equals(other.securityList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= securityList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      securityList_.WriteTo(output, _repeated_securityList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += securityList_.CalculateSize(_repeated_securityList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S other) {
      if (other == null) {
        return;
      }
      securityList_.Add(other.securityList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            securityList_.AddEntriesFrom(input, _repeated_securityList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 正股类型额外数据
  /// </summary>
  public sealed partial class EquitySnapshotExData : pb::IMessage<EquitySnapshotExData> {
    private static readonly pb::MessageParser<EquitySnapshotExData> _parser = new pb::MessageParser<EquitySnapshotExData>(() => new EquitySnapshotExData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquitySnapshotExData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetSecuritySnapshot.QotGetSecuritySnapshotReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquitySnapshotExData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquitySnapshotExData(EquitySnapshotExData other) : this() {
      issuedShares_ = other.issuedShares_;
      issuedMarketVal_ = other.issuedMarketVal_;
      netAsset_ = other.netAsset_;
      netProfit_ = other.netProfit_;
      earningsPershare_ = other.earningsPershare_;
      outstandingShares_ = other.outstandingShares_;
      outstandingMarketVal_ = other.outstandingMarketVal_;
      netAssetPershare_ = other.netAssetPershare_;
      eyRate_ = other.eyRate_;
      peRate_ = other.peRate_;
      pbRate_ = other.pbRate_;
      peTTMRate_ = other.peTTMRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquitySnapshotExData Clone() {
      return new EquitySnapshotExData(this);
    }

    /// <summary>Field number for the "issuedShares" field.</summary>
    public const int IssuedSharesFieldNumber = 1;
    private long issuedShares_;
    /// <summary>
    /// 发行股本,即总股本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IssuedShares {
      get { return issuedShares_; }
      set {
        issuedShares_ = value;
      }
    }

    /// <summary>Field number for the "issuedMarketVal" field.</summary>
    public const int IssuedMarketValFieldNumber = 2;
    private double issuedMarketVal_;
    /// <summary>
    /// 总市值 =总股本*当前价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IssuedMarketVal {
      get { return issuedMarketVal_; }
      set {
        issuedMarketVal_ = value;
      }
    }

    /// <summary>Field number for the "netAsset" field.</summary>
    public const int NetAssetFieldNumber = 3;
    private double netAsset_;
    /// <summary>
    /// 资产净值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NetAsset {
      get { return netAsset_; }
      set {
        netAsset_ = value;
      }
    }

    /// <summary>Field number for the "netProfit" field.</summary>
    public const int NetProfitFieldNumber = 4;
    private double netProfit_;
    /// <summary>
    /// 盈利（亏损）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NetProfit {
      get { return netProfit_; }
      set {
        netProfit_ = value;
      }
    }

    /// <summary>Field number for the "earningsPershare" field.</summary>
    public const int EarningsPershareFieldNumber = 5;
    private double earningsPershare_;
    /// <summary>
    /// 每股盈利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EarningsPershare {
      get { return earningsPershare_; }
      set {
        earningsPershare_ = value;
      }
    }

    /// <summary>Field number for the "outstandingShares" field.</summary>
    public const int OutstandingSharesFieldNumber = 6;
    private long outstandingShares_;
    /// <summary>
    /// 流通股本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OutstandingShares {
      get { return outstandingShares_; }
      set {
        outstandingShares_ = value;
      }
    }

    /// <summary>Field number for the "outstandingMarketVal" field.</summary>
    public const int OutstandingMarketValFieldNumber = 7;
    private double outstandingMarketVal_;
    /// <summary>
    /// 流通市值 =流通股本*当前价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OutstandingMarketVal {
      get { return outstandingMarketVal_; }
      set {
        outstandingMarketVal_ = value;
      }
    }

    /// <summary>Field number for the "netAssetPershare" field.</summary>
    public const int NetAssetPershareFieldNumber = 8;
    private double netAssetPershare_;
    /// <summary>
    /// 每股净资产
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NetAssetPershare {
      get { return netAssetPershare_; }
      set {
        netAssetPershare_ = value;
      }
    }

    /// <summary>Field number for the "eyRate" field.</summary>
    public const int EyRateFieldNumber = 9;
    private double eyRate_;
    /// <summary>
    /// 收益率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EyRate {
      get { return eyRate_; }
      set {
        eyRate_ = value;
      }
    }

    /// <summary>Field number for the "peRate" field.</summary>
    public const int PeRateFieldNumber = 10;
    private double peRate_;
    /// <summary>
    /// 市盈率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PeRate {
      get { return peRate_; }
      set {
        peRate_ = value;
      }
    }

    /// <summary>Field number for the "pbRate" field.</summary>
    public const int PbRateFieldNumber = 11;
    private double pbRate_;
    /// <summary>
    /// 市净率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PbRate {
      get { return pbRate_; }
      set {
        pbRate_ = value;
      }
    }

    /// <summary>Field number for the "peTTMRate" field.</summary>
    public const int PeTTMRateFieldNumber = 12;
    private double peTTMRate_;
    /// <summary>
    /// 市盈率TTM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PeTTMRate {
      get { return peTTMRate_; }
      set {
        peTTMRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquitySnapshotExData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquitySnapshotExData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IssuedShares != other.IssuedShares) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IssuedMarketVal, other.IssuedMarketVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NetAsset, other.NetAsset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NetProfit, other.NetProfit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EarningsPershare, other.EarningsPershare)) return false;
      if (OutstandingShares != other.OutstandingShares) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OutstandingMarketVal, other.OutstandingMarketVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NetAssetPershare, other.NetAssetPershare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EyRate, other.EyRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PeRate, other.PeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PbRate, other.PbRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PeTTMRate, other.PeTTMRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IssuedShares != 0L) hash ^= IssuedShares.GetHashCode();
      if (IssuedMarketVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IssuedMarketVal);
      if (NetAsset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NetAsset);
      if (NetProfit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NetProfit);
      if (EarningsPershare != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EarningsPershare);
      if (OutstandingShares != 0L) hash ^= OutstandingShares.GetHashCode();
      if (OutstandingMarketVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OutstandingMarketVal);
      if (NetAssetPershare != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NetAssetPershare);
      if (EyRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EyRate);
      if (PeRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PeRate);
      if (PbRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PbRate);
      if (PeTTMRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PeTTMRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IssuedShares != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(IssuedShares);
      }
      if (IssuedMarketVal != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(IssuedMarketVal);
      }
      if (NetAsset != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(NetAsset);
      }
      if (NetProfit != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(NetProfit);
      }
      if (EarningsPershare != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(EarningsPershare);
      }
      if (OutstandingShares != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(OutstandingShares);
      }
      if (OutstandingMarketVal != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(OutstandingMarketVal);
      }
      if (NetAssetPershare != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(NetAssetPershare);
      }
      if (EyRate != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(EyRate);
      }
      if (PeRate != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(PeRate);
      }
      if (PbRate != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(PbRate);
      }
      if (PeTTMRate != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(PeTTMRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IssuedShares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IssuedShares);
      }
      if (IssuedMarketVal != 0D) {
        size += 1 + 8;
      }
      if (NetAsset != 0D) {
        size += 1 + 8;
      }
      if (NetProfit != 0D) {
        size += 1 + 8;
      }
      if (EarningsPershare != 0D) {
        size += 1 + 8;
      }
      if (OutstandingShares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OutstandingShares);
      }
      if (OutstandingMarketVal != 0D) {
        size += 1 + 8;
      }
      if (NetAssetPershare != 0D) {
        size += 1 + 8;
      }
      if (EyRate != 0D) {
        size += 1 + 8;
      }
      if (PeRate != 0D) {
        size += 1 + 8;
      }
      if (PbRate != 0D) {
        size += 1 + 8;
      }
      if (PeTTMRate != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquitySnapshotExData other) {
      if (other == null) {
        return;
      }
      if (other.IssuedShares != 0L) {
        IssuedShares = other.IssuedShares;
      }
      if (other.IssuedMarketVal != 0D) {
        IssuedMarketVal = other.IssuedMarketVal;
      }
      if (other.NetAsset != 0D) {
        NetAsset = other.NetAsset;
      }
      if (other.NetProfit != 0D) {
        NetProfit = other.NetProfit;
      }
      if (other.EarningsPershare != 0D) {
        EarningsPershare = other.EarningsPershare;
      }
      if (other.OutstandingShares != 0L) {
        OutstandingShares = other.OutstandingShares;
      }
      if (other.OutstandingMarketVal != 0D) {
        OutstandingMarketVal = other.OutstandingMarketVal;
      }
      if (other.NetAssetPershare != 0D) {
        NetAssetPershare = other.NetAssetPershare;
      }
      if (other.EyRate != 0D) {
        EyRate = other.EyRate;
      }
      if (other.PeRate != 0D) {
        PeRate = other.PeRate;
      }
      if (other.PbRate != 0D) {
        PbRate = other.PbRate;
      }
      if (other.PeTTMRate != 0D) {
        PeTTMRate = other.PeTTMRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IssuedShares = input.ReadInt64();
            break;
          }
          case 17: {
            IssuedMarketVal = input.ReadDouble();
            break;
          }
          case 25: {
            NetAsset = input.ReadDouble();
            break;
          }
          case 33: {
            NetProfit = input.ReadDouble();
            break;
          }
          case 41: {
            EarningsPershare = input.ReadDouble();
            break;
          }
          case 48: {
            OutstandingShares = input.ReadInt64();
            break;
          }
          case 57: {
            OutstandingMarketVal = input.ReadDouble();
            break;
          }
          case 65: {
            NetAssetPershare = input.ReadDouble();
            break;
          }
          case 73: {
            EyRate = input.ReadDouble();
            break;
          }
          case 81: {
            PeRate = input.ReadDouble();
            break;
          }
          case 89: {
            PbRate = input.ReadDouble();
            break;
          }
          case 97: {
            PeTTMRate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 涡轮类型额外数据
  /// </summary>
  public sealed partial class WarrantSnapshotExData : pb::IMessage<WarrantSnapshotExData> {
    private static readonly pb::MessageParser<WarrantSnapshotExData> _parser = new pb::MessageParser<WarrantSnapshotExData>(() => new WarrantSnapshotExData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarrantSnapshotExData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetSecuritySnapshot.QotGetSecuritySnapshotReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarrantSnapshotExData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarrantSnapshotExData(WarrantSnapshotExData other) : this() {
      conversionRate_ = other.conversionRate_;
      warrantType_ = other.warrantType_;
      strikePrice_ = other.strikePrice_;
      maturityTime_ = other.maturityTime_;
      endTradeTime_ = other.endTradeTime_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      recoveryPrice_ = other.recoveryPrice_;
      streetVolumn_ = other.streetVolumn_;
      issueVolumn_ = other.issueVolumn_;
      streetRate_ = other.streetRate_;
      delta_ = other.delta_;
      impliedVolatility_ = other.impliedVolatility_;
      premium_ = other.premium_;
      maturityTimestamp_ = other.maturityTimestamp_;
      endTradeTimestamp_ = other.endTradeTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarrantSnapshotExData Clone() {
      return new WarrantSnapshotExData(this);
    }

    /// <summary>Field number for the "conversionRate" field.</summary>
    public const int ConversionRateFieldNumber = 1;
    private double conversionRate_;
    /// <summary>
    ///换股比率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConversionRate {
      get { return conversionRate_; }
      set {
        conversionRate_ = value;
      }
    }

    /// <summary>Field number for the "warrantType" field.</summary>
    public const int WarrantTypeFieldNumber = 2;
    private int warrantType_;
    /// <summary>
    ///Qot_Common.WarrantType,涡轮类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarrantType {
      get { return warrantType_; }
      set {
        warrantType_ = value;
      }
    }

    /// <summary>Field number for the "strikePrice" field.</summary>
    public const int StrikePriceFieldNumber = 3;
    private double strikePrice_;
    /// <summary>
    ///行使价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikePrice {
      get { return strikePrice_; }
      set {
        strikePrice_ = value;
      }
    }

    /// <summary>Field number for the "maturityTime" field.</summary>
    public const int MaturityTimeFieldNumber = 4;
    private string maturityTime_ = "";
    /// <summary>
    ///到期日时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaturityTime {
      get { return maturityTime_; }
      set {
        maturityTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTradeTime" field.</summary>
    public const int EndTradeTimeFieldNumber = 5;
    private string endTradeTime_ = "";
    /// <summary>
    ///最后交易日时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTradeTime {
      get { return endTradeTime_; }
      set {
        endTradeTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 6;
    private global::QotCommon.Security owner_;
    /// <summary>
    ///所属正股 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "recoveryPrice" field.</summary>
    public const int RecoveryPriceFieldNumber = 7;
    private double recoveryPrice_;
    /// <summary>
    ///收回价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RecoveryPrice {
      get { return recoveryPrice_; }
      set {
        recoveryPrice_ = value;
      }
    }

    /// <summary>Field number for the "streetVolumn" field.</summary>
    public const int StreetVolumnFieldNumber = 8;
    private long streetVolumn_;
    /// <summary>
    ///街货量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StreetVolumn {
      get { return streetVolumn_; }
      set {
        streetVolumn_ = value;
      }
    }

    /// <summary>Field number for the "issueVolumn" field.</summary>
    public const int IssueVolumnFieldNumber = 9;
    private long issueVolumn_;
    /// <summary>
    ///发行量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IssueVolumn {
      get { return issueVolumn_; }
      set {
        issueVolumn_ = value;
      }
    }

    /// <summary>Field number for the "streetRate" field.</summary>
    public const int StreetRateFieldNumber = 10;
    private double streetRate_;
    /// <summary>
    ///街货占比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StreetRate {
      get { return streetRate_; }
      set {
        streetRate_ = value;
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 11;
    private double delta_;
    /// <summary>
    ///对冲值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "impliedVolatility" field.</summary>
    public const int ImpliedVolatilityFieldNumber = 12;
    private double impliedVolatility_;
    /// <summary>
    ///引申波幅
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ImpliedVolatility {
      get { return impliedVolatility_; }
      set {
        impliedVolatility_ = value;
      }
    }

    /// <summary>Field number for the "premium" field.</summary>
    public const int PremiumFieldNumber = 13;
    private double premium_;
    /// <summary>
    ///溢价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Premium {
      get { return premium_; }
      set {
        premium_ = value;
      }
    }

    /// <summary>Field number for the "maturityTimestamp" field.</summary>
    public const int MaturityTimestampFieldNumber = 14;
    private double maturityTimestamp_;
    /// <summary>
    ///到期日时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaturityTimestamp {
      get { return maturityTimestamp_; }
      set {
        maturityTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "endTradeTimestamp" field.</summary>
    public const int EndTradeTimestampFieldNumber = 15;
    private double endTradeTimestamp_;
    /// <summary>
    ///最后交易日时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EndTradeTimestamp {
      get { return endTradeTimestamp_; }
      set {
        endTradeTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarrantSnapshotExData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarrantSnapshotExData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionRate, other.ConversionRate)) return false;
      if (WarrantType != other.WarrantType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePrice, other.StrikePrice)) return false;
      if (MaturityTime != other.MaturityTime) return false;
      if (EndTradeTime != other.EndTradeTime) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RecoveryPrice, other.RecoveryPrice)) return false;
      if (StreetVolumn != other.StreetVolumn) return false;
      if (IssueVolumn != other.IssueVolumn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StreetRate, other.StreetRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Delta, other.Delta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ImpliedVolatility, other.ImpliedVolatility)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Premium, other.Premium)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaturityTimestamp, other.MaturityTimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EndTradeTimestamp, other.EndTradeTimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConversionRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionRate);
      if (WarrantType != 0) hash ^= WarrantType.GetHashCode();
      if (StrikePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePrice);
      if (MaturityTime.Length != 0) hash ^= MaturityTime.GetHashCode();
      if (EndTradeTime.Length != 0) hash ^= EndTradeTime.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (RecoveryPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RecoveryPrice);
      if (StreetVolumn != 0L) hash ^= StreetVolumn.GetHashCode();
      if (IssueVolumn != 0L) hash ^= IssueVolumn.GetHashCode();
      if (StreetRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StreetRate);
      if (Delta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Delta);
      if (ImpliedVolatility != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ImpliedVolatility);
      if (Premium != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Premium);
      if (MaturityTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaturityTimestamp);
      if (EndTradeTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EndTradeTimestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConversionRate != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ConversionRate);
      }
      if (WarrantType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WarrantType);
      }
      if (StrikePrice != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(StrikePrice);
      }
      if (MaturityTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MaturityTime);
      }
      if (EndTradeTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EndTradeTime);
      }
      if (owner_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Owner);
      }
      if (RecoveryPrice != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(RecoveryPrice);
      }
      if (StreetVolumn != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(StreetVolumn);
      }
      if (IssueVolumn != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(IssueVolumn);
      }
      if (StreetRate != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(StreetRate);
      }
      if (Delta != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Delta);
      }
      if (ImpliedVolatility != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(ImpliedVolatility);
      }
      if (Premium != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Premium);
      }
      if (MaturityTimestamp != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(MaturityTimestamp);
      }
      if (EndTradeTimestamp != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(EndTradeTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConversionRate != 0D) {
        size += 1 + 8;
      }
      if (WarrantType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarrantType);
      }
      if (StrikePrice != 0D) {
        size += 1 + 8;
      }
      if (MaturityTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaturityTime);
      }
      if (EndTradeTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTradeTime);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (RecoveryPrice != 0D) {
        size += 1 + 8;
      }
      if (StreetVolumn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StreetVolumn);
      }
      if (IssueVolumn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IssueVolumn);
      }
      if (StreetRate != 0D) {
        size += 1 + 8;
      }
      if (Delta != 0D) {
        size += 1 + 8;
      }
      if (ImpliedVolatility != 0D) {
        size += 1 + 8;
      }
      if (Premium != 0D) {
        size += 1 + 8;
      }
      if (MaturityTimestamp != 0D) {
        size += 1 + 8;
      }
      if (EndTradeTimestamp != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarrantSnapshotExData other) {
      if (other == null) {
        return;
      }
      if (other.ConversionRate != 0D) {
        ConversionRate = other.ConversionRate;
      }
      if (other.WarrantType != 0) {
        WarrantType = other.WarrantType;
      }
      if (other.StrikePrice != 0D) {
        StrikePrice = other.StrikePrice;
      }
      if (other.MaturityTime.Length != 0) {
        MaturityTime = other.MaturityTime;
      }
      if (other.EndTradeTime.Length != 0) {
        EndTradeTime = other.EndTradeTime;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::QotCommon.Security();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.RecoveryPrice != 0D) {
        RecoveryPrice = other.RecoveryPrice;
      }
      if (other.StreetVolumn != 0L) {
        StreetVolumn = other.StreetVolumn;
      }
      if (other.IssueVolumn != 0L) {
        IssueVolumn = other.IssueVolumn;
      }
      if (other.StreetRate != 0D) {
        StreetRate = other.StreetRate;
      }
      if (other.Delta != 0D) {
        Delta = other.Delta;
      }
      if (other.ImpliedVolatility != 0D) {
        ImpliedVolatility = other.ImpliedVolatility;
      }
      if (other.Premium != 0D) {
        Premium = other.Premium;
      }
      if (other.MaturityTimestamp != 0D) {
        MaturityTimestamp = other.MaturityTimestamp;
      }
      if (other.EndTradeTimestamp != 0D) {
        EndTradeTimestamp = other.EndTradeTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ConversionRate = input.ReadDouble();
            break;
          }
          case 16: {
            WarrantType = input.ReadInt32();
            break;
          }
          case 25: {
            StrikePrice = input.ReadDouble();
            break;
          }
          case 34: {
            MaturityTime = input.ReadString();
            break;
          }
          case 42: {
            EndTradeTime = input.ReadString();
            break;
          }
          case 50: {
            if (owner_ == null) {
              Owner = new global::QotCommon.Security();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 57: {
            RecoveryPrice = input.ReadDouble();
            break;
          }
          case 64: {
            StreetVolumn = input.ReadInt64();
            break;
          }
          case 72: {
            IssueVolumn = input.ReadInt64();
            break;
          }
          case 81: {
            StreetRate = input.ReadDouble();
            break;
          }
          case 89: {
            Delta = input.ReadDouble();
            break;
          }
          case 97: {
            ImpliedVolatility = input.ReadDouble();
            break;
          }
          case 105: {
            Premium = input.ReadDouble();
            break;
          }
          case 113: {
            MaturityTimestamp = input.ReadDouble();
            break;
          }
          case 121: {
            EndTradeTimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 期权类型额外数据
  /// </summary>
  public sealed partial class OptionSnapshotExData : pb::IMessage<OptionSnapshotExData> {
    private static readonly pb::MessageParser<OptionSnapshotExData> _parser = new pb::MessageParser<OptionSnapshotExData>(() => new OptionSnapshotExData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionSnapshotExData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetSecuritySnapshot.QotGetSecuritySnapshotReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionSnapshotExData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionSnapshotExData(OptionSnapshotExData other) : this() {
      type_ = other.type_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      strikeTime_ = other.strikeTime_;
      strikePrice_ = other.strikePrice_;
      contractSize_ = other.contractSize_;
      openInterest_ = other.openInterest_;
      impliedVolatility_ = other.impliedVolatility_;
      premium_ = other.premium_;
      delta_ = other.delta_;
      gamma_ = other.gamma_;
      vega_ = other.vega_;
      theta_ = other.theta_;
      rho_ = other.rho_;
      strikeTimestamp_ = other.strikeTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionSnapshotExData Clone() {
      return new OptionSnapshotExData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///Qot_Common.OptionType,期权
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::QotCommon.Security owner_;
    /// <summary>
    ///标的股
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "strikeTime" field.</summary>
    public const int StrikeTimeFieldNumber = 3;
    private string strikeTime_ = "";
    /// <summary>
    ///行权日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrikeTime {
      get { return strikeTime_; }
      set {
        strikeTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strikePrice" field.</summary>
    public const int StrikePriceFieldNumber = 4;
    private double strikePrice_;
    /// <summary>
    ///行权价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikePrice {
      get { return strikePrice_; }
      set {
        strikePrice_ = value;
      }
    }

    /// <summary>Field number for the "contractSize" field.</summary>
    public const int ContractSizeFieldNumber = 5;
    private int contractSize_;
    /// <summary>
    ///每份合约数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContractSize {
      get { return contractSize_; }
      set {
        contractSize_ = value;
      }
    }

    /// <summary>Field number for the "openInterest" field.</summary>
    public const int OpenInterestFieldNumber = 6;
    private int openInterest_;
    /// <summary>
    ///未平仓合约数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    /// <summary>Field number for the "impliedVolatility" field.</summary>
    public const int ImpliedVolatilityFieldNumber = 7;
    private double impliedVolatility_;
    /// <summary>
    ///隐含波动率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ImpliedVolatility {
      get { return impliedVolatility_; }
      set {
        impliedVolatility_ = value;
      }
    }

    /// <summary>Field number for the "premium" field.</summary>
    public const int PremiumFieldNumber = 8;
    private double premium_;
    /// <summary>
    ///溢价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Premium {
      get { return premium_; }
      set {
        premium_ = value;
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 9;
    private double delta_;
    /// <summary>
    ///希腊值 Delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 10;
    private double gamma_;
    /// <summary>
    ///希腊值 Gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "vega" field.</summary>
    public const int VegaFieldNumber = 11;
    private double vega_;
    /// <summary>
    ///希腊值 Vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Vega {
      get { return vega_; }
      set {
        vega_ = value;
      }
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 12;
    private double theta_;
    /// <summary>
    ///希腊值 Theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Theta {
      get { return theta_; }
      set {
        theta_ = value;
      }
    }

    /// <summary>Field number for the "rho" field.</summary>
    public const int RhoFieldNumber = 13;
    private double rho_;
    /// <summary>
    ///希腊值 Rho
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rho {
      get { return rho_; }
      set {
        rho_ = value;
      }
    }

    /// <summary>Field number for the "strikeTimestamp" field.</summary>
    public const int StrikeTimestampFieldNumber = 14;
    private double strikeTimestamp_;
    /// <summary>
    ///行权日时间戳  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikeTimestamp {
      get { return strikeTimestamp_; }
      set {
        strikeTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionSnapshotExData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionSnapshotExData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (StrikeTime != other.StrikeTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePrice, other.StrikePrice)) return false;
      if (ContractSize != other.ContractSize) return false;
      if (OpenInterest != other.OpenInterest) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ImpliedVolatility, other.ImpliedVolatility)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Premium, other.Premium)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Delta, other.Delta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gamma, other.Gamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Vega, other.Vega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Theta, other.Theta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rho, other.Rho)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikeTimestamp, other.StrikeTimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (StrikeTime.Length != 0) hash ^= StrikeTime.GetHashCode();
      if (StrikePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePrice);
      if (ContractSize != 0) hash ^= ContractSize.GetHashCode();
      if (OpenInterest != 0) hash ^= OpenInterest.GetHashCode();
      if (ImpliedVolatility != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ImpliedVolatility);
      if (Premium != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Premium);
      if (Delta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Delta);
      if (Gamma != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gamma);
      if (Vega != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Vega);
      if (Theta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Theta);
      if (Rho != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rho);
      if (StrikeTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikeTimestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (StrikeTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StrikeTime);
      }
      if (StrikePrice != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(StrikePrice);
      }
      if (ContractSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ContractSize);
      }
      if (OpenInterest != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OpenInterest);
      }
      if (ImpliedVolatility != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ImpliedVolatility);
      }
      if (Premium != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Premium);
      }
      if (Delta != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Delta);
      }
      if (Gamma != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Gamma);
      }
      if (Vega != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Vega);
      }
      if (Theta != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Theta);
      }
      if (Rho != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Rho);
      }
      if (StrikeTimestamp != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(StrikeTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (StrikeTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrikeTime);
      }
      if (StrikePrice != 0D) {
        size += 1 + 8;
      }
      if (ContractSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContractSize);
      }
      if (OpenInterest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenInterest);
      }
      if (ImpliedVolatility != 0D) {
        size += 1 + 8;
      }
      if (Premium != 0D) {
        size += 1 + 8;
      }
      if (Delta != 0D) {
        size += 1 + 8;
      }
      if (Gamma != 0D) {
        size += 1 + 8;
      }
      if (Vega != 0D) {
        size += 1 + 8;
      }
      if (Theta != 0D) {
        size += 1 + 8;
      }
      if (Rho != 0D) {
        size += 1 + 8;
      }
      if (StrikeTimestamp != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionSnapshotExData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::QotCommon.Security();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.StrikeTime.Length != 0) {
        StrikeTime = other.StrikeTime;
      }
      if (other.StrikePrice != 0D) {
        StrikePrice = other.StrikePrice;
      }
      if (other.ContractSize != 0) {
        ContractSize = other.ContractSize;
      }
      if (other.OpenInterest != 0) {
        OpenInterest = other.OpenInterest;
      }
      if (other.ImpliedVolatility != 0D) {
        ImpliedVolatility = other.ImpliedVolatility;
      }
      if (other.Premium != 0D) {
        Premium = other.Premium;
      }
      if (other.Delta != 0D) {
        Delta = other.Delta;
      }
      if (other.Gamma != 0D) {
        Gamma = other.Gamma;
      }
      if (other.Vega != 0D) {
        Vega = other.Vega;
      }
      if (other.Theta != 0D) {
        Theta = other.Theta;
      }
      if (other.Rho != 0D) {
        Rho = other.Rho;
      }
      if (other.StrikeTimestamp != 0D) {
        StrikeTimestamp = other.StrikeTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::QotCommon.Security();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            StrikeTime = input.ReadString();
            break;
          }
          case 33: {
            StrikePrice = input.ReadDouble();
            break;
          }
          case 40: {
            ContractSize = input.ReadInt32();
            break;
          }
          case 48: {
            OpenInterest = input.ReadInt32();
            break;
          }
          case 57: {
            ImpliedVolatility = input.ReadDouble();
            break;
          }
          case 65: {
            Premium = input.ReadDouble();
            break;
          }
          case 73: {
            Delta = input.ReadDouble();
            break;
          }
          case 81: {
            Gamma = input.ReadDouble();
            break;
          }
          case 89: {
            Vega = input.ReadDouble();
            break;
          }
          case 97: {
            Theta = input.ReadDouble();
            break;
          }
          case 105: {
            Rho = input.ReadDouble();
            break;
          }
          case 113: {
            StrikeTimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///基本快照数据
  /// </summary>
  public sealed partial class SnapshotBasicData : pb::IMessage<SnapshotBasicData> {
    private static readonly pb::MessageParser<SnapshotBasicData> _parser = new pb::MessageParser<SnapshotBasicData>(() => new SnapshotBasicData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapshotBasicData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetSecuritySnapshot.QotGetSecuritySnapshotReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotBasicData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotBasicData(SnapshotBasicData other) : this() {
      security_ = other.security_ != null ? other.security_.Clone() : null;
      type_ = other.type_;
      isSuspend_ = other.isSuspend_;
      listTime_ = other.listTime_;
      lotSize_ = other.lotSize_;
      priceSpread_ = other.priceSpread_;
      updateTime_ = other.updateTime_;
      highPrice_ = other.highPrice_;
      openPrice_ = other.openPrice_;
      lowPrice_ = other.lowPrice_;
      lastClosePrice_ = other.lastClosePrice_;
      curPrice_ = other.curPrice_;
      volume_ = other.volume_;
      turnover_ = other.turnover_;
      turnoverRate_ = other.turnoverRate_;
      listTimestamp_ = other.listTimestamp_;
      updateTimestamp_ = other.updateTimestamp_;
      askPrice_ = other.askPrice_;
      bidPrice_ = other.bidPrice_;
      askVol_ = other.askVol_;
      bidVol_ = other.bidVol_;
      enableMargin_ = other.enableMargin_;
      mortgageRatio_ = other.mortgageRatio_;
      longMarginInitialRatio_ = other.longMarginInitialRatio_;
      enableShortSell_ = other.enableShortSell_;
      shortSellRate_ = other.shortSellRate_;
      shortAvailableVolume_ = other.shortAvailableVolume_;
      shortMarginInitialRatio_ = other.shortMarginInitialRatio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotBasicData Clone() {
      return new SnapshotBasicData(this);
    }

    /// <summary>Field number for the "security" field.</summary>
    public const int SecurityFieldNumber = 1;
    private global::QotCommon.Security security_;
    /// <summary>
    ///股票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Security {
      get { return security_; }
      set {
        security_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///Qot_Common.SecurityType,股票类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "isSuspend" field.</summary>
    public const int IsSuspendFieldNumber = 3;
    private bool isSuspend_;
    /// <summary>
    ///是否停牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuspend {
      get { return isSuspend_; }
      set {
        isSuspend_ = value;
      }
    }

    /// <summary>Field number for the "listTime" field.</summary>
    public const int ListTimeFieldNumber = 4;
    private string listTime_ = "";
    /// <summary>
    ///上市时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListTime {
      get { return listTime_; }
      set {
        listTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lotSize" field.</summary>
    public const int LotSizeFieldNumber = 5;
    private int lotSize_;
    /// <summary>
    ///每手数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LotSize {
      get { return lotSize_; }
      set {
        lotSize_ = value;
      }
    }

    /// <summary>Field number for the "priceSpread" field.</summary>
    public const int PriceSpreadFieldNumber = 6;
    private double priceSpread_;
    /// <summary>
    ///价差
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceSpread {
      get { return priceSpread_; }
      set {
        priceSpread_ = value;
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 7;
    private string updateTime_ = "";
    /// <summary>
    ///更新时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highPrice" field.</summary>
    public const int HighPriceFieldNumber = 8;
    private double highPrice_;
    /// <summary>
    ///最新价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = value;
      }
    }

    /// <summary>Field number for the "openPrice" field.</summary>
    public const int OpenPriceFieldNumber = 9;
    private double openPrice_;
    /// <summary>
    ///开盘价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OpenPrice {
      get { return openPrice_; }
      set {
        openPrice_ = value;
      }
    }

    /// <summary>Field number for the "lowPrice" field.</summary>
    public const int LowPriceFieldNumber = 10;
    private double lowPrice_;
    /// <summary>
    ///最低价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    /// <summary>Field number for the "lastClosePrice" field.</summary>
    public const int LastClosePriceFieldNumber = 11;
    private double lastClosePrice_;
    /// <summary>
    ///昨收价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastClosePrice {
      get { return lastClosePrice_; }
      set {
        lastClosePrice_ = value;
      }
    }

    /// <summary>Field number for the "curPrice" field.</summary>
    public const int CurPriceFieldNumber = 12;
    private double curPrice_;
    /// <summary>
    ///最新价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurPrice {
      get { return curPrice_; }
      set {
        curPrice_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 13;
    private long volume_;
    /// <summary>
    ///成交量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "turnover" field.</summary>
    public const int TurnoverFieldNumber = 14;
    private double turnover_;
    /// <summary>
    ///成交额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Turnover {
      get { return turnover_; }
      set {
        turnover_ = value;
      }
    }

    /// <summary>Field number for the "turnoverRate" field.</summary>
    public const int TurnoverRateFieldNumber = 15;
    private double turnoverRate_;
    /// <summary>
    ///换手率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TurnoverRate {
      get { return turnoverRate_; }
      set {
        turnoverRate_ = value;
      }
    }

    /// <summary>Field number for the "listTimestamp" field.</summary>
    public const int ListTimestampFieldNumber = 16;
    private double listTimestamp_;
    /// <summary>
    ///上市时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ListTimestamp {
      get { return listTimestamp_; }
      set {
        listTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "updateTimestamp" field.</summary>
    public const int UpdateTimestampFieldNumber = 17;
    private double updateTimestamp_;
    /// <summary>
    ///更新时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpdateTimestamp {
      get { return updateTimestamp_; }
      set {
        updateTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "askPrice" field.</summary>
    public const int AskPriceFieldNumber = 18;
    private double askPrice_;
    /// <summary>
    ///卖价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice" field.</summary>
    public const int BidPriceFieldNumber = 19;
    private double bidPrice_;
    /// <summary>
    ///买价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "askVol" field.</summary>
    public const int AskVolFieldNumber = 20;
    private long askVol_;
    /// <summary>
    ///卖量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AskVol {
      get { return askVol_; }
      set {
        askVol_ = value;
      }
    }

    /// <summary>Field number for the "bidVol" field.</summary>
    public const int BidVolFieldNumber = 21;
    private long bidVol_;
    /// <summary>
    ///买量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BidVol {
      get { return bidVol_; }
      set {
        bidVol_ = value;
      }
    }

    /// <summary>Field number for the "enableMargin" field.</summary>
    public const int EnableMarginFieldNumber = 22;
    private bool enableMargin_;
    /// <summary>
    /// 是否可融资，如果为true，后两个字段才有意义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableMargin {
      get { return enableMargin_; }
      set {
        enableMargin_ = value;
      }
    }

    /// <summary>Field number for the "mortgageRatio" field.</summary>
    public const int MortgageRatioFieldNumber = 23;
    private double mortgageRatio_;
    /// <summary>
    /// 股票抵押率,是不带百分号的数字，例如50%是50
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MortgageRatio {
      get { return mortgageRatio_; }
      set {
        mortgageRatio_ = value;
      }
    }

    /// <summary>Field number for the "longMarginInitialRatio" field.</summary>
    public const int LongMarginInitialRatioFieldNumber = 24;
    private double longMarginInitialRatio_;
    /// <summary>
    /// 融资初始保证金率,是不带百分号的数字，例如50%是50
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LongMarginInitialRatio {
      get { return longMarginInitialRatio_; }
      set {
        longMarginInitialRatio_ = value;
      }
    }

    /// <summary>Field number for the "enableShortSell" field.</summary>
    public const int EnableShortSellFieldNumber = 25;
    private bool enableShortSell_;
    /// <summary>
    /// 是否可卖空，如果为true，后三个字段才有意义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableShortSell {
      get { return enableShortSell_; }
      set {
        enableShortSell_ = value;
      }
    }

    /// <summary>Field number for the "shortSellRate" field.</summary>
    public const int ShortSellRateFieldNumber = 26;
    private double shortSellRate_;
    /// <summary>
    /// 卖空参考利率,是不带百分号的数字，例如50%是50
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ShortSellRate {
      get { return shortSellRate_; }
      set {
        shortSellRate_ = value;
      }
    }

    /// <summary>Field number for the "shortAvailableVolume" field.</summary>
    public const int ShortAvailableVolumeFieldNumber = 27;
    private long shortAvailableVolume_;
    /// <summary>
    /// 剩余可卖空数量（股）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShortAvailableVolume {
      get { return shortAvailableVolume_; }
      set {
        shortAvailableVolume_ = value;
      }
    }

    /// <summary>Field number for the "shortMarginInitialRatio" field.</summary>
    public const int ShortMarginInitialRatioFieldNumber = 28;
    private double shortMarginInitialRatio_;
    /// <summary>
    /// 卖空（融券）初始保证金率,是不带百分号的数字，例如50%是50
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ShortMarginInitialRatio {
      get { return shortMarginInitialRatio_; }
      set {
        shortMarginInitialRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapshotBasicData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapshotBasicData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Security, other.Security)) return false;
      if (Type != other.Type) return false;
      if (IsSuspend != other.IsSuspend) return false;
      if (ListTime != other.ListTime) return false;
      if (LotSize != other.LotSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceSpread, other.PriceSpread)) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HighPrice, other.HighPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpenPrice, other.OpenPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowPrice, other.LowPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastClosePrice, other.LastClosePrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurPrice, other.CurPrice)) return false;
      if (Volume != other.Volume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Turnover, other.Turnover)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TurnoverRate, other.TurnoverRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ListTimestamp, other.ListTimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpdateTimestamp, other.UpdateTimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPrice, other.AskPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPrice, other.BidPrice)) return false;
      if (AskVol != other.AskVol) return false;
      if (BidVol != other.BidVol) return false;
      if (EnableMargin != other.EnableMargin) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MortgageRatio, other.MortgageRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LongMarginInitialRatio, other.LongMarginInitialRatio)) return false;
      if (EnableShortSell != other.EnableShortSell) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ShortSellRate, other.ShortSellRate)) return false;
      if (ShortAvailableVolume != other.ShortAvailableVolume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ShortMarginInitialRatio, other.ShortMarginInitialRatio)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (security_ != null) hash ^= Security.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IsSuspend != false) hash ^= IsSuspend.GetHashCode();
      if (ListTime.Length != 0) hash ^= ListTime.GetHashCode();
      if (LotSize != 0) hash ^= LotSize.GetHashCode();
      if (PriceSpread != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceSpread);
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      if (HighPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HighPrice);
      if (OpenPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpenPrice);
      if (LowPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowPrice);
      if (LastClosePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastClosePrice);
      if (CurPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurPrice);
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (Turnover != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Turnover);
      if (TurnoverRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TurnoverRate);
      if (ListTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ListTimestamp);
      if (UpdateTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpdateTimestamp);
      if (AskPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPrice);
      if (BidPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPrice);
      if (AskVol != 0L) hash ^= AskVol.GetHashCode();
      if (BidVol != 0L) hash ^= BidVol.GetHashCode();
      if (EnableMargin != false) hash ^= EnableMargin.GetHashCode();
      if (MortgageRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MortgageRatio);
      if (LongMarginInitialRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LongMarginInitialRatio);
      if (EnableShortSell != false) hash ^= EnableShortSell.GetHashCode();
      if (ShortSellRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ShortSellRate);
      if (ShortAvailableVolume != 0L) hash ^= ShortAvailableVolume.GetHashCode();
      if (ShortMarginInitialRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ShortMarginInitialRatio);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (security_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Security);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (IsSuspend != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSuspend);
      }
      if (ListTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ListTime);
      }
      if (LotSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LotSize);
      }
      if (PriceSpread != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PriceSpread);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UpdateTime);
      }
      if (HighPrice != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(HighPrice);
      }
      if (OpenPrice != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(OpenPrice);
      }
      if (LowPrice != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(LowPrice);
      }
      if (LastClosePrice != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(LastClosePrice);
      }
      if (CurPrice != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(CurPrice);
      }
      if (Volume != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Volume);
      }
      if (Turnover != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Turnover);
      }
      if (TurnoverRate != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(TurnoverRate);
      }
      if (ListTimestamp != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(ListTimestamp);
      }
      if (UpdateTimestamp != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(UpdateTimestamp);
      }
      if (AskPrice != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(AskPrice);
      }
      if (BidPrice != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(BidPrice);
      }
      if (AskVol != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AskVol);
      }
      if (BidVol != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(BidVol);
      }
      if (EnableMargin != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(EnableMargin);
      }
      if (MortgageRatio != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(MortgageRatio);
      }
      if (LongMarginInitialRatio != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(LongMarginInitialRatio);
      }
      if (EnableShortSell != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(EnableShortSell);
      }
      if (ShortSellRate != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(ShortSellRate);
      }
      if (ShortAvailableVolume != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(ShortAvailableVolume);
      }
      if (ShortMarginInitialRatio != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(ShortMarginInitialRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (security_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Security);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (IsSuspend != false) {
        size += 1 + 1;
      }
      if (ListTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListTime);
      }
      if (LotSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LotSize);
      }
      if (PriceSpread != 0D) {
        size += 1 + 8;
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      if (HighPrice != 0D) {
        size += 1 + 8;
      }
      if (OpenPrice != 0D) {
        size += 1 + 8;
      }
      if (LowPrice != 0D) {
        size += 1 + 8;
      }
      if (LastClosePrice != 0D) {
        size += 1 + 8;
      }
      if (CurPrice != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (Turnover != 0D) {
        size += 1 + 8;
      }
      if (TurnoverRate != 0D) {
        size += 1 + 8;
      }
      if (ListTimestamp != 0D) {
        size += 2 + 8;
      }
      if (UpdateTimestamp != 0D) {
        size += 2 + 8;
      }
      if (AskPrice != 0D) {
        size += 2 + 8;
      }
      if (BidPrice != 0D) {
        size += 2 + 8;
      }
      if (AskVol != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskVol);
      }
      if (BidVol != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidVol);
      }
      if (EnableMargin != false) {
        size += 2 + 1;
      }
      if (MortgageRatio != 0D) {
        size += 2 + 8;
      }
      if (LongMarginInitialRatio != 0D) {
        size += 2 + 8;
      }
      if (EnableShortSell != false) {
        size += 2 + 1;
      }
      if (ShortSellRate != 0D) {
        size += 2 + 8;
      }
      if (ShortAvailableVolume != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ShortAvailableVolume);
      }
      if (ShortMarginInitialRatio != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapshotBasicData other) {
      if (other == null) {
        return;
      }
      if (other.security_ != null) {
        if (security_ == null) {
          Security = new global::QotCommon.Security();
        }
        Security.MergeFrom(other.Security);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IsSuspend != false) {
        IsSuspend = other.IsSuspend;
      }
      if (other.ListTime.Length != 0) {
        ListTime = other.ListTime;
      }
      if (other.LotSize != 0) {
        LotSize = other.LotSize;
      }
      if (other.PriceSpread != 0D) {
        PriceSpread = other.PriceSpread;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
      if (other.HighPrice != 0D) {
        HighPrice = other.HighPrice;
      }
      if (other.OpenPrice != 0D) {
        OpenPrice = other.OpenPrice;
      }
      if (other.LowPrice != 0D) {
        LowPrice = other.LowPrice;
      }
      if (other.LastClosePrice != 0D) {
        LastClosePrice = other.LastClosePrice;
      }
      if (other.CurPrice != 0D) {
        CurPrice = other.CurPrice;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.Turnover != 0D) {
        Turnover = other.Turnover;
      }
      if (other.TurnoverRate != 0D) {
        TurnoverRate = other.TurnoverRate;
      }
      if (other.ListTimestamp != 0D) {
        ListTimestamp = other.ListTimestamp;
      }
      if (other.UpdateTimestamp != 0D) {
        UpdateTimestamp = other.UpdateTimestamp;
      }
      if (other.AskPrice != 0D) {
        AskPrice = other.AskPrice;
      }
      if (other.BidPrice != 0D) {
        BidPrice = other.BidPrice;
      }
      if (other.AskVol != 0L) {
        AskVol = other.AskVol;
      }
      if (other.BidVol != 0L) {
        BidVol = other.BidVol;
      }
      if (other.EnableMargin != false) {
        EnableMargin = other.EnableMargin;
      }
      if (other.MortgageRatio != 0D) {
        MortgageRatio = other.MortgageRatio;
      }
      if (other.LongMarginInitialRatio != 0D) {
        LongMarginInitialRatio = other.LongMarginInitialRatio;
      }
      if (other.EnableShortSell != false) {
        EnableShortSell = other.EnableShortSell;
      }
      if (other.ShortSellRate != 0D) {
        ShortSellRate = other.ShortSellRate;
      }
      if (other.ShortAvailableVolume != 0L) {
        ShortAvailableVolume = other.ShortAvailableVolume;
      }
      if (other.ShortMarginInitialRatio != 0D) {
        ShortMarginInitialRatio = other.ShortMarginInitialRatio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (security_ == null) {
              Security = new global::QotCommon.Security();
            }
            input.ReadMessage(Security);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            IsSuspend = input.ReadBool();
            break;
          }
          case 34: {
            ListTime = input.ReadString();
            break;
          }
          case 40: {
            LotSize = input.ReadInt32();
            break;
          }
          case 49: {
            PriceSpread = input.ReadDouble();
            break;
          }
          case 58: {
            UpdateTime = input.ReadString();
            break;
          }
          case 65: {
            HighPrice = input.ReadDouble();
            break;
          }
          case 73: {
            OpenPrice = input.ReadDouble();
            break;
          }
          case 81: {
            LowPrice = input.ReadDouble();
            break;
          }
          case 89: {
            LastClosePrice = input.ReadDouble();
            break;
          }
          case 97: {
            CurPrice = input.ReadDouble();
            break;
          }
          case 104: {
            Volume = input.ReadInt64();
            break;
          }
          case 113: {
            Turnover = input.ReadDouble();
            break;
          }
          case 121: {
            TurnoverRate = input.ReadDouble();
            break;
          }
          case 129: {
            ListTimestamp = input.ReadDouble();
            break;
          }
          case 137: {
            UpdateTimestamp = input.ReadDouble();
            break;
          }
          case 145: {
            AskPrice = input.ReadDouble();
            break;
          }
          case 153: {
            BidPrice = input.ReadDouble();
            break;
          }
          case 160: {
            AskVol = input.ReadInt64();
            break;
          }
          case 168: {
            BidVol = input.ReadInt64();
            break;
          }
          case 176: {
            EnableMargin = input.ReadBool();
            break;
          }
          case 185: {
            MortgageRatio = input.ReadDouble();
            break;
          }
          case 193: {
            LongMarginInitialRatio = input.ReadDouble();
            break;
          }
          case 200: {
            EnableShortSell = input.ReadBool();
            break;
          }
          case 209: {
            ShortSellRate = input.ReadDouble();
            break;
          }
          case 216: {
            ShortAvailableVolume = input.ReadInt64();
            break;
          }
          case 225: {
            ShortMarginInitialRatio = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Snapshot : pb::IMessage<Snapshot> {
    private static readonly pb::MessageParser<Snapshot> _parser = new pb::MessageParser<Snapshot>(() => new Snapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Snapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetSecuritySnapshot.QotGetSecuritySnapshotReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot(Snapshot other) : this() {
      basic_ = other.basic_ != null ? other.basic_.Clone() : null;
      equityExData_ = other.equityExData_ != null ? other.equityExData_.Clone() : null;
      warrantExData_ = other.warrantExData_ != null ? other.warrantExData_.Clone() : null;
      optionExData_ = other.optionExData_ != null ? other.optionExData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot Clone() {
      return new Snapshot(this);
    }

    /// <summary>Field number for the "basic" field.</summary>
    public const int BasicFieldNumber = 1;
    private global::QotGetSecuritySnapshot.SnapshotBasicData basic_;
    /// <summary>
    ///快照基本数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotGetSecuritySnapshot.SnapshotBasicData Basic {
      get { return basic_; }
      set {
        basic_ = value;
      }
    }

    /// <summary>Field number for the "equityExData" field.</summary>
    public const int EquityExDataFieldNumber = 2;
    private global::QotGetSecuritySnapshot.EquitySnapshotExData equityExData_;
    /// <summary>
    ///正股快照额外数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotGetSecuritySnapshot.EquitySnapshotExData EquityExData {
      get { return equityExData_; }
      set {
        equityExData_ = value;
      }
    }

    /// <summary>Field number for the "warrantExData" field.</summary>
    public const int WarrantExDataFieldNumber = 3;
    private global::QotGetSecuritySnapshot.WarrantSnapshotExData warrantExData_;
    /// <summary>
    ///窝轮快照额外数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotGetSecuritySnapshot.WarrantSnapshotExData WarrantExData {
      get { return warrantExData_; }
      set {
        warrantExData_ = value;
      }
    }

    /// <summary>Field number for the "optionExData" field.</summary>
    public const int OptionExDataFieldNumber = 4;
    private global::QotGetSecuritySnapshot.OptionSnapshotExData optionExData_;
    /// <summary>
    ///期权快照额外数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotGetSecuritySnapshot.OptionSnapshotExData OptionExData {
      get { return optionExData_; }
      set {
        optionExData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Snapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Snapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Basic, other.Basic)) return false;
      if (!object.Equals(EquityExData, other.EquityExData)) return false;
      if (!object.Equals(WarrantExData, other.WarrantExData)) return false;
      if (!object.Equals(OptionExData, other.OptionExData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (basic_ != null) hash ^= Basic.GetHashCode();
      if (equityExData_ != null) hash ^= EquityExData.GetHashCode();
      if (warrantExData_ != null) hash ^= WarrantExData.GetHashCode();
      if (optionExData_ != null) hash ^= OptionExData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (basic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Basic);
      }
      if (equityExData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EquityExData);
      }
      if (warrantExData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WarrantExData);
      }
      if (optionExData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OptionExData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (basic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Basic);
      }
      if (equityExData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquityExData);
      }
      if (warrantExData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WarrantExData);
      }
      if (optionExData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionExData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Snapshot other) {
      if (other == null) {
        return;
      }
      if (other.basic_ != null) {
        if (basic_ == null) {
          Basic = new global::QotGetSecuritySnapshot.SnapshotBasicData();
        }
        Basic.MergeFrom(other.Basic);
      }
      if (other.equityExData_ != null) {
        if (equityExData_ == null) {
          EquityExData = new global::QotGetSecuritySnapshot.EquitySnapshotExData();
        }
        EquityExData.MergeFrom(other.EquityExData);
      }
      if (other.warrantExData_ != null) {
        if (warrantExData_ == null) {
          WarrantExData = new global::QotGetSecuritySnapshot.WarrantSnapshotExData();
        }
        WarrantExData.MergeFrom(other.WarrantExData);
      }
      if (other.optionExData_ != null) {
        if (optionExData_ == null) {
          OptionExData = new global::QotGetSecuritySnapshot.OptionSnapshotExData();
        }
        OptionExData.MergeFrom(other.OptionExData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (basic_ == null) {
              Basic = new global::QotGetSecuritySnapshot.SnapshotBasicData();
            }
            input.ReadMessage(Basic);
            break;
          }
          case 18: {
            if (equityExData_ == null) {
              EquityExData = new global::QotGetSecuritySnapshot.EquitySnapshotExData();
            }
            input.ReadMessage(EquityExData);
            break;
          }
          case 26: {
            if (warrantExData_ == null) {
              WarrantExData = new global::QotGetSecuritySnapshot.WarrantSnapshotExData();
            }
            input.ReadMessage(WarrantExData);
            break;
          }
          case 34: {
            if (optionExData_ == null) {
              OptionExData = new global::QotGetSecuritySnapshot.OptionSnapshotExData();
            }
            input.ReadMessage(OptionExData);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C : pb::IMessage<S2C> {
    private static readonly pb::MessageParser<S2C> _parser = new pb::MessageParser<S2C>(() => new S2C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetSecuritySnapshot.QotGetSecuritySnapshotReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C(S2C other) : this() {
      snapshotList_ = other.snapshotList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C Clone() {
      return new S2C(this);
    }

    /// <summary>Field number for the "snapshotList" field.</summary>
    public const int SnapshotListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::QotGetSecuritySnapshot.Snapshot> _repeated_snapshotList_codec
        = pb::FieldCodec.ForMessage(10, global::QotGetSecuritySnapshot.Snapshot.Parser);
    private readonly pbc::RepeatedField<global::QotGetSecuritySnapshot.Snapshot> snapshotList_ = new pbc::RepeatedField<global::QotGetSecuritySnapshot.Snapshot>();
    /// <summary>
    ///股票快照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::QotGetSecuritySnapshot.Snapshot> SnapshotList {
      get { return snapshotList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!snapshotList_.Equals(other.snapshotList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= snapshotList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      snapshotList_.WriteTo(output, _repeated_snapshotList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += snapshotList_.CalculateSize(_repeated_snapshotList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C other) {
      if (other == null) {
        return;
      }
      snapshotList_.Add(other.snapshotList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            snapshotList_.AddEntriesFrom(input, _repeated_snapshotList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetSecuritySnapshot.QotGetSecuritySnapshotReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      c2S_ = other.c2S_ != null ? other.c2S_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "c2s" field.</summary>
    public const int C2SFieldNumber = 1;
    private global::QotGetSecuritySnapshot.C2S c2S_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotGetSecuritySnapshot.C2S C2S {
      get { return c2S_; }
      set {
        c2S_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(C2S, other.C2S)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (c2S_ != null) hash ^= C2S.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (c2S_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(C2S);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (c2S_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(C2S);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.c2S_ != null) {
        if (c2S_ == null) {
          C2S = new global::QotGetSecuritySnapshot.C2S();
        }
        C2S.MergeFrom(other.C2S);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (c2S_ == null) {
              C2S = new global::QotGetSecuritySnapshot.C2S();
            }
            input.ReadMessage(C2S);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetSecuritySnapshot.QotGetSecuritySnapshotReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      retType_ = other.retType_;
      retMsg_ = other.retMsg_;
      errCode_ = other.errCode_;
      s2C_ = other.s2C_ != null ? other.s2C_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "retType" field.</summary>
    public const int RetTypeFieldNumber = 1;
    private int retType_;
    /// <summary>
    ///RetType,返回结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetType {
      get { return retType_; }
      set {
        retType_ = value;
      }
    }

    /// <summary>Field number for the "retMsg" field.</summary>
    public const int RetMsgFieldNumber = 2;
    private string retMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RetMsg {
      get { return retMsg_; }
      set {
        retMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 3;
    private int errCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "s2c" field.</summary>
    public const int S2CFieldNumber = 4;
    private global::QotGetSecuritySnapshot.S2C s2C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotGetSecuritySnapshot.S2C S2C {
      get { return s2C_; }
      set {
        s2C_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetType != other.RetType) return false;
      if (RetMsg != other.RetMsg) return false;
      if (ErrCode != other.ErrCode) return false;
      if (!object.Equals(S2C, other.S2C)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RetType != 0) hash ^= RetType.GetHashCode();
      if (RetMsg.Length != 0) hash ^= RetMsg.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (s2C_ != null) hash ^= S2C.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetType);
      }
      if (RetMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RetMsg);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ErrCode);
      }
      if (s2C_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(S2C);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetType);
      }
      if (RetMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RetMsg);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (s2C_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(S2C);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.RetType != 0) {
        RetType = other.RetType;
      }
      if (other.RetMsg.Length != 0) {
        RetMsg = other.RetMsg;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.s2C_ != null) {
        if (s2C_ == null) {
          S2C = new global::QotGetSecuritySnapshot.S2C();
        }
        S2C.MergeFrom(other.S2C);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetType = input.ReadInt32();
            break;
          }
          case 18: {
            RetMsg = input.ReadString();
            break;
          }
          case 24: {
            ErrCode = input.ReadInt32();
            break;
          }
          case 34: {
            if (s2C_ == null) {
              S2C = new global::QotGetSecuritySnapshot.S2C();
            }
            input.ReadMessage(S2C);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
