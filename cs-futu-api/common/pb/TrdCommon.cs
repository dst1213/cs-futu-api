// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Trd_Common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TrdCommon {

  /// <summary>Holder for reflection information generated from Trd_Common.proto</summary>
  public static partial class TrdCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for Trd_Common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrdCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBUcmRfQ29tbW9uLnByb3RvEgpUcmRfQ29tbW9uGgxDb21tb24ucHJvdG8i",
            "PQoJVHJkSGVhZGVyEg4KBnRyZEVudhgBIAEoBRINCgVhY2NJRBgCIAEoBBIR",
            "Cgl0cmRNYXJrZXQYAyABKAUiQgoGVHJkQWNjEg4KBnRyZEVudhgBIAEoBRIN",
            "CgVhY2NJRBgCIAEoBBIZChF0cmRNYXJrZXRBdXRoTGlzdBgDIAMoBSKNAQoF",
            "RnVuZHMSDQoFcG93ZXIYASABKAESEwoLdG90YWxBc3NldHMYAiABKAESDAoE",
            "Y2FzaBgDIAEoARIRCgltYXJrZXRWYWwYBCABKAESEgoKZnJvemVuQ2FzaBgF",
            "IAEoARIQCghkZWJ0Q2FzaBgGIAEoARIZChFhdmxXaXRoZHJhd2FsQ2FzaBgH",
            "IAEoASLGAgoIUG9zaXRpb24SEgoKcG9zaXRpb25JRBgBIAEoBBIUCgxwb3Np",
            "dGlvblNpZGUYAiABKAUSDAoEY29kZRgDIAEoCRIMCgRuYW1lGAQgASgJEgsK",
            "A3F0eRgFIAEoARISCgpjYW5TZWxsUXR5GAYgASgBEg0KBXByaWNlGAcgASgB",
            "EhEKCWNvc3RQcmljZRgIIAEoARILCgN2YWwYCSABKAESDQoFcGxWYWwYCiAB",
            "KAESDwoHcGxSYXRpbxgLIAEoARIRCglzZWNNYXJrZXQYDCABKAUSEAoIdGRf",
            "cGxWYWwYFSABKAESEQoJdGRfdHJkVmFsGBYgASgBEhEKCXRkX2J1eVZhbBgX",
            "IAEoARIRCgl0ZF9idXlRdHkYGCABKAESEgoKdGRfc2VsbFZhbBgZIAEoARIS",
            "Cgp0ZF9zZWxsUXR5GBogASgBIsQCCgVPcmRlchIPCgd0cmRTaWRlGAEgASgF",
            "EhEKCW9yZGVyVHlwZRgCIAEoBRITCgtvcmRlclN0YXR1cxgDIAEoBRIPCgdv",
            "cmRlcklEGAQgASgEEhEKCW9yZGVySURFeBgFIAEoCRIMCgRjb2RlGAYgASgJ",
            "EgwKBG5hbWUYByABKAkSCwoDcXR5GAggASgBEg0KBXByaWNlGAkgASgBEhIK",
            "CmNyZWF0ZVRpbWUYCiABKAkSEgoKdXBkYXRlVGltZRgLIAEoCRIPCgdmaWxs",
            "UXR5GAwgASgBEhQKDGZpbGxBdmdQcmljZRgNIAEoARISCgpsYXN0RXJyTXNn",
            "GA4gASgJEhEKCXNlY01hcmtldBgPIAEoBRIXCg9jcmVhdGVUaW1lc3RhbXAY",
            "ECABKAESFwoPdXBkYXRlVGltZXN0YW1wGBEgASgBIo4CCglPcmRlckZpbGwS",
            "DwoHdHJkU2lkZRgBIAEoBRIOCgZmaWxsSUQYAiABKAQSEAoIZmlsbElERXgY",
            "AyABKAkSDwoHb3JkZXJJRBgEIAEoBBIRCglvcmRlcklERXgYBSABKAkSDAoE",
            "Y29kZRgGIAEoCRIMCgRuYW1lGAcgASgJEgsKA3F0eRgIIAEoARINCgVwcmlj",
            "ZRgJIAEoARISCgpjcmVhdGVUaW1lGAogASgJEhcKD2NvdW50ZXJCcm9rZXJJ",
            "RBgLIAEoBRIZChFjb3VudGVyQnJva2VyTmFtZRgMIAEoCRIRCglzZWNNYXJr",
            "ZXQYDSABKAUSFwoPY3JlYXRlVGltZXN0YW1wGA4gASgBIoABCgpNYXhUcmRR",
            "dHlzEhIKCm1heENhc2hCdXkYASABKAESGwoTbWF4Q2FzaEFuZE1hcmdpbkJ1",
            "eRgCIAEoARIXCg9tYXhQb3NpdGlvblNlbGwYAyABKAESFAoMbWF4U2VsbFNo",
            "b3J0GAQgASgBEhIKCm1heEJ1eUJhY2sYBSABKAEiWwoTVHJkRmlsdGVyQ29u",
            "ZGl0aW9ucxIQCghjb2RlTGlzdBgBIAMoCRIOCgZpZExpc3QYAiADKAQSEQoJ",
            "YmVnaW5UaW1lGAMgASgJEg8KB2VuZFRpbWUYBCABKAkqLgoGVHJkRW52EhMK",
            "D1RyZEVudl9TaW11bGF0ZRAAEg8KC1RyZEVudl9SZWFsEAEqbAoJVHJkTWFy",
            "a2V0EhUKEVRyZE1hcmtldF9Vbmtub3duEAASEAoMVHJkTWFya2V0X0hLEAES",
            "EAoMVHJkTWFya2V0X1VTEAISEAoMVHJkTWFya2V0X0NOEAMSEgoOVHJkTWFy",
            "a2V0X0hLQ0MQBCqCAQoMVHJkU2VjTWFya2V0EhgKFFRyZFNlY01hcmtldF9V",
            "bmtub3duEAASEwoPVHJkU2VjTWFya2V0X0hLEAESEwoPVHJkU2VjTWFya2V0",
            "X1VTEAISFgoSVHJkU2VjTWFya2V0X0NOX1NIEB8SFgoSVHJkU2VjTWFya2V0",
            "X0NOX1NaECAqbQoHVHJkU2lkZRITCg9UcmRTaWRlX1Vua25vd24QABIPCgtU",
            "cmRTaWRlX0J1eRABEhAKDFRyZFNpZGVfU2VsbBACEhUKEVRyZFNpZGVfU2Vs",
            "bFNob3J0EAMSEwoPVHJkU2lkZV9CdXlCYWNrEAQqugEKCU9yZGVyVHlwZRIV",
            "ChFPcmRlclR5cGVfVW5rbm93bhAAEhQKEE9yZGVyVHlwZV9Ob3JtYWwQARIU",
            "ChBPcmRlclR5cGVfTWFya2V0EAISGwoXT3JkZXJUeXBlX0Fic29sdXRlTGlt",
            "aXQQBRIVChFPcmRlclR5cGVfQXVjdGlvbhAGEhoKFk9yZGVyVHlwZV9BdWN0",
            "aW9uTGltaXQQBxIaChZPcmRlclR5cGVfU3BlY2lhbExpbWl0EAgq3QMKC09y",
            "ZGVyU3RhdHVzEhsKF09yZGVyU3RhdHVzX1Vuc3VibWl0dGVkEAASIAoTT3Jk",
            "ZXJTdGF0dXNfVW5rbm93bhD///////////8BEh0KGU9yZGVyU3RhdHVzX1dh",
            "aXRpbmdTdWJtaXQQARIaChZPcmRlclN0YXR1c19TdWJtaXR0aW5nEAISHAoY",
            "T3JkZXJTdGF0dXNfU3VibWl0RmFpbGVkEAMSFwoTT3JkZXJTdGF0dXNfVGlt",
            "ZU91dBAEEhkKFU9yZGVyU3RhdHVzX1N1Ym1pdHRlZBAFEhsKF09yZGVyU3Rh",
            "dHVzX0ZpbGxlZF9QYXJ0EAoSGgoWT3JkZXJTdGF0dXNfRmlsbGVkX0FsbBAL",
            "Eh8KG09yZGVyU3RhdHVzX0NhbmNlbGxpbmdfUGFydBAMEh4KGk9yZGVyU3Rh",
            "dHVzX0NhbmNlbGxpbmdfQWxsEA0SHgoaT3JkZXJTdGF0dXNfQ2FuY2VsbGVk",
            "X1BhcnQQDhIdChlPcmRlclN0YXR1c19DYW5jZWxsZWRfQWxsEA8SFgoST3Jk",
            "ZXJTdGF0dXNfRmFpbGVkEBUSGAoUT3JkZXJTdGF0dXNfRGlzYWJsZWQQFhIX",
            "ChNPcmRlclN0YXR1c19EZWxldGVkEBcqYAoMUG9zaXRpb25TaWRlEhUKEVBv",
            "c2l0aW9uU2lkZV9Mb25nEAASIQoUUG9zaXRpb25TaWRlX1Vua25vd24Q////",
            "////////ARIWChJQb3NpdGlvblNpZGVfU2hvcnQQASqtAQoNTW9kaWZ5T3Jk",
            "ZXJPcBIZChVNb2RpZnlPcmRlck9wX1Vua25vd24QABIYChRNb2RpZnlPcmRl",
            "ck9wX05vcm1hbBABEhgKFE1vZGlmeU9yZGVyT3BfQ2FuY2VsEAISGQoVTW9k",
            "aWZ5T3JkZXJPcF9EaXNhYmxlEAMSGAoUTW9kaWZ5T3JkZXJPcF9FbmFibGUQ",
            "BBIYChRNb2RpZnlPcmRlck9wX0RlbGV0ZRAFKoYBChRSZWNvbmZpcm1PcmRl",
            "clJlYXNvbhIgChxSZWNvbmZpcm1PcmRlclJlYXNvbl9Vbmtub3duEAASJAog",
            "UmVjb25maXJtT3JkZXJSZWFzb25fUXR5VG9vTGFyZ2UQARImCiJSZWNvbmZp",
            "cm1PcmRlclJlYXNvbl9QcmljZUFibm9ybWFsEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TrdCommon.TrdEnv), typeof(global::TrdCommon.TrdMarket), typeof(global::TrdCommon.TrdSecMarket), typeof(global::TrdCommon.TrdSide), typeof(global::TrdCommon.OrderType), typeof(global::TrdCommon.OrderStatus), typeof(global::TrdCommon.PositionSide), typeof(global::TrdCommon.ModifyOrderOp), typeof(global::TrdCommon.ReconfirmOrderReason), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TrdCommon.TrdHeader), global::TrdCommon.TrdHeader.Parser, new[]{ "TrdEnv", "AccID", "TrdMarket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TrdCommon.TrdAcc), global::TrdCommon.TrdAcc.Parser, new[]{ "TrdEnv", "AccID", "TrdMarketAuthList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TrdCommon.Funds), global::TrdCommon.Funds.Parser, new[]{ "Power", "TotalAssets", "Cash", "MarketVal", "FrozenCash", "DebtCash", "AvlWithdrawalCash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TrdCommon.Position), global::TrdCommon.Position.Parser, new[]{ "PositionID", "PositionSide", "Code", "Name", "Qty", "CanSellQty", "Price", "CostPrice", "Val", "PlVal", "PlRatio", "SecMarket", "TdPlVal", "TdTrdVal", "TdBuyVal", "TdBuyQty", "TdSellVal", "TdSellQty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TrdCommon.Order), global::TrdCommon.Order.Parser, new[]{ "TrdSide", "OrderType", "OrderStatus", "OrderID", "OrderIDEx", "Code", "Name", "Qty", "Price", "CreateTime", "UpdateTime", "FillQty", "FillAvgPrice", "LastErrMsg", "SecMarket", "CreateTimestamp", "UpdateTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TrdCommon.OrderFill), global::TrdCommon.OrderFill.Parser, new[]{ "TrdSide", "FillID", "FillIDEx", "OrderID", "OrderIDEx", "Code", "Name", "Qty", "Price", "CreateTime", "CounterBrokerID", "CounterBrokerName", "SecMarket", "CreateTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TrdCommon.MaxTrdQtys), global::TrdCommon.MaxTrdQtys.Parser, new[]{ "MaxCashBuy", "MaxCashAndMarginBuy", "MaxPositionSell", "MaxSellShort", "MaxBuyBack" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TrdCommon.TrdFilterConditions), global::TrdCommon.TrdFilterConditions.Parser, new[]{ "CodeList", "IdList", "BeginTime", "EndTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///交易环境
  /// </summary>
  public enum TrdEnv {
    /// <summary>
    ///仿真环境(模拟环境)
    /// </summary>
    [pbr::OriginalName("TrdEnv_Simulate")] Simulate = 0,
    /// <summary>
    ///真实环境
    /// </summary>
    [pbr::OriginalName("TrdEnv_Real")] Real = 1,
  }

  /// <summary>
  ///交易市场，是大的市场，不是具体品种
  /// </summary>
  public enum TrdMarket {
    /// <summary>
    ///未知市场
    /// </summary>
    [pbr::OriginalName("TrdMarket_Unknown")] Unknown = 0,
    /// <summary>
    ///香港市场
    /// </summary>
    [pbr::OriginalName("TrdMarket_HK")] Hk = 1,
    /// <summary>
    ///美国市场
    /// </summary>
    [pbr::OriginalName("TrdMarket_US")] Us = 2,
    /// <summary>
    ///大陆市场
    /// </summary>
    [pbr::OriginalName("TrdMarket_CN")] Cn = 3,
    /// <summary>
    ///香港A股通市场
    /// </summary>
    [pbr::OriginalName("TrdMarket_HKCC")] Hkcc = 4,
  }

  /// <summary>
  ///可交易证券所属市场，目前主要是区分A股的沪市和深市，香港和美国暂不需要细分
  /// </summary>
  public enum TrdSecMarket {
    /// <summary>
    ///未知市场
    /// </summary>
    [pbr::OriginalName("TrdSecMarket_Unknown")] Unknown = 0,
    /// <summary>
    ///香港的(正股、窝轮等)
    /// </summary>
    [pbr::OriginalName("TrdSecMarket_HK")] Hk = 1,
    /// <summary>
    ///美国的(正股、期权等)
    /// </summary>
    [pbr::OriginalName("TrdSecMarket_US")] Us = 2,
    /// <summary>
    ///沪市的(正股)
    /// </summary>
    [pbr::OriginalName("TrdSecMarket_CN_SH")] CnSh = 31,
    /// <summary>
    ///深市的(正股)
    /// </summary>
    [pbr::OriginalName("TrdSecMarket_CN_SZ")] CnSz = 32,
  }

  /// <summary>
  ///交易方向
  /// </summary>
  public enum TrdSide {
    /// <summary>
    ///客户端下单只传Buy或Sell即可，SellShort是美股订单时服务器返回有此方向，BuyBack目前不存在，但也不排除服务器会传
    /// </summary>
    [pbr::OriginalName("TrdSide_Unknown")] Unknown = 0,
    /// <summary>
    ///买入
    /// </summary>
    [pbr::OriginalName("TrdSide_Buy")] Buy = 1,
    /// <summary>
    ///卖出
    /// </summary>
    [pbr::OriginalName("TrdSide_Sell")] Sell = 2,
    /// <summary>
    ///卖空
    /// </summary>
    [pbr::OriginalName("TrdSide_SellShort")] SellShort = 3,
    /// <summary>
    ///买回
    /// </summary>
    [pbr::OriginalName("TrdSide_BuyBack")] BuyBack = 4,
  }

  /// <summary>
  ///订单类型
  /// </summary>
  public enum OrderType {
    /// <summary>
    ///未知类型
    /// </summary>
    [pbr::OriginalName("OrderType_Unknown")] Unknown = 0,
    /// <summary>
    ///普通订单(港股的增强限价订单、A股的限价委托、美股的限价订单)
    /// </summary>
    [pbr::OriginalName("OrderType_Normal")] Normal = 1,
    /// <summary>
    ///市价订单(目前仅美股)
    /// </summary>
    [pbr::OriginalName("OrderType_Market")] Market = 2,
    /// <summary>
    ///绝对限价订单(目前仅港股)，只有价格完全匹配才成交，比如你下价格为5元的买单，卖单价格必须也要是5元才能成交，低于5元也不能成交。卖出同理
    /// </summary>
    [pbr::OriginalName("OrderType_AbsoluteLimit")] AbsoluteLimit = 5,
    /// <summary>
    ///竞价订单(目前仅港股)，A股的早盘竞价订单类型不变还是OrderType_Normal
    /// </summary>
    [pbr::OriginalName("OrderType_Auction")] Auction = 6,
    /// <summary>
    ///竞价限价订单(目前仅港股)
    /// </summary>
    [pbr::OriginalName("OrderType_AuctionLimit")] AuctionLimit = 7,
    /// <summary>
    ///特别限价订单(目前仅港股)，成交规则同增强限价订单，且部分成交后，交易所自动撤销订单
    /// </summary>
    [pbr::OriginalName("OrderType_SpecialLimit")] SpecialLimit = 8,
  }

  /// <summary>
  ///订单状态
  /// </summary>
  public enum OrderStatus {
    /// <summary>
    ///未提交
    /// </summary>
    [pbr::OriginalName("OrderStatus_Unsubmitted")] Unsubmitted = 0,
    /// <summary>
    ///未知状态
    /// </summary>
    [pbr::OriginalName("OrderStatus_Unknown")] Unknown = -1,
    /// <summary>
    ///等待提交
    /// </summary>
    [pbr::OriginalName("OrderStatus_WaitingSubmit")] WaitingSubmit = 1,
    /// <summary>
    ///提交中
    /// </summary>
    [pbr::OriginalName("OrderStatus_Submitting")] Submitting = 2,
    /// <summary>
    ///提交失败，下单失败
    /// </summary>
    [pbr::OriginalName("OrderStatus_SubmitFailed")] SubmitFailed = 3,
    /// <summary>
    ///处理超时，结果未知
    /// </summary>
    [pbr::OriginalName("OrderStatus_TimeOut")] TimeOut = 4,
    /// <summary>
    ///已提交，等待成交
    /// </summary>
    [pbr::OriginalName("OrderStatus_Submitted")] Submitted = 5,
    /// <summary>
    ///部分成交
    /// </summary>
    [pbr::OriginalName("OrderStatus_Filled_Part")] FilledPart = 10,
    /// <summary>
    ///全部已成
    /// </summary>
    [pbr::OriginalName("OrderStatus_Filled_All")] FilledAll = 11,
    /// <summary>
    ///正在撤单_部分(部分已成交，正在撤销剩余部分)
    /// </summary>
    [pbr::OriginalName("OrderStatus_Cancelling_Part")] CancellingPart = 12,
    /// <summary>
    ///正在撤单_全部
    /// </summary>
    [pbr::OriginalName("OrderStatus_Cancelling_All")] CancellingAll = 13,
    /// <summary>
    ///部分成交，剩余部分已撤单
    /// </summary>
    [pbr::OriginalName("OrderStatus_Cancelled_Part")] CancelledPart = 14,
    /// <summary>
    ///全部已撤单，无成交
    /// </summary>
    [pbr::OriginalName("OrderStatus_Cancelled_All")] CancelledAll = 15,
    /// <summary>
    ///下单失败，服务拒绝
    /// </summary>
    [pbr::OriginalName("OrderStatus_Failed")] Failed = 21,
    /// <summary>
    ///已失效
    /// </summary>
    [pbr::OriginalName("OrderStatus_Disabled")] Disabled = 22,
    /// <summary>
    ///已删除，无成交的订单才能删除
    /// </summary>
    [pbr::OriginalName("OrderStatus_Deleted")] Deleted = 23,
  }

  /// <summary>
  ///持仓方向类型
  /// </summary>
  public enum PositionSide {
    /// <summary>
    ///多仓，默认情况是多仓
    /// </summary>
    [pbr::OriginalName("PositionSide_Long")] Long = 0,
    /// <summary>
    ///未知方向
    /// </summary>
    [pbr::OriginalName("PositionSide_Unknown")] Unknown = -1,
    /// <summary>
    ///空仓
    /// </summary>
    [pbr::OriginalName("PositionSide_Short")] Short = 1,
  }

  /// <summary>
  ///修改订单的操作类型
  /// </summary>
  public enum ModifyOrderOp {
    /// <summary>
    ///港股支持全部操作，美股目前仅支持ModifyOrderOp_Normal和ModifyOrderOp_Cancel
    /// </summary>
    [pbr::OriginalName("ModifyOrderOp_Unknown")] Unknown = 0,
    /// <summary>
    ///修改订单的价格、数量等，即以前的改单
    /// </summary>
    [pbr::OriginalName("ModifyOrderOp_Normal")] Normal = 1,
    /// <summary>
    ///撤单
    /// </summary>
    [pbr::OriginalName("ModifyOrderOp_Cancel")] Cancel = 2,
    /// <summary>
    ///失效
    /// </summary>
    [pbr::OriginalName("ModifyOrderOp_Disable")] Disable = 3,
    /// <summary>
    ///生效
    /// </summary>
    [pbr::OriginalName("ModifyOrderOp_Enable")] Enable = 4,
    /// <summary>
    ///删除
    /// </summary>
    [pbr::OriginalName("ModifyOrderOp_Delete")] Delete = 5,
  }

  /// <summary>
  ///需要再次确认订单的原因枚举
  /// </summary>
  public enum ReconfirmOrderReason {
    /// <summary>
    ///未知原因
    /// </summary>
    [pbr::OriginalName("ReconfirmOrderReason_Unknown")] Unknown = 0,
    /// <summary>
    ///订单数量太大，确认继续下单并否拆分成多个小订单
    /// </summary>
    [pbr::OriginalName("ReconfirmOrderReason_QtyTooLarge")] QtyTooLarge = 1,
    /// <summary>
    ///价格异常，偏离当前价太大，确认继续下单
    /// </summary>
    [pbr::OriginalName("ReconfirmOrderReason_PriceAbnormal")] PriceAbnormal = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///交易协议公共参数头
  /// </summary>
  public sealed partial class TrdHeader : pb::IMessage<TrdHeader> {
    private static readonly pb::MessageParser<TrdHeader> _parser = new pb::MessageParser<TrdHeader>(() => new TrdHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrdHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TrdCommon.TrdCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrdHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrdHeader(TrdHeader other) : this() {
      trdEnv_ = other.trdEnv_;
      accID_ = other.accID_;
      trdMarket_ = other.trdMarket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrdHeader Clone() {
      return new TrdHeader(this);
    }

    /// <summary>Field number for the "trdEnv" field.</summary>
    public const int TrdEnvFieldNumber = 1;
    private int trdEnv_;
    /// <summary>
    ///交易环境, 参见TrdEnv的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrdEnv {
      get { return trdEnv_; }
      set {
        trdEnv_ = value;
      }
    }

    /// <summary>Field number for the "accID" field.</summary>
    public const int AccIDFieldNumber = 2;
    private ulong accID_;
    /// <summary>
    ///业务账号, 业务账号与交易环境、市场权限需要匹配，否则会返回错误
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AccID {
      get { return accID_; }
      set {
        accID_ = value;
      }
    }

    /// <summary>Field number for the "trdMarket" field.</summary>
    public const int TrdMarketFieldNumber = 3;
    private int trdMarket_;
    /// <summary>
    ///交易市场, 参见TrdMarket的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrdMarket {
      get { return trdMarket_; }
      set {
        trdMarket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrdHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrdHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrdEnv != other.TrdEnv) return false;
      if (AccID != other.AccID) return false;
      if (TrdMarket != other.TrdMarket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TrdEnv != 0) hash ^= TrdEnv.GetHashCode();
      if (AccID != 0UL) hash ^= AccID.GetHashCode();
      if (TrdMarket != 0) hash ^= TrdMarket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrdEnv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrdEnv);
      }
      if (AccID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AccID);
      }
      if (TrdMarket != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TrdMarket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TrdEnv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrdEnv);
      }
      if (AccID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccID);
      }
      if (TrdMarket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrdMarket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrdHeader other) {
      if (other == null) {
        return;
      }
      if (other.TrdEnv != 0) {
        TrdEnv = other.TrdEnv;
      }
      if (other.AccID != 0UL) {
        AccID = other.AccID;
      }
      if (other.TrdMarket != 0) {
        TrdMarket = other.TrdMarket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrdEnv = input.ReadInt32();
            break;
          }
          case 16: {
            AccID = input.ReadUInt64();
            break;
          }
          case 24: {
            TrdMarket = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///交易业务账户结构
  /// </summary>
  public sealed partial class TrdAcc : pb::IMessage<TrdAcc> {
    private static readonly pb::MessageParser<TrdAcc> _parser = new pb::MessageParser<TrdAcc>(() => new TrdAcc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrdAcc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TrdCommon.TrdCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrdAcc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrdAcc(TrdAcc other) : this() {
      trdEnv_ = other.trdEnv_;
      accID_ = other.accID_;
      trdMarketAuthList_ = other.trdMarketAuthList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrdAcc Clone() {
      return new TrdAcc(this);
    }

    /// <summary>Field number for the "trdEnv" field.</summary>
    public const int TrdEnvFieldNumber = 1;
    private int trdEnv_;
    /// <summary>
    ///交易环境，参见TrdEnv的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrdEnv {
      get { return trdEnv_; }
      set {
        trdEnv_ = value;
      }
    }

    /// <summary>Field number for the "accID" field.</summary>
    public const int AccIDFieldNumber = 2;
    private ulong accID_;
    /// <summary>
    ///业务账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AccID {
      get { return accID_; }
      set {
        accID_ = value;
      }
    }

    /// <summary>Field number for the "trdMarketAuthList" field.</summary>
    public const int TrdMarketAuthListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_trdMarketAuthList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> trdMarketAuthList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///业务账户支持的交易市场权限，即此账户能交易那些市场, 可拥有多个交易市场权限，目前仅单个，取值参见TrdMarket的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TrdMarketAuthList {
      get { return trdMarketAuthList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrdAcc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrdAcc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrdEnv != other.TrdEnv) return false;
      if (AccID != other.AccID) return false;
      if(!trdMarketAuthList_.Equals(other.trdMarketAuthList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TrdEnv != 0) hash ^= TrdEnv.GetHashCode();
      if (AccID != 0UL) hash ^= AccID.GetHashCode();
      hash ^= trdMarketAuthList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrdEnv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrdEnv);
      }
      if (AccID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AccID);
      }
      trdMarketAuthList_.WriteTo(output, _repeated_trdMarketAuthList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TrdEnv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrdEnv);
      }
      if (AccID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccID);
      }
      size += trdMarketAuthList_.CalculateSize(_repeated_trdMarketAuthList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrdAcc other) {
      if (other == null) {
        return;
      }
      if (other.TrdEnv != 0) {
        TrdEnv = other.TrdEnv;
      }
      if (other.AccID != 0UL) {
        AccID = other.AccID;
      }
      trdMarketAuthList_.Add(other.trdMarketAuthList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrdEnv = input.ReadInt32();
            break;
          }
          case 16: {
            AccID = input.ReadUInt64();
            break;
          }
          case 26:
          case 24: {
            trdMarketAuthList_.AddEntriesFrom(input, _repeated_trdMarketAuthList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///账户资金结构
  /// </summary>
  public sealed partial class Funds : pb::IMessage<Funds> {
    private static readonly pb::MessageParser<Funds> _parser = new pb::MessageParser<Funds>(() => new Funds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Funds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TrdCommon.TrdCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Funds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Funds(Funds other) : this() {
      power_ = other.power_;
      totalAssets_ = other.totalAssets_;
      cash_ = other.cash_;
      marketVal_ = other.marketVal_;
      frozenCash_ = other.frozenCash_;
      debtCash_ = other.debtCash_;
      avlWithdrawalCash_ = other.avlWithdrawalCash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Funds Clone() {
      return new Funds(this);
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 1;
    private double power_;
    /// <summary>
    ///购买力，3位精度，下同
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "totalAssets" field.</summary>
    public const int TotalAssetsFieldNumber = 2;
    private double totalAssets_;
    /// <summary>
    ///资产净值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TotalAssets {
      get { return totalAssets_; }
      set {
        totalAssets_ = value;
      }
    }

    /// <summary>Field number for the "cash" field.</summary>
    public const int CashFieldNumber = 3;
    private double cash_;
    /// <summary>
    ///现金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cash {
      get { return cash_; }
      set {
        cash_ = value;
      }
    }

    /// <summary>Field number for the "marketVal" field.</summary>
    public const int MarketValFieldNumber = 4;
    private double marketVal_;
    /// <summary>
    ///证券市值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MarketVal {
      get { return marketVal_; }
      set {
        marketVal_ = value;
      }
    }

    /// <summary>Field number for the "frozenCash" field.</summary>
    public const int FrozenCashFieldNumber = 5;
    private double frozenCash_;
    /// <summary>
    ///冻结金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FrozenCash {
      get { return frozenCash_; }
      set {
        frozenCash_ = value;
      }
    }

    /// <summary>Field number for the "debtCash" field.</summary>
    public const int DebtCashFieldNumber = 6;
    private double debtCash_;
    /// <summary>
    ///欠款金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DebtCash {
      get { return debtCash_; }
      set {
        debtCash_ = value;
      }
    }

    /// <summary>Field number for the "avlWithdrawalCash" field.</summary>
    public const int AvlWithdrawalCashFieldNumber = 7;
    private double avlWithdrawalCash_;
    /// <summary>
    ///可提金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvlWithdrawalCash {
      get { return avlWithdrawalCash_; }
      set {
        avlWithdrawalCash_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Funds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Funds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Power, other.Power)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalAssets, other.TotalAssets)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Cash, other.Cash)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarketVal, other.MarketVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FrozenCash, other.FrozenCash)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DebtCash, other.DebtCash)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvlWithdrawalCash, other.AvlWithdrawalCash)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Power != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Power);
      if (TotalAssets != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalAssets);
      if (Cash != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Cash);
      if (MarketVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarketVal);
      if (FrozenCash != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FrozenCash);
      if (DebtCash != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DebtCash);
      if (AvlWithdrawalCash != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvlWithdrawalCash);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Power != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Power);
      }
      if (TotalAssets != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalAssets);
      }
      if (Cash != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Cash);
      }
      if (MarketVal != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MarketVal);
      }
      if (FrozenCash != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(FrozenCash);
      }
      if (DebtCash != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(DebtCash);
      }
      if (AvlWithdrawalCash != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(AvlWithdrawalCash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Power != 0D) {
        size += 1 + 8;
      }
      if (TotalAssets != 0D) {
        size += 1 + 8;
      }
      if (Cash != 0D) {
        size += 1 + 8;
      }
      if (MarketVal != 0D) {
        size += 1 + 8;
      }
      if (FrozenCash != 0D) {
        size += 1 + 8;
      }
      if (DebtCash != 0D) {
        size += 1 + 8;
      }
      if (AvlWithdrawalCash != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Funds other) {
      if (other == null) {
        return;
      }
      if (other.Power != 0D) {
        Power = other.Power;
      }
      if (other.TotalAssets != 0D) {
        TotalAssets = other.TotalAssets;
      }
      if (other.Cash != 0D) {
        Cash = other.Cash;
      }
      if (other.MarketVal != 0D) {
        MarketVal = other.MarketVal;
      }
      if (other.FrozenCash != 0D) {
        FrozenCash = other.FrozenCash;
      }
      if (other.DebtCash != 0D) {
        DebtCash = other.DebtCash;
      }
      if (other.AvlWithdrawalCash != 0D) {
        AvlWithdrawalCash = other.AvlWithdrawalCash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Power = input.ReadDouble();
            break;
          }
          case 17: {
            TotalAssets = input.ReadDouble();
            break;
          }
          case 25: {
            Cash = input.ReadDouble();
            break;
          }
          case 33: {
            MarketVal = input.ReadDouble();
            break;
          }
          case 41: {
            FrozenCash = input.ReadDouble();
            break;
          }
          case 49: {
            DebtCash = input.ReadDouble();
            break;
          }
          case 57: {
            AvlWithdrawalCash = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///账户持仓结构
  /// </summary>
  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TrdCommon.TrdCommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      positionID_ = other.positionID_;
      positionSide_ = other.positionSide_;
      code_ = other.code_;
      name_ = other.name_;
      qty_ = other.qty_;
      canSellQty_ = other.canSellQty_;
      price_ = other.price_;
      costPrice_ = other.costPrice_;
      val_ = other.val_;
      plVal_ = other.plVal_;
      plRatio_ = other.plRatio_;
      secMarket_ = other.secMarket_;
      tdPlVal_ = other.tdPlVal_;
      tdTrdVal_ = other.tdTrdVal_;
      tdBuyVal_ = other.tdBuyVal_;
      tdBuyQty_ = other.tdBuyQty_;
      tdSellVal_ = other.tdSellVal_;
      tdSellQty_ = other.tdSellQty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "positionID" field.</summary>
    public const int PositionIDFieldNumber = 1;
    private ulong positionID_;
    /// <summary>
    ///持仓ID，一条持仓的唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PositionID {
      get { return positionID_; }
      set {
        positionID_ = value;
      }
    }

    /// <summary>Field number for the "positionSide" field.</summary>
    public const int PositionSideFieldNumber = 2;
    private int positionSide_;
    /// <summary>
    ///持仓方向，参见PositionSide的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PositionSide {
      get { return positionSide_; }
      set {
        positionSide_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private string code_ = "";
    /// <summary>
    ///代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 5;
    private double qty_;
    /// <summary>
    ///持有数量，2位精度，期权单位是"张"，下同
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "canSellQty" field.</summary>
    public const int CanSellQtyFieldNumber = 6;
    private double canSellQty_;
    /// <summary>
    ///可卖数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CanSellQty {
      get { return canSellQty_; }
      set {
        canSellQty_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 7;
    private double price_;
    /// <summary>
    ///市价，3位精度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "costPrice" field.</summary>
    public const int CostPriceFieldNumber = 8;
    private double costPrice_;
    /// <summary>
    ///成本价，无精度限制，如果没传，代表此时此值无效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CostPrice {
      get { return costPrice_; }
      set {
        costPrice_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 9;
    private double val_;
    /// <summary>
    ///市值，3位精度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    /// <summary>Field number for the "plVal" field.</summary>
    public const int PlValFieldNumber = 10;
    private double plVal_;
    /// <summary>
    ///盈亏金额，3位精度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PlVal {
      get { return plVal_; }
      set {
        plVal_ = value;
      }
    }

    /// <summary>Field number for the "plRatio" field.</summary>
    public const int PlRatioFieldNumber = 11;
    private double plRatio_;
    /// <summary>
    ///盈亏比例，无精度限制，如果没传，代表此时此值无效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PlRatio {
      get { return plRatio_; }
      set {
        plRatio_ = value;
      }
    }

    /// <summary>Field number for the "secMarket" field.</summary>
    public const int SecMarketFieldNumber = 12;
    private int secMarket_;
    /// <summary>
    ///（2018/07/17新增）证券所属市场，参见TrdSecMarket的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecMarket {
      get { return secMarket_; }
      set {
        secMarket_ = value;
      }
    }

    /// <summary>Field number for the "td_plVal" field.</summary>
    public const int TdPlValFieldNumber = 21;
    private double tdPlVal_;
    /// <summary>
    ///以下是此持仓今日统计
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TdPlVal {
      get { return tdPlVal_; }
      set {
        tdPlVal_ = value;
      }
    }

    /// <summary>Field number for the "td_trdVal" field.</summary>
    public const int TdTrdValFieldNumber = 22;
    private double tdTrdVal_;
    /// <summary>
    ///今日交易额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TdTrdVal {
      get { return tdTrdVal_; }
      set {
        tdTrdVal_ = value;
      }
    }

    /// <summary>Field number for the "td_buyVal" field.</summary>
    public const int TdBuyValFieldNumber = 23;
    private double tdBuyVal_;
    /// <summary>
    ///今日买入总额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TdBuyVal {
      get { return tdBuyVal_; }
      set {
        tdBuyVal_ = value;
      }
    }

    /// <summary>Field number for the "td_buyQty" field.</summary>
    public const int TdBuyQtyFieldNumber = 24;
    private double tdBuyQty_;
    /// <summary>
    ///今日买入总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TdBuyQty {
      get { return tdBuyQty_; }
      set {
        tdBuyQty_ = value;
      }
    }

    /// <summary>Field number for the "td_sellVal" field.</summary>
    public const int TdSellValFieldNumber = 25;
    private double tdSellVal_;
    /// <summary>
    ///今日卖出总额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TdSellVal {
      get { return tdSellVal_; }
      set {
        tdSellVal_ = value;
      }
    }

    /// <summary>Field number for the "td_sellQty" field.</summary>
    public const int TdSellQtyFieldNumber = 26;
    private double tdSellQty_;
    /// <summary>
    ///今日卖出总量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TdSellQty {
      get { return tdSellQty_; }
      set {
        tdSellQty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PositionID != other.PositionID) return false;
      if (PositionSide != other.PositionSide) return false;
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Qty, other.Qty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CanSellQty, other.CanSellQty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CostPrice, other.CostPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Val, other.Val)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlVal, other.PlVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlRatio, other.PlRatio)) return false;
      if (SecMarket != other.SecMarket) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TdPlVal, other.TdPlVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TdTrdVal, other.TdTrdVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TdBuyVal, other.TdBuyVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TdBuyQty, other.TdBuyQty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TdSellVal, other.TdSellVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TdSellQty, other.TdSellQty)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PositionID != 0UL) hash ^= PositionID.GetHashCode();
      if (PositionSide != 0) hash ^= PositionSide.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Qty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Qty);
      if (CanSellQty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CanSellQty);
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (CostPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CostPrice);
      if (Val != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Val);
      if (PlVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlVal);
      if (PlRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlRatio);
      if (SecMarket != 0) hash ^= SecMarket.GetHashCode();
      if (TdPlVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TdPlVal);
      if (TdTrdVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TdTrdVal);
      if (TdBuyVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TdBuyVal);
      if (TdBuyQty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TdBuyQty);
      if (TdSellVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TdSellVal);
      if (TdSellQty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TdSellQty);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PositionID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PositionID);
      }
      if (PositionSide != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PositionSide);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Code);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Qty != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Qty);
      }
      if (CanSellQty != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CanSellQty);
      }
      if (Price != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Price);
      }
      if (CostPrice != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(CostPrice);
      }
      if (Val != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Val);
      }
      if (PlVal != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(PlVal);
      }
      if (PlRatio != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(PlRatio);
      }
      if (SecMarket != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SecMarket);
      }
      if (TdPlVal != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(TdPlVal);
      }
      if (TdTrdVal != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(TdTrdVal);
      }
      if (TdBuyVal != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(TdBuyVal);
      }
      if (TdBuyQty != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(TdBuyQty);
      }
      if (TdSellVal != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(TdSellVal);
      }
      if (TdSellQty != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(TdSellQty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PositionID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PositionID);
      }
      if (PositionSide != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionSide);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Qty != 0D) {
        size += 1 + 8;
      }
      if (CanSellQty != 0D) {
        size += 1 + 8;
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (CostPrice != 0D) {
        size += 1 + 8;
      }
      if (Val != 0D) {
        size += 1 + 8;
      }
      if (PlVal != 0D) {
        size += 1 + 8;
      }
      if (PlRatio != 0D) {
        size += 1 + 8;
      }
      if (SecMarket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecMarket);
      }
      if (TdPlVal != 0D) {
        size += 2 + 8;
      }
      if (TdTrdVal != 0D) {
        size += 2 + 8;
      }
      if (TdBuyVal != 0D) {
        size += 2 + 8;
      }
      if (TdBuyQty != 0D) {
        size += 2 + 8;
      }
      if (TdSellVal != 0D) {
        size += 2 + 8;
      }
      if (TdSellQty != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.PositionID != 0UL) {
        PositionID = other.PositionID;
      }
      if (other.PositionSide != 0) {
        PositionSide = other.PositionSide;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Qty != 0D) {
        Qty = other.Qty;
      }
      if (other.CanSellQty != 0D) {
        CanSellQty = other.CanSellQty;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.CostPrice != 0D) {
        CostPrice = other.CostPrice;
      }
      if (other.Val != 0D) {
        Val = other.Val;
      }
      if (other.PlVal != 0D) {
        PlVal = other.PlVal;
      }
      if (other.PlRatio != 0D) {
        PlRatio = other.PlRatio;
      }
      if (other.SecMarket != 0) {
        SecMarket = other.SecMarket;
      }
      if (other.TdPlVal != 0D) {
        TdPlVal = other.TdPlVal;
      }
      if (other.TdTrdVal != 0D) {
        TdTrdVal = other.TdTrdVal;
      }
      if (other.TdBuyVal != 0D) {
        TdBuyVal = other.TdBuyVal;
      }
      if (other.TdBuyQty != 0D) {
        TdBuyQty = other.TdBuyQty;
      }
      if (other.TdSellVal != 0D) {
        TdSellVal = other.TdSellVal;
      }
      if (other.TdSellQty != 0D) {
        TdSellQty = other.TdSellQty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PositionID = input.ReadUInt64();
            break;
          }
          case 16: {
            PositionSide = input.ReadInt32();
            break;
          }
          case 26: {
            Code = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 41: {
            Qty = input.ReadDouble();
            break;
          }
          case 49: {
            CanSellQty = input.ReadDouble();
            break;
          }
          case 57: {
            Price = input.ReadDouble();
            break;
          }
          case 65: {
            CostPrice = input.ReadDouble();
            break;
          }
          case 73: {
            Val = input.ReadDouble();
            break;
          }
          case 81: {
            PlVal = input.ReadDouble();
            break;
          }
          case 89: {
            PlRatio = input.ReadDouble();
            break;
          }
          case 96: {
            SecMarket = input.ReadInt32();
            break;
          }
          case 169: {
            TdPlVal = input.ReadDouble();
            break;
          }
          case 177: {
            TdTrdVal = input.ReadDouble();
            break;
          }
          case 185: {
            TdBuyVal = input.ReadDouble();
            break;
          }
          case 193: {
            TdBuyQty = input.ReadDouble();
            break;
          }
          case 201: {
            TdSellVal = input.ReadDouble();
            break;
          }
          case 209: {
            TdSellQty = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///订单结构
  /// </summary>
  public sealed partial class Order : pb::IMessage<Order> {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TrdCommon.TrdCommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order(Order other) : this() {
      trdSide_ = other.trdSide_;
      orderType_ = other.orderType_;
      orderStatus_ = other.orderStatus_;
      orderID_ = other.orderID_;
      orderIDEx_ = other.orderIDEx_;
      code_ = other.code_;
      name_ = other.name_;
      qty_ = other.qty_;
      price_ = other.price_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
      fillQty_ = other.fillQty_;
      fillAvgPrice_ = other.fillAvgPrice_;
      lastErrMsg_ = other.lastErrMsg_;
      secMarket_ = other.secMarket_;
      createTimestamp_ = other.createTimestamp_;
      updateTimestamp_ = other.updateTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order Clone() {
      return new Order(this);
    }

    /// <summary>Field number for the "trdSide" field.</summary>
    public const int TrdSideFieldNumber = 1;
    private int trdSide_;
    /// <summary>
    ///交易方向, 参见TrdSide的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrdSide {
      get { return trdSide_; }
      set {
        trdSide_ = value;
      }
    }

    /// <summary>Field number for the "orderType" field.</summary>
    public const int OrderTypeFieldNumber = 2;
    private int orderType_;
    /// <summary>
    ///订单类型, 参见OrderType的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 3;
    private int orderStatus_;
    /// <summary>
    ///订单状态, 参见OrderStatus的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "orderID" field.</summary>
    public const int OrderIDFieldNumber = 4;
    private ulong orderID_;
    /// <summary>
    ///订单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OrderID {
      get { return orderID_; }
      set {
        orderID_ = value;
      }
    }

    /// <summary>Field number for the "orderIDEx" field.</summary>
    public const int OrderIDExFieldNumber = 5;
    private string orderIDEx_ = "";
    /// <summary>
    ///扩展订单号(仅查问题时备用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderIDEx {
      get { return orderIDEx_; }
      set {
        orderIDEx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 6;
    private string code_ = "";
    /// <summary>
    ///代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 8;
    private double qty_;
    /// <summary>
    ///订单数量，2位精度，期权单位是"张"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 9;
    private double price_;
    /// <summary>
    ///订单价格，3位精度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 10;
    private string createTime_ = "";
    /// <summary>
    ///创建时间，严格按YYYY-MM-DD HH:MM:SS或YYYY-MM-DD HH:MM:SS.MS格式传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 11;
    private string updateTime_ = "";
    /// <summary>
    ///最后更新时间，严格按YYYY-MM-DD HH:MM:SS或YYYY-MM-DD HH:MM:SS.MS格式传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fillQty" field.</summary>
    public const int FillQtyFieldNumber = 12;
    private double fillQty_;
    /// <summary>
    ///成交数量，2位精度，期权单位是"张"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FillQty {
      get { return fillQty_; }
      set {
        fillQty_ = value;
      }
    }

    /// <summary>Field number for the "fillAvgPrice" field.</summary>
    public const int FillAvgPriceFieldNumber = 13;
    private double fillAvgPrice_;
    /// <summary>
    ///成交均价，无精度限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FillAvgPrice {
      get { return fillAvgPrice_; }
      set {
        fillAvgPrice_ = value;
      }
    }

    /// <summary>Field number for the "lastErrMsg" field.</summary>
    public const int LastErrMsgFieldNumber = 14;
    private string lastErrMsg_ = "";
    /// <summary>
    ///最后的错误描述，如果有错误，会有此描述最后一次错误的原因，无错误为空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastErrMsg {
      get { return lastErrMsg_; }
      set {
        lastErrMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secMarket" field.</summary>
    public const int SecMarketFieldNumber = 15;
    private int secMarket_;
    /// <summary>
    ///（2018/07/17新增）证券所属市场，参见TrdSecMarket的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecMarket {
      get { return secMarket_; }
      set {
        secMarket_ = value;
      }
    }

    /// <summary>Field number for the "createTimestamp" field.</summary>
    public const int CreateTimestampFieldNumber = 16;
    private double createTimestamp_;
    /// <summary>
    ///创建时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CreateTimestamp {
      get { return createTimestamp_; }
      set {
        createTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "updateTimestamp" field.</summary>
    public const int UpdateTimestampFieldNumber = 17;
    private double updateTimestamp_;
    /// <summary>
    ///最后更新时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpdateTimestamp {
      get { return updateTimestamp_; }
      set {
        updateTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrdSide != other.TrdSide) return false;
      if (OrderType != other.OrderType) return false;
      if (OrderStatus != other.OrderStatus) return false;
      if (OrderID != other.OrderID) return false;
      if (OrderIDEx != other.OrderIDEx) return false;
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Qty, other.Qty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillQty, other.FillQty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FillAvgPrice, other.FillAvgPrice)) return false;
      if (LastErrMsg != other.LastErrMsg) return false;
      if (SecMarket != other.SecMarket) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CreateTimestamp, other.CreateTimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpdateTimestamp, other.UpdateTimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TrdSide != 0) hash ^= TrdSide.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (OrderID != 0UL) hash ^= OrderID.GetHashCode();
      if (OrderIDEx.Length != 0) hash ^= OrderIDEx.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Qty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Qty);
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      if (FillQty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillQty);
      if (FillAvgPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FillAvgPrice);
      if (LastErrMsg.Length != 0) hash ^= LastErrMsg.GetHashCode();
      if (SecMarket != 0) hash ^= SecMarket.GetHashCode();
      if (CreateTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CreateTimestamp);
      if (UpdateTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpdateTimestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrdSide != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrdSide);
      }
      if (OrderType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderType);
      }
      if (OrderStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OrderStatus);
      }
      if (OrderID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(OrderID);
      }
      if (OrderIDEx.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderIDEx);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Code);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (Qty != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Qty);
      }
      if (Price != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Price);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UpdateTime);
      }
      if (FillQty != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(FillQty);
      }
      if (FillAvgPrice != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(FillAvgPrice);
      }
      if (LastErrMsg.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(LastErrMsg);
      }
      if (SecMarket != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SecMarket);
      }
      if (CreateTimestamp != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(CreateTimestamp);
      }
      if (UpdateTimestamp != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(UpdateTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TrdSide != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrdSide);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      if (OrderID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OrderID);
      }
      if (OrderIDEx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderIDEx);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Qty != 0D) {
        size += 1 + 8;
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      if (FillQty != 0D) {
        size += 1 + 8;
      }
      if (FillAvgPrice != 0D) {
        size += 1 + 8;
      }
      if (LastErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastErrMsg);
      }
      if (SecMarket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecMarket);
      }
      if (CreateTimestamp != 0D) {
        size += 2 + 8;
      }
      if (UpdateTimestamp != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Order other) {
      if (other == null) {
        return;
      }
      if (other.TrdSide != 0) {
        TrdSide = other.TrdSide;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.OrderID != 0UL) {
        OrderID = other.OrderID;
      }
      if (other.OrderIDEx.Length != 0) {
        OrderIDEx = other.OrderIDEx;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Qty != 0D) {
        Qty = other.Qty;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
      if (other.FillQty != 0D) {
        FillQty = other.FillQty;
      }
      if (other.FillAvgPrice != 0D) {
        FillAvgPrice = other.FillAvgPrice;
      }
      if (other.LastErrMsg.Length != 0) {
        LastErrMsg = other.LastErrMsg;
      }
      if (other.SecMarket != 0) {
        SecMarket = other.SecMarket;
      }
      if (other.CreateTimestamp != 0D) {
        CreateTimestamp = other.CreateTimestamp;
      }
      if (other.UpdateTimestamp != 0D) {
        UpdateTimestamp = other.UpdateTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrdSide = input.ReadInt32();
            break;
          }
          case 16: {
            OrderType = input.ReadInt32();
            break;
          }
          case 24: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 32: {
            OrderID = input.ReadUInt64();
            break;
          }
          case 42: {
            OrderIDEx = input.ReadString();
            break;
          }
          case 50: {
            Code = input.ReadString();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 65: {
            Qty = input.ReadDouble();
            break;
          }
          case 73: {
            Price = input.ReadDouble();
            break;
          }
          case 82: {
            CreateTime = input.ReadString();
            break;
          }
          case 90: {
            UpdateTime = input.ReadString();
            break;
          }
          case 97: {
            FillQty = input.ReadDouble();
            break;
          }
          case 105: {
            FillAvgPrice = input.ReadDouble();
            break;
          }
          case 114: {
            LastErrMsg = input.ReadString();
            break;
          }
          case 120: {
            SecMarket = input.ReadInt32();
            break;
          }
          case 129: {
            CreateTimestamp = input.ReadDouble();
            break;
          }
          case 137: {
            UpdateTimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///成交结构
  /// </summary>
  public sealed partial class OrderFill : pb::IMessage<OrderFill> {
    private static readonly pb::MessageParser<OrderFill> _parser = new pb::MessageParser<OrderFill>(() => new OrderFill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderFill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TrdCommon.TrdCommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderFill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderFill(OrderFill other) : this() {
      trdSide_ = other.trdSide_;
      fillID_ = other.fillID_;
      fillIDEx_ = other.fillIDEx_;
      orderID_ = other.orderID_;
      orderIDEx_ = other.orderIDEx_;
      code_ = other.code_;
      name_ = other.name_;
      qty_ = other.qty_;
      price_ = other.price_;
      createTime_ = other.createTime_;
      counterBrokerID_ = other.counterBrokerID_;
      counterBrokerName_ = other.counterBrokerName_;
      secMarket_ = other.secMarket_;
      createTimestamp_ = other.createTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderFill Clone() {
      return new OrderFill(this);
    }

    /// <summary>Field number for the "trdSide" field.</summary>
    public const int TrdSideFieldNumber = 1;
    private int trdSide_;
    /// <summary>
    ///交易方向, 参见TrdSide的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrdSide {
      get { return trdSide_; }
      set {
        trdSide_ = value;
      }
    }

    /// <summary>Field number for the "fillID" field.</summary>
    public const int FillIDFieldNumber = 2;
    private ulong fillID_;
    /// <summary>
    ///成交号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FillID {
      get { return fillID_; }
      set {
        fillID_ = value;
      }
    }

    /// <summary>Field number for the "fillIDEx" field.</summary>
    public const int FillIDExFieldNumber = 3;
    private string fillIDEx_ = "";
    /// <summary>
    ///扩展成交号(仅查问题时备用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FillIDEx {
      get { return fillIDEx_; }
      set {
        fillIDEx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderID" field.</summary>
    public const int OrderIDFieldNumber = 4;
    private ulong orderID_;
    /// <summary>
    ///订单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OrderID {
      get { return orderID_; }
      set {
        orderID_ = value;
      }
    }

    /// <summary>Field number for the "orderIDEx" field.</summary>
    public const int OrderIDExFieldNumber = 5;
    private string orderIDEx_ = "";
    /// <summary>
    ///扩展订单号(仅查问题时备用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderIDEx {
      get { return orderIDEx_; }
      set {
        orderIDEx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 6;
    private string code_ = "";
    /// <summary>
    ///代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 8;
    private double qty_;
    /// <summary>
    ///成交数量，2位精度，期权单位是"张"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 9;
    private double price_;
    /// <summary>
    ///成交价格，3位精度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 10;
    private string createTime_ = "";
    /// <summary>
    ///创建时间（成交时间），严格按YYYY-MM-DD HH:MM:SS或YYYY-MM-DD HH:MM:SS.MS格式传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "counterBrokerID" field.</summary>
    public const int CounterBrokerIDFieldNumber = 11;
    private int counterBrokerID_;
    /// <summary>
    ///对手经纪号，港股有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CounterBrokerID {
      get { return counterBrokerID_; }
      set {
        counterBrokerID_ = value;
      }
    }

    /// <summary>Field number for the "counterBrokerName" field.</summary>
    public const int CounterBrokerNameFieldNumber = 12;
    private string counterBrokerName_ = "";
    /// <summary>
    ///对手经纪名称，港股有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CounterBrokerName {
      get { return counterBrokerName_; }
      set {
        counterBrokerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secMarket" field.</summary>
    public const int SecMarketFieldNumber = 13;
    private int secMarket_;
    /// <summary>
    ///（2018/07/17新增）证券所属市场，参见TrdSecMarket的枚举定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecMarket {
      get { return secMarket_; }
      set {
        secMarket_ = value;
      }
    }

    /// <summary>Field number for the "createTimestamp" field.</summary>
    public const int CreateTimestampFieldNumber = 14;
    private double createTimestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CreateTimestamp {
      get { return createTimestamp_; }
      set {
        createTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderFill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderFill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrdSide != other.TrdSide) return false;
      if (FillID != other.FillID) return false;
      if (FillIDEx != other.FillIDEx) return false;
      if (OrderID != other.OrderID) return false;
      if (OrderIDEx != other.OrderIDEx) return false;
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Qty, other.Qty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (CreateTime != other.CreateTime) return false;
      if (CounterBrokerID != other.CounterBrokerID) return false;
      if (CounterBrokerName != other.CounterBrokerName) return false;
      if (SecMarket != other.SecMarket) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CreateTimestamp, other.CreateTimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TrdSide != 0) hash ^= TrdSide.GetHashCode();
      if (FillID != 0UL) hash ^= FillID.GetHashCode();
      if (FillIDEx.Length != 0) hash ^= FillIDEx.GetHashCode();
      if (OrderID != 0UL) hash ^= OrderID.GetHashCode();
      if (OrderIDEx.Length != 0) hash ^= OrderIDEx.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Qty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Qty);
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (CounterBrokerID != 0) hash ^= CounterBrokerID.GetHashCode();
      if (CounterBrokerName.Length != 0) hash ^= CounterBrokerName.GetHashCode();
      if (SecMarket != 0) hash ^= SecMarket.GetHashCode();
      if (CreateTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CreateTimestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrdSide != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrdSide);
      }
      if (FillID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FillID);
      }
      if (FillIDEx.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FillIDEx);
      }
      if (OrderID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(OrderID);
      }
      if (OrderIDEx.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderIDEx);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Code);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (Qty != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Qty);
      }
      if (Price != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Price);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CreateTime);
      }
      if (CounterBrokerID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CounterBrokerID);
      }
      if (CounterBrokerName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CounterBrokerName);
      }
      if (SecMarket != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SecMarket);
      }
      if (CreateTimestamp != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(CreateTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TrdSide != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrdSide);
      }
      if (FillID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FillID);
      }
      if (FillIDEx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FillIDEx);
      }
      if (OrderID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OrderID);
      }
      if (OrderIDEx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderIDEx);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Qty != 0D) {
        size += 1 + 8;
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (CounterBrokerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CounterBrokerID);
      }
      if (CounterBrokerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CounterBrokerName);
      }
      if (SecMarket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecMarket);
      }
      if (CreateTimestamp != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderFill other) {
      if (other == null) {
        return;
      }
      if (other.TrdSide != 0) {
        TrdSide = other.TrdSide;
      }
      if (other.FillID != 0UL) {
        FillID = other.FillID;
      }
      if (other.FillIDEx.Length != 0) {
        FillIDEx = other.FillIDEx;
      }
      if (other.OrderID != 0UL) {
        OrderID = other.OrderID;
      }
      if (other.OrderIDEx.Length != 0) {
        OrderIDEx = other.OrderIDEx;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Qty != 0D) {
        Qty = other.Qty;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.CounterBrokerID != 0) {
        CounterBrokerID = other.CounterBrokerID;
      }
      if (other.CounterBrokerName.Length != 0) {
        CounterBrokerName = other.CounterBrokerName;
      }
      if (other.SecMarket != 0) {
        SecMarket = other.SecMarket;
      }
      if (other.CreateTimestamp != 0D) {
        CreateTimestamp = other.CreateTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrdSide = input.ReadInt32();
            break;
          }
          case 16: {
            FillID = input.ReadUInt64();
            break;
          }
          case 26: {
            FillIDEx = input.ReadString();
            break;
          }
          case 32: {
            OrderID = input.ReadUInt64();
            break;
          }
          case 42: {
            OrderIDEx = input.ReadString();
            break;
          }
          case 50: {
            Code = input.ReadString();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 65: {
            Qty = input.ReadDouble();
            break;
          }
          case 73: {
            Price = input.ReadDouble();
            break;
          }
          case 82: {
            CreateTime = input.ReadString();
            break;
          }
          case 88: {
            CounterBrokerID = input.ReadInt32();
            break;
          }
          case 98: {
            CounterBrokerName = input.ReadString();
            break;
          }
          case 104: {
            SecMarket = input.ReadInt32();
            break;
          }
          case 113: {
            CreateTimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///最大可交易数量
  /// </summary>
  public sealed partial class MaxTrdQtys : pb::IMessage<MaxTrdQtys> {
    private static readonly pb::MessageParser<MaxTrdQtys> _parser = new pb::MessageParser<MaxTrdQtys>(() => new MaxTrdQtys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaxTrdQtys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TrdCommon.TrdCommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxTrdQtys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxTrdQtys(MaxTrdQtys other) : this() {
      maxCashBuy_ = other.maxCashBuy_;
      maxCashAndMarginBuy_ = other.maxCashAndMarginBuy_;
      maxPositionSell_ = other.maxPositionSell_;
      maxSellShort_ = other.maxSellShort_;
      maxBuyBack_ = other.maxBuyBack_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxTrdQtys Clone() {
      return new MaxTrdQtys(this);
    }

    /// <summary>Field number for the "maxCashBuy" field.</summary>
    public const int MaxCashBuyFieldNumber = 1;
    private double maxCashBuy_;
    /// <summary>
    ///因目前服务器实现的问题，卖空需要先卖掉持仓才能再卖空，是分开两步卖的，买回来同样是逆向两步；而看多的买是可以现金加融资一起一步买的，请注意这个差异
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxCashBuy {
      get { return maxCashBuy_; }
      set {
        maxCashBuy_ = value;
      }
    }

    /// <summary>Field number for the "maxCashAndMarginBuy" field.</summary>
    public const int MaxCashAndMarginBuyFieldNumber = 2;
    private double maxCashAndMarginBuy_;
    /// <summary>
    ///使用融资，自己的现金 + 融资资金总共的最大可买整手股数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxCashAndMarginBuy {
      get { return maxCashAndMarginBuy_; }
      set {
        maxCashAndMarginBuy_ = value;
      }
    }

    /// <summary>Field number for the "maxPositionSell" field.</summary>
    public const int MaxPositionSellFieldNumber = 3;
    private double maxPositionSell_;
    /// <summary>
    ///不使用融券(卖空)，仅自己的持仓最大可卖整手股数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxPositionSell {
      get { return maxPositionSell_; }
      set {
        maxPositionSell_ = value;
      }
    }

    /// <summary>Field number for the "maxSellShort" field.</summary>
    public const int MaxSellShortFieldNumber = 4;
    private double maxSellShort_;
    /// <summary>
    ///使用融券(卖空)，最大可卖空整手股数，不包括多仓
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxSellShort {
      get { return maxSellShort_; }
      set {
        maxSellShort_ = value;
      }
    }

    /// <summary>Field number for the "maxBuyBack" field.</summary>
    public const int MaxBuyBackFieldNumber = 5;
    private double maxBuyBack_;
    /// <summary>
    ///卖空后，需要买回的最大整手股数。因为卖空后，必须先买回已卖空的股数，还掉股票，才能再继续买多。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxBuyBack {
      get { return maxBuyBack_; }
      set {
        maxBuyBack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaxTrdQtys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaxTrdQtys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxCashBuy, other.MaxCashBuy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxCashAndMarginBuy, other.MaxCashAndMarginBuy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxPositionSell, other.MaxPositionSell)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxSellShort, other.MaxSellShort)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxBuyBack, other.MaxBuyBack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxCashBuy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxCashBuy);
      if (MaxCashAndMarginBuy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxCashAndMarginBuy);
      if (MaxPositionSell != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxPositionSell);
      if (MaxSellShort != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxSellShort);
      if (MaxBuyBack != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxBuyBack);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxCashBuy != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxCashBuy);
      }
      if (MaxCashAndMarginBuy != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MaxCashAndMarginBuy);
      }
      if (MaxPositionSell != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MaxPositionSell);
      }
      if (MaxSellShort != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MaxSellShort);
      }
      if (MaxBuyBack != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MaxBuyBack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxCashBuy != 0D) {
        size += 1 + 8;
      }
      if (MaxCashAndMarginBuy != 0D) {
        size += 1 + 8;
      }
      if (MaxPositionSell != 0D) {
        size += 1 + 8;
      }
      if (MaxSellShort != 0D) {
        size += 1 + 8;
      }
      if (MaxBuyBack != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaxTrdQtys other) {
      if (other == null) {
        return;
      }
      if (other.MaxCashBuy != 0D) {
        MaxCashBuy = other.MaxCashBuy;
      }
      if (other.MaxCashAndMarginBuy != 0D) {
        MaxCashAndMarginBuy = other.MaxCashAndMarginBuy;
      }
      if (other.MaxPositionSell != 0D) {
        MaxPositionSell = other.MaxPositionSell;
      }
      if (other.MaxSellShort != 0D) {
        MaxSellShort = other.MaxSellShort;
      }
      if (other.MaxBuyBack != 0D) {
        MaxBuyBack = other.MaxBuyBack;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            MaxCashBuy = input.ReadDouble();
            break;
          }
          case 17: {
            MaxCashAndMarginBuy = input.ReadDouble();
            break;
          }
          case 25: {
            MaxPositionSell = input.ReadDouble();
            break;
          }
          case 33: {
            MaxSellShort = input.ReadDouble();
            break;
          }
          case 41: {
            MaxBuyBack = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///过滤条件，条件组合是"与"不是"或"，用于获取订单、成交、持仓等时二次过滤
  /// </summary>
  public sealed partial class TrdFilterConditions : pb::IMessage<TrdFilterConditions> {
    private static readonly pb::MessageParser<TrdFilterConditions> _parser = new pb::MessageParser<TrdFilterConditions>(() => new TrdFilterConditions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrdFilterConditions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TrdCommon.TrdCommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrdFilterConditions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrdFilterConditions(TrdFilterConditions other) : this() {
      codeList_ = other.codeList_.Clone();
      idList_ = other.idList_.Clone();
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrdFilterConditions Clone() {
      return new TrdFilterConditions(this);
    }

    /// <summary>Field number for the "codeList" field.</summary>
    public const int CodeListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_codeList_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> codeList_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///代码过滤，只返回包含这些代码的数据，没传不过滤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CodeList {
      get { return codeList_; }
    }

    /// <summary>Field number for the "idList" field.</summary>
    public const int IdListFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_idList_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> idList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///ID主键过滤，只返回包含这些ID的数据，没传不过滤，订单是orderID、成交是fillID、持仓是positionID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> IdList {
      get { return idList_; }
    }

    /// <summary>Field number for the "beginTime" field.</summary>
    public const int BeginTimeFieldNumber = 3;
    private string beginTime_ = "";
    /// <summary>
    ///开始时间，严格按YYYY-MM-DD HH:MM:SS或YYYY-MM-DD HH:MM:SS.MS格式传，对持仓无效，拉历史数据必须填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private string endTime_ = "";
    /// <summary>
    ///结束时间，严格按YYYY-MM-DD HH:MM:SS或YYYY-MM-DD HH:MM:SS.MS格式传，对持仓无效，拉历史数据必须填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrdFilterConditions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrdFilterConditions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!codeList_.Equals(other.codeList_)) return false;
      if(!idList_.Equals(other.idList_)) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= codeList_.GetHashCode();
      hash ^= idList_.GetHashCode();
      if (BeginTime.Length != 0) hash ^= BeginTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      codeList_.WriteTo(output, _repeated_codeList_codec);
      idList_.WriteTo(output, _repeated_idList_codec);
      if (BeginTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BeginTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += codeList_.CalculateSize(_repeated_codeList_codec);
      size += idList_.CalculateSize(_repeated_idList_codec);
      if (BeginTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeginTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrdFilterConditions other) {
      if (other == null) {
        return;
      }
      codeList_.Add(other.codeList_);
      idList_.Add(other.idList_);
      if (other.BeginTime.Length != 0) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            codeList_.AddEntriesFrom(input, _repeated_codeList_codec);
            break;
          }
          case 18:
          case 16: {
            idList_.AddEntriesFrom(input, _repeated_idList_codec);
            break;
          }
          case 26: {
            BeginTime = input.ReadString();
            break;
          }
          case 34: {
            EndTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
