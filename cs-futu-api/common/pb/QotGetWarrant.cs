// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Qot_GetWarrant.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QotGetWarrant {

  /// <summary>Holder for reflection information generated from Qot_GetWarrant.proto</summary>
  public static partial class QotGetWarrantReflection {

    #region Descriptor
    /// <summary>File descriptor for Qot_GetWarrant.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QotGetWarrantReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRRb3RfR2V0V2FycmFudC5wcm90bxIOUW90X0dldFdhcnJhbnQaDENvbW1v",
            "bi5wcm90bxoQUW90X0NvbW1vbi5wcm90byLfBQoDQzJTEg0KBWJlZ2luGAEg",
            "ASgFEgsKA251bRgCIAEoBRIRCglzb3J0RmllbGQYAyABKAUSDgoGYXNjZW5k",
            "GAQgASgIEiMKBW93bmVyGAUgASgLMhQuUW90X0NvbW1vbi5TZWN1cml0eRIQ",
            "Cgh0eXBlTGlzdBgGIAMoBRISCgppc3N1ZXJMaXN0GAcgAygFEhcKD21hdHVy",
            "aXR5VGltZU1pbhgIIAEoCRIXCg9tYXR1cml0eVRpbWVNYXgYCSABKAkSEQoJ",
            "aXBvUGVyaW9kGAogASgFEhEKCXByaWNlVHlwZRgLIAEoBRIOCgZzdGF0dXMY",
            "DCABKAUSEwoLY3VyUHJpY2VNaW4YDSABKAESEwoLY3VyUHJpY2VNYXgYDiAB",
            "KAESFgoOc3RyaWtlUHJpY2VNaW4YDyABKAESFgoOc3RyaWtlUHJpY2VNYXgY",
            "ECABKAESEQoJc3RyZWV0TWluGBEgASgBEhEKCXN0cmVldE1heBgSIAEoARIV",
            "Cg1jb252ZXJzaW9uTWluGBMgASgBEhUKDWNvbnZlcnNpb25NYXgYFCABKAES",
            "DgoGdm9sTWluGBUgASgEEg4KBnZvbE1heBgWIAEoBBISCgpwcmVtaXVtTWlu",
            "GBcgASgBEhIKCnByZW1pdW1NYXgYGCABKAESGAoQbGV2ZXJhZ2VSYXRpb01p",
            "bhgZIAEoARIYChBsZXZlcmFnZVJhdGlvTWF4GBogASgBEhAKCGRlbHRhTWlu",
            "GBsgASgBEhAKCGRlbHRhTWF4GBwgASgBEhIKCmltcGxpZWRNaW4YHSABKAES",
            "EgoKaW1wbGllZE1heBgeIAEoARIYChByZWNvdmVyeVByaWNlTWluGB8gASgB",
            "EhgKEHJlY292ZXJ5UHJpY2VNYXgYICABKAESHQoVcHJpY2VSZWNvdmVyeVJh",
            "dGlvTWluGCEgASgBEh0KFXByaWNlUmVjb3ZlcnlSYXRpb01heBgiIAEoASL2",
            "BgoLV2FycmFudERhdGESIwoFc3RvY2sYASABKAsyFC5Rb3RfQ29tbW9uLlNl",
            "Y3VyaXR5EiMKBW93bmVyGAIgASgLMhQuUW90X0NvbW1vbi5TZWN1cml0eRIM",
            "CgR0eXBlGAMgASgFEg4KBmlzc3VlchgEIAEoBRIUCgxtYXR1cml0eVRpbWUY",
            "BSABKAkSGQoRbWF0dXJpdHlUaW1lc3RhbXAYBiABKAESEAoIbGlzdFRpbWUY",
            "ByABKAkSFQoNbGlzdFRpbWVzdGFtcBgIIAEoARIVCg1sYXN0VHJhZGVUaW1l",
            "GAkgASgJEhoKEmxhc3RUcmFkZVRpbWVzdGFtcBgKIAEoARIVCg1yZWNvdmVy",
            "eVByaWNlGAsgASgBEhcKD2NvbnZlcnNpb25SYXRpbxgMIAEoARIPCgdsb3RT",
            "aXplGA0gASgFEhMKC3N0cmlrZVByaWNlGA4gASgBEhYKDmxhc3RDbG9zZVBy",
            "aWNlGA8gASgBEgwKBG5hbWUYECABKAkSEAoIY3VyUHJpY2UYESABKAESFgoO",
            "cHJpY2VDaGFuZ2VWYWwYEiABKAESEgoKY2hhbmdlUmF0ZRgTIAEoARIOCgZz",
            "dGF0dXMYFCABKAUSEAoIYmlkUHJpY2UYFSABKAESEAoIYXNrUHJpY2UYFiAB",
            "KAESDgoGYmlkVm9sGBcgASgDEg4KBmFza1ZvbBgYIAEoAxIOCgZ2b2x1bWUY",
            "GSABKAMSEAoIdHVybm92ZXIYGiABKAESDQoFc2NvcmUYGyABKAESDwoHcHJl",
            "bWl1bRgcIAEoARIWCg5icmVha0V2ZW5Qb2ludBgdIAEoARIQCghsZXZlcmFn",
            "ZRgeIAEoARIMCgRpcG9wGB8gASgBEhoKEnByaWNlUmVjb3ZlcnlSYXRpbxgg",
            "IAEoARIXCg9jb252ZXJzaW9uUHJpY2UYISABKAESEgoKc3RyZWV0UmF0ZRgi",
            "IAEoARIRCglzdHJlZXRWb2wYIyABKAMSEQoJYW1wbGl0dWRlGCQgASgBEhEK",
            "CWlzc3VlU2l6ZRglIAEoAxIRCgloaWdoUHJpY2UYJyABKAESEAoIbG93UHJp",
            "Y2UYKCABKAESGQoRaW1wbGllZFZvbGF0aWxpdHkYKSABKAESDQoFZGVsdGEY",
            "KiABKAESGQoRZWZmZWN0aXZlTGV2ZXJhZ2UYKyABKAEiXwoDUzJDEhAKCGxh",
            "c3RQYWdlGAEgASgIEhAKCGFsbENvdW50GAIgASgFEjQKD3dhcnJhbnREYXRh",
            "TGlzdBgDIAMoCzIbLlFvdF9HZXRXYXJyYW50LldhcnJhbnREYXRhIisKB1Jl",
            "cXVlc3QSIAoDYzJzGAEgASgLMhMuUW90X0dldFdhcnJhbnQuQzJTIl4KCFJl",
            "c3BvbnNlEg8KB3JldFR5cGUYASABKAUSDgoGcmV0TXNnGAIgASgJEg8KB2Vy",
            "ckNvZGUYAyABKAUSIAoDczJjGAQgASgLMhMuUW90X0dldFdhcnJhbnQuUzJD",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonReflection.Descriptor, global::QotCommon.QotCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetWarrant.C2S), global::QotGetWarrant.C2S.Parser, new[]{ "Begin", "Num", "SortField", "Ascend", "Owner", "TypeList", "IssuerList", "MaturityTimeMin", "MaturityTimeMax", "IpoPeriod", "PriceType", "Status", "CurPriceMin", "CurPriceMax", "StrikePriceMin", "StrikePriceMax", "StreetMin", "StreetMax", "ConversionMin", "ConversionMax", "VolMin", "VolMax", "PremiumMin", "PremiumMax", "LeverageRatioMin", "LeverageRatioMax", "DeltaMin", "DeltaMax", "ImpliedMin", "ImpliedMax", "RecoveryPriceMin", "RecoveryPriceMax", "PriceRecoveryRatioMin", "PriceRecoveryRatioMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetWarrant.WarrantData), global::QotGetWarrant.WarrantData.Parser, new[]{ "Stock", "Owner", "Type", "Issuer", "MaturityTime", "MaturityTimestamp", "ListTime", "ListTimestamp", "LastTradeTime", "LastTradeTimestamp", "RecoveryPrice", "ConversionRatio", "LotSize", "StrikePrice", "LastClosePrice", "Name", "CurPrice", "PriceChangeVal", "ChangeRate", "Status", "BidPrice", "AskPrice", "BidVol", "AskVol", "Volume", "Turnover", "Score", "Premium", "BreakEvenPoint", "Leverage", "Ipop", "PriceRecoveryRatio", "ConversionPrice", "StreetRate", "StreetVol", "Amplitude", "IssueSize", "HighPrice", "LowPrice", "ImpliedVolatility", "Delta", "EffectiveLeverage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetWarrant.S2C), global::QotGetWarrant.S2C.Parser, new[]{ "LastPage", "AllCount", "WarrantDataList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetWarrant.Request), global::QotGetWarrant.Request.Parser, new[]{ "C2S" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QotGetWarrant.Response), global::QotGetWarrant.Response.Parser, new[]{ "RetType", "RetMsg", "ErrCode", "S2C" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class C2S : pb::IMessage<C2S> {
    private static readonly pb::MessageParser<C2S> _parser = new pb::MessageParser<C2S>(() => new C2S());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetWarrant.QotGetWarrantReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S(C2S other) : this() {
      begin_ = other.begin_;
      num_ = other.num_;
      sortField_ = other.sortField_;
      ascend_ = other.ascend_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      typeList_ = other.typeList_.Clone();
      issuerList_ = other.issuerList_.Clone();
      maturityTimeMin_ = other.maturityTimeMin_;
      maturityTimeMax_ = other.maturityTimeMax_;
      ipoPeriod_ = other.ipoPeriod_;
      priceType_ = other.priceType_;
      status_ = other.status_;
      curPriceMin_ = other.curPriceMin_;
      curPriceMax_ = other.curPriceMax_;
      strikePriceMin_ = other.strikePriceMin_;
      strikePriceMax_ = other.strikePriceMax_;
      streetMin_ = other.streetMin_;
      streetMax_ = other.streetMax_;
      conversionMin_ = other.conversionMin_;
      conversionMax_ = other.conversionMax_;
      volMin_ = other.volMin_;
      volMax_ = other.volMax_;
      premiumMin_ = other.premiumMin_;
      premiumMax_ = other.premiumMax_;
      leverageRatioMin_ = other.leverageRatioMin_;
      leverageRatioMax_ = other.leverageRatioMax_;
      deltaMin_ = other.deltaMin_;
      deltaMax_ = other.deltaMax_;
      impliedMin_ = other.impliedMin_;
      impliedMax_ = other.impliedMax_;
      recoveryPriceMin_ = other.recoveryPriceMin_;
      recoveryPriceMax_ = other.recoveryPriceMax_;
      priceRecoveryRatioMin_ = other.priceRecoveryRatioMin_;
      priceRecoveryRatioMax_ = other.priceRecoveryRatioMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S Clone() {
      return new C2S(this);
    }

    /// <summary>Field number for the "begin" field.</summary>
    public const int BeginFieldNumber = 1;
    private int begin_;
    /// <summary>
    ///数据起始点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Begin {
      get { return begin_; }
      set {
        begin_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///请求数据个数，最大200
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "sortField" field.</summary>
    public const int SortFieldFieldNumber = 3;
    private int sortField_;
    /// <summary>
    ///Qot_Common.SortField,根据哪个字段排序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SortField {
      get { return sortField_; }
      set {
        sortField_ = value;
      }
    }

    /// <summary>Field number for the "ascend" field.</summary>
    public const int AscendFieldNumber = 4;
    private bool ascend_;
    /// <summary>
    ///升序ture, 降序false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ascend {
      get { return ascend_; }
      set {
        ascend_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 5;
    private global::QotCommon.Security owner_;
    /// <summary>
    ///以下为筛选条件，可选字段，不填表示不过滤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "typeList" field.</summary>
    public const int TypeListFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_typeList_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> typeList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///Qot_Common.WarrantType,窝轮类型过滤列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TypeList {
      get { return typeList_; }
    }

    /// <summary>Field number for the "issuerList" field.</summary>
    public const int IssuerListFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_issuerList_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> issuerList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///Qot_Common.Issuer,发行人过滤列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IssuerList {
      get { return issuerList_; }
    }

    /// <summary>Field number for the "maturityTimeMin" field.</summary>
    public const int MaturityTimeMinFieldNumber = 8;
    private string maturityTimeMin_ = "";
    /// <summary>
    ///到期日, 到期日范围的开始时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaturityTimeMin {
      get { return maturityTimeMin_; }
      set {
        maturityTimeMin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maturityTimeMax" field.</summary>
    public const int MaturityTimeMaxFieldNumber = 9;
    private string maturityTimeMax_ = "";
    /// <summary>
    ///到期日范围的结束时间字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaturityTimeMax {
      get { return maturityTimeMax_; }
      set {
        maturityTimeMax_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipoPeriod" field.</summary>
    public const int IpoPeriodFieldNumber = 10;
    private int ipoPeriod_;
    /// <summary>
    ///Qot_Common.IpoPeriod,上市日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IpoPeriod {
      get { return ipoPeriod_; }
      set {
        ipoPeriod_ = value;
      }
    }

    /// <summary>Field number for the "priceType" field.</summary>
    public const int PriceTypeFieldNumber = 11;
    private int priceType_;
    /// <summary>
    ///Qot_Common.PriceType, 价内/价外
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 12;
    private int status_;
    /// <summary>
    ///Qot_Common.WarrantStatus, 窝轮状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "curPriceMin" field.</summary>
    public const int CurPriceMinFieldNumber = 13;
    private double curPriceMin_;
    /// <summary>
    ///最新价过滤起点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurPriceMin {
      get { return curPriceMin_; }
      set {
        curPriceMin_ = value;
      }
    }

    /// <summary>Field number for the "curPriceMax" field.</summary>
    public const int CurPriceMaxFieldNumber = 14;
    private double curPriceMax_;
    /// <summary>
    ///最新价过滤终点 	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurPriceMax {
      get { return curPriceMax_; }
      set {
        curPriceMax_ = value;
      }
    }

    /// <summary>Field number for the "strikePriceMin" field.</summary>
    public const int StrikePriceMinFieldNumber = 15;
    private double strikePriceMin_;
    /// <summary>
    ///行使价过滤起点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikePriceMin {
      get { return strikePriceMin_; }
      set {
        strikePriceMin_ = value;
      }
    }

    /// <summary>Field number for the "strikePriceMax" field.</summary>
    public const int StrikePriceMaxFieldNumber = 16;
    private double strikePriceMax_;
    /// <summary>
    ///行使价过滤终点  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikePriceMax {
      get { return strikePriceMax_; }
      set {
        strikePriceMax_ = value;
      }
    }

    /// <summary>Field number for the "streetMin" field.</summary>
    public const int StreetMinFieldNumber = 17;
    private double streetMin_;
    /// <summary>
    ///街货占比%过滤起点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StreetMin {
      get { return streetMin_; }
      set {
        streetMin_ = value;
      }
    }

    /// <summary>Field number for the "streetMax" field.</summary>
    public const int StreetMaxFieldNumber = 18;
    private double streetMax_;
    /// <summary>
    ///街货占比%过滤终点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StreetMax {
      get { return streetMax_; }
      set {
        streetMax_ = value;
      }
    }

    /// <summary>Field number for the "conversionMin" field.</summary>
    public const int ConversionMinFieldNumber = 19;
    private double conversionMin_;
    /// <summary>
    ///换股比率过滤起点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConversionMin {
      get { return conversionMin_; }
      set {
        conversionMin_ = value;
      }
    }

    /// <summary>Field number for the "conversionMax" field.</summary>
    public const int ConversionMaxFieldNumber = 20;
    private double conversionMax_;
    /// <summary>
    ///换股比率过滤终点	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConversionMax {
      get { return conversionMax_; }
      set {
        conversionMax_ = value;
      }
    }

    /// <summary>Field number for the "volMin" field.</summary>
    public const int VolMinFieldNumber = 21;
    private ulong volMin_;
    /// <summary>
    ///成交量过滤起点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VolMin {
      get { return volMin_; }
      set {
        volMin_ = value;
      }
    }

    /// <summary>Field number for the "volMax" field.</summary>
    public const int VolMaxFieldNumber = 22;
    private ulong volMax_;
    /// <summary>
    ///成交量过滤终点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VolMax {
      get { return volMax_; }
      set {
        volMax_ = value;
      }
    }

    /// <summary>Field number for the "premiumMin" field.</summary>
    public const int PremiumMinFieldNumber = 23;
    private double premiumMin_;
    /// <summary>
    ///溢价%过滤起点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PremiumMin {
      get { return premiumMin_; }
      set {
        premiumMin_ = value;
      }
    }

    /// <summary>Field number for the "premiumMax" field.</summary>
    public const int PremiumMaxFieldNumber = 24;
    private double premiumMax_;
    /// <summary>
    ///溢价%过滤终点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PremiumMax {
      get { return premiumMax_; }
      set {
        premiumMax_ = value;
      }
    }

    /// <summary>Field number for the "leverageRatioMin" field.</summary>
    public const int LeverageRatioMinFieldNumber = 25;
    private double leverageRatioMin_;
    /// <summary>
    ///杠杆比率过滤起点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LeverageRatioMin {
      get { return leverageRatioMin_; }
      set {
        leverageRatioMin_ = value;
      }
    }

    /// <summary>Field number for the "leverageRatioMax" field.</summary>
    public const int LeverageRatioMaxFieldNumber = 26;
    private double leverageRatioMax_;
    /// <summary>
    ///杠杆比率过滤终点	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LeverageRatioMax {
      get { return leverageRatioMax_; }
      set {
        leverageRatioMax_ = value;
      }
    }

    /// <summary>Field number for the "deltaMin" field.</summary>
    public const int DeltaMinFieldNumber = 27;
    private double deltaMin_;
    /// <summary>
    ///对冲值过滤起点,仅认购认沽支持该字段过滤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DeltaMin {
      get { return deltaMin_; }
      set {
        deltaMin_ = value;
      }
    }

    /// <summary>Field number for the "deltaMax" field.</summary>
    public const int DeltaMaxFieldNumber = 28;
    private double deltaMax_;
    /// <summary>
    ///对冲值过滤终点,仅认购认沽支持该字段过滤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DeltaMax {
      get { return deltaMax_; }
      set {
        deltaMax_ = value;
      }
    }

    /// <summary>Field number for the "impliedMin" field.</summary>
    public const int ImpliedMinFieldNumber = 29;
    private double impliedMin_;
    /// <summary>
    ///引伸波幅过滤起点,仅认购认沽支持该字段过滤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ImpliedMin {
      get { return impliedMin_; }
      set {
        impliedMin_ = value;
      }
    }

    /// <summary>Field number for the "impliedMax" field.</summary>
    public const int ImpliedMaxFieldNumber = 30;
    private double impliedMax_;
    /// <summary>
    ///引伸波幅过滤终点,仅认购认沽支持该字段过滤	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ImpliedMax {
      get { return impliedMax_; }
      set {
        impliedMax_ = value;
      }
    }

    /// <summary>Field number for the "recoveryPriceMin" field.</summary>
    public const int RecoveryPriceMinFieldNumber = 31;
    private double recoveryPriceMin_;
    /// <summary>
    ///收回价过滤起点,仅牛熊证支持该字段过滤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RecoveryPriceMin {
      get { return recoveryPriceMin_; }
      set {
        recoveryPriceMin_ = value;
      }
    }

    /// <summary>Field number for the "recoveryPriceMax" field.</summary>
    public const int RecoveryPriceMaxFieldNumber = 32;
    private double recoveryPriceMax_;
    /// <summary>
    ///收回价过滤终点,仅牛熊证支持该字段过滤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RecoveryPriceMax {
      get { return recoveryPriceMax_; }
      set {
        recoveryPriceMax_ = value;
      }
    }

    /// <summary>Field number for the "priceRecoveryRatioMin" field.</summary>
    public const int PriceRecoveryRatioMinFieldNumber = 33;
    private double priceRecoveryRatioMin_;
    /// <summary>
    ///正股距收回价%过滤起点,仅牛熊证支持该字段过滤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceRecoveryRatioMin {
      get { return priceRecoveryRatioMin_; }
      set {
        priceRecoveryRatioMin_ = value;
      }
    }

    /// <summary>Field number for the "priceRecoveryRatioMax" field.</summary>
    public const int PriceRecoveryRatioMaxFieldNumber = 34;
    private double priceRecoveryRatioMax_;
    /// <summary>
    ///正股距收回价%过滤终点,仅牛熊证支持该字段过滤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceRecoveryRatioMax {
      get { return priceRecoveryRatioMax_; }
      set {
        priceRecoveryRatioMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Begin != other.Begin) return false;
      if (Num != other.Num) return false;
      if (SortField != other.SortField) return false;
      if (Ascend != other.Ascend) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if(!typeList_.Equals(other.typeList_)) return false;
      if(!issuerList_.Equals(other.issuerList_)) return false;
      if (MaturityTimeMin != other.MaturityTimeMin) return false;
      if (MaturityTimeMax != other.MaturityTimeMax) return false;
      if (IpoPeriod != other.IpoPeriod) return false;
      if (PriceType != other.PriceType) return false;
      if (Status != other.Status) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurPriceMin, other.CurPriceMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurPriceMax, other.CurPriceMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePriceMin, other.StrikePriceMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePriceMax, other.StrikePriceMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StreetMin, other.StreetMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StreetMax, other.StreetMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionMin, other.ConversionMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionMax, other.ConversionMax)) return false;
      if (VolMin != other.VolMin) return false;
      if (VolMax != other.VolMax) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PremiumMin, other.PremiumMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PremiumMax, other.PremiumMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LeverageRatioMin, other.LeverageRatioMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LeverageRatioMax, other.LeverageRatioMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeltaMin, other.DeltaMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeltaMax, other.DeltaMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ImpliedMin, other.ImpliedMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ImpliedMax, other.ImpliedMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RecoveryPriceMin, other.RecoveryPriceMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RecoveryPriceMax, other.RecoveryPriceMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceRecoveryRatioMin, other.PriceRecoveryRatioMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceRecoveryRatioMax, other.PriceRecoveryRatioMax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Begin != 0) hash ^= Begin.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (SortField != 0) hash ^= SortField.GetHashCode();
      if (Ascend != false) hash ^= Ascend.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      hash ^= typeList_.GetHashCode();
      hash ^= issuerList_.GetHashCode();
      if (MaturityTimeMin.Length != 0) hash ^= MaturityTimeMin.GetHashCode();
      if (MaturityTimeMax.Length != 0) hash ^= MaturityTimeMax.GetHashCode();
      if (IpoPeriod != 0) hash ^= IpoPeriod.GetHashCode();
      if (PriceType != 0) hash ^= PriceType.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CurPriceMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurPriceMin);
      if (CurPriceMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurPriceMax);
      if (StrikePriceMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePriceMin);
      if (StrikePriceMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePriceMax);
      if (StreetMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StreetMin);
      if (StreetMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StreetMax);
      if (ConversionMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionMin);
      if (ConversionMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionMax);
      if (VolMin != 0UL) hash ^= VolMin.GetHashCode();
      if (VolMax != 0UL) hash ^= VolMax.GetHashCode();
      if (PremiumMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PremiumMin);
      if (PremiumMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PremiumMax);
      if (LeverageRatioMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LeverageRatioMin);
      if (LeverageRatioMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LeverageRatioMax);
      if (DeltaMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeltaMin);
      if (DeltaMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeltaMax);
      if (ImpliedMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ImpliedMin);
      if (ImpliedMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ImpliedMax);
      if (RecoveryPriceMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RecoveryPriceMin);
      if (RecoveryPriceMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RecoveryPriceMax);
      if (PriceRecoveryRatioMin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceRecoveryRatioMin);
      if (PriceRecoveryRatioMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceRecoveryRatioMax);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Begin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Begin);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (SortField != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SortField);
      }
      if (Ascend != false) {
        output.WriteRawTag(32);
        output.WriteBool(Ascend);
      }
      if (owner_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Owner);
      }
      typeList_.WriteTo(output, _repeated_typeList_codec);
      issuerList_.WriteTo(output, _repeated_issuerList_codec);
      if (MaturityTimeMin.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MaturityTimeMin);
      }
      if (MaturityTimeMax.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MaturityTimeMax);
      }
      if (IpoPeriod != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IpoPeriod);
      }
      if (PriceType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PriceType);
      }
      if (Status != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Status);
      }
      if (CurPriceMin != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(CurPriceMin);
      }
      if (CurPriceMax != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(CurPriceMax);
      }
      if (StrikePriceMin != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(StrikePriceMin);
      }
      if (StrikePriceMax != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(StrikePriceMax);
      }
      if (StreetMin != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(StreetMin);
      }
      if (StreetMax != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(StreetMax);
      }
      if (ConversionMin != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(ConversionMin);
      }
      if (ConversionMax != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(ConversionMax);
      }
      if (VolMin != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(VolMin);
      }
      if (VolMax != 0UL) {
        output.WriteRawTag(176, 1);
        output.WriteUInt64(VolMax);
      }
      if (PremiumMin != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(PremiumMin);
      }
      if (PremiumMax != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(PremiumMax);
      }
      if (LeverageRatioMin != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(LeverageRatioMin);
      }
      if (LeverageRatioMax != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(LeverageRatioMax);
      }
      if (DeltaMin != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(DeltaMin);
      }
      if (DeltaMax != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(DeltaMax);
      }
      if (ImpliedMin != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(ImpliedMin);
      }
      if (ImpliedMax != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(ImpliedMax);
      }
      if (RecoveryPriceMin != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(RecoveryPriceMin);
      }
      if (RecoveryPriceMax != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(RecoveryPriceMax);
      }
      if (PriceRecoveryRatioMin != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(PriceRecoveryRatioMin);
      }
      if (PriceRecoveryRatioMax != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(PriceRecoveryRatioMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Begin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Begin);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (SortField != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SortField);
      }
      if (Ascend != false) {
        size += 1 + 1;
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      size += typeList_.CalculateSize(_repeated_typeList_codec);
      size += issuerList_.CalculateSize(_repeated_issuerList_codec);
      if (MaturityTimeMin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaturityTimeMin);
      }
      if (MaturityTimeMax.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaturityTimeMax);
      }
      if (IpoPeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IpoPeriod);
      }
      if (PriceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriceType);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (CurPriceMin != 0D) {
        size += 1 + 8;
      }
      if (CurPriceMax != 0D) {
        size += 1 + 8;
      }
      if (StrikePriceMin != 0D) {
        size += 1 + 8;
      }
      if (StrikePriceMax != 0D) {
        size += 2 + 8;
      }
      if (StreetMin != 0D) {
        size += 2 + 8;
      }
      if (StreetMax != 0D) {
        size += 2 + 8;
      }
      if (ConversionMin != 0D) {
        size += 2 + 8;
      }
      if (ConversionMax != 0D) {
        size += 2 + 8;
      }
      if (VolMin != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(VolMin);
      }
      if (VolMax != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(VolMax);
      }
      if (PremiumMin != 0D) {
        size += 2 + 8;
      }
      if (PremiumMax != 0D) {
        size += 2 + 8;
      }
      if (LeverageRatioMin != 0D) {
        size += 2 + 8;
      }
      if (LeverageRatioMax != 0D) {
        size += 2 + 8;
      }
      if (DeltaMin != 0D) {
        size += 2 + 8;
      }
      if (DeltaMax != 0D) {
        size += 2 + 8;
      }
      if (ImpliedMin != 0D) {
        size += 2 + 8;
      }
      if (ImpliedMax != 0D) {
        size += 2 + 8;
      }
      if (RecoveryPriceMin != 0D) {
        size += 2 + 8;
      }
      if (RecoveryPriceMax != 0D) {
        size += 2 + 8;
      }
      if (PriceRecoveryRatioMin != 0D) {
        size += 2 + 8;
      }
      if (PriceRecoveryRatioMax != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S other) {
      if (other == null) {
        return;
      }
      if (other.Begin != 0) {
        Begin = other.Begin;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.SortField != 0) {
        SortField = other.SortField;
      }
      if (other.Ascend != false) {
        Ascend = other.Ascend;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::QotCommon.Security();
        }
        Owner.MergeFrom(other.Owner);
      }
      typeList_.Add(other.typeList_);
      issuerList_.Add(other.issuerList_);
      if (other.MaturityTimeMin.Length != 0) {
        MaturityTimeMin = other.MaturityTimeMin;
      }
      if (other.MaturityTimeMax.Length != 0) {
        MaturityTimeMax = other.MaturityTimeMax;
      }
      if (other.IpoPeriod != 0) {
        IpoPeriod = other.IpoPeriod;
      }
      if (other.PriceType != 0) {
        PriceType = other.PriceType;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CurPriceMin != 0D) {
        CurPriceMin = other.CurPriceMin;
      }
      if (other.CurPriceMax != 0D) {
        CurPriceMax = other.CurPriceMax;
      }
      if (other.StrikePriceMin != 0D) {
        StrikePriceMin = other.StrikePriceMin;
      }
      if (other.StrikePriceMax != 0D) {
        StrikePriceMax = other.StrikePriceMax;
      }
      if (other.StreetMin != 0D) {
        StreetMin = other.StreetMin;
      }
      if (other.StreetMax != 0D) {
        StreetMax = other.StreetMax;
      }
      if (other.ConversionMin != 0D) {
        ConversionMin = other.ConversionMin;
      }
      if (other.ConversionMax != 0D) {
        ConversionMax = other.ConversionMax;
      }
      if (other.VolMin != 0UL) {
        VolMin = other.VolMin;
      }
      if (other.VolMax != 0UL) {
        VolMax = other.VolMax;
      }
      if (other.PremiumMin != 0D) {
        PremiumMin = other.PremiumMin;
      }
      if (other.PremiumMax != 0D) {
        PremiumMax = other.PremiumMax;
      }
      if (other.LeverageRatioMin != 0D) {
        LeverageRatioMin = other.LeverageRatioMin;
      }
      if (other.LeverageRatioMax != 0D) {
        LeverageRatioMax = other.LeverageRatioMax;
      }
      if (other.DeltaMin != 0D) {
        DeltaMin = other.DeltaMin;
      }
      if (other.DeltaMax != 0D) {
        DeltaMax = other.DeltaMax;
      }
      if (other.ImpliedMin != 0D) {
        ImpliedMin = other.ImpliedMin;
      }
      if (other.ImpliedMax != 0D) {
        ImpliedMax = other.ImpliedMax;
      }
      if (other.RecoveryPriceMin != 0D) {
        RecoveryPriceMin = other.RecoveryPriceMin;
      }
      if (other.RecoveryPriceMax != 0D) {
        RecoveryPriceMax = other.RecoveryPriceMax;
      }
      if (other.PriceRecoveryRatioMin != 0D) {
        PriceRecoveryRatioMin = other.PriceRecoveryRatioMin;
      }
      if (other.PriceRecoveryRatioMax != 0D) {
        PriceRecoveryRatioMax = other.PriceRecoveryRatioMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Begin = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            SortField = input.ReadInt32();
            break;
          }
          case 32: {
            Ascend = input.ReadBool();
            break;
          }
          case 42: {
            if (owner_ == null) {
              Owner = new global::QotCommon.Security();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 50:
          case 48: {
            typeList_.AddEntriesFrom(input, _repeated_typeList_codec);
            break;
          }
          case 58:
          case 56: {
            issuerList_.AddEntriesFrom(input, _repeated_issuerList_codec);
            break;
          }
          case 66: {
            MaturityTimeMin = input.ReadString();
            break;
          }
          case 74: {
            MaturityTimeMax = input.ReadString();
            break;
          }
          case 80: {
            IpoPeriod = input.ReadInt32();
            break;
          }
          case 88: {
            PriceType = input.ReadInt32();
            break;
          }
          case 96: {
            Status = input.ReadInt32();
            break;
          }
          case 105: {
            CurPriceMin = input.ReadDouble();
            break;
          }
          case 113: {
            CurPriceMax = input.ReadDouble();
            break;
          }
          case 121: {
            StrikePriceMin = input.ReadDouble();
            break;
          }
          case 129: {
            StrikePriceMax = input.ReadDouble();
            break;
          }
          case 137: {
            StreetMin = input.ReadDouble();
            break;
          }
          case 145: {
            StreetMax = input.ReadDouble();
            break;
          }
          case 153: {
            ConversionMin = input.ReadDouble();
            break;
          }
          case 161: {
            ConversionMax = input.ReadDouble();
            break;
          }
          case 168: {
            VolMin = input.ReadUInt64();
            break;
          }
          case 176: {
            VolMax = input.ReadUInt64();
            break;
          }
          case 185: {
            PremiumMin = input.ReadDouble();
            break;
          }
          case 193: {
            PremiumMax = input.ReadDouble();
            break;
          }
          case 201: {
            LeverageRatioMin = input.ReadDouble();
            break;
          }
          case 209: {
            LeverageRatioMax = input.ReadDouble();
            break;
          }
          case 217: {
            DeltaMin = input.ReadDouble();
            break;
          }
          case 225: {
            DeltaMax = input.ReadDouble();
            break;
          }
          case 233: {
            ImpliedMin = input.ReadDouble();
            break;
          }
          case 241: {
            ImpliedMax = input.ReadDouble();
            break;
          }
          case 249: {
            RecoveryPriceMin = input.ReadDouble();
            break;
          }
          case 257: {
            RecoveryPriceMax = input.ReadDouble();
            break;
          }
          case 265: {
            PriceRecoveryRatioMin = input.ReadDouble();
            break;
          }
          case 273: {
            PriceRecoveryRatioMax = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WarrantData : pb::IMessage<WarrantData> {
    private static readonly pb::MessageParser<WarrantData> _parser = new pb::MessageParser<WarrantData>(() => new WarrantData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarrantData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetWarrant.QotGetWarrantReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarrantData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarrantData(WarrantData other) : this() {
      stock_ = other.stock_ != null ? other.stock_.Clone() : null;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      type_ = other.type_;
      issuer_ = other.issuer_;
      maturityTime_ = other.maturityTime_;
      maturityTimestamp_ = other.maturityTimestamp_;
      listTime_ = other.listTime_;
      listTimestamp_ = other.listTimestamp_;
      lastTradeTime_ = other.lastTradeTime_;
      lastTradeTimestamp_ = other.lastTradeTimestamp_;
      recoveryPrice_ = other.recoveryPrice_;
      conversionRatio_ = other.conversionRatio_;
      lotSize_ = other.lotSize_;
      strikePrice_ = other.strikePrice_;
      lastClosePrice_ = other.lastClosePrice_;
      name_ = other.name_;
      curPrice_ = other.curPrice_;
      priceChangeVal_ = other.priceChangeVal_;
      changeRate_ = other.changeRate_;
      status_ = other.status_;
      bidPrice_ = other.bidPrice_;
      askPrice_ = other.askPrice_;
      bidVol_ = other.bidVol_;
      askVol_ = other.askVol_;
      volume_ = other.volume_;
      turnover_ = other.turnover_;
      score_ = other.score_;
      premium_ = other.premium_;
      breakEvenPoint_ = other.breakEvenPoint_;
      leverage_ = other.leverage_;
      ipop_ = other.ipop_;
      priceRecoveryRatio_ = other.priceRecoveryRatio_;
      conversionPrice_ = other.conversionPrice_;
      streetRate_ = other.streetRate_;
      streetVol_ = other.streetVol_;
      amplitude_ = other.amplitude_;
      issueSize_ = other.issueSize_;
      highPrice_ = other.highPrice_;
      lowPrice_ = other.lowPrice_;
      impliedVolatility_ = other.impliedVolatility_;
      delta_ = other.delta_;
      effectiveLeverage_ = other.effectiveLeverage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarrantData Clone() {
      return new WarrantData(this);
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 1;
    private global::QotCommon.Security stock_;
    /// <summary>
    ///静态数据项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::QotCommon.Security owner_;
    /// <summary>
    ///所属正股
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotCommon.Security Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///Qot_Common.WarrantType,窝轮类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 4;
    private int issuer_;
    /// <summary>
    ///Qot_Common.Issuer,发行人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "maturityTime" field.</summary>
    public const int MaturityTimeFieldNumber = 5;
    private string maturityTime_ = "";
    /// <summary>
    ///到期日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaturityTime {
      get { return maturityTime_; }
      set {
        maturityTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maturityTimestamp" field.</summary>
    public const int MaturityTimestampFieldNumber = 6;
    private double maturityTimestamp_;
    /// <summary>
    ///到期日时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaturityTimestamp {
      get { return maturityTimestamp_; }
      set {
        maturityTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "listTime" field.</summary>
    public const int ListTimeFieldNumber = 7;
    private string listTime_ = "";
    /// <summary>
    ///上市时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListTime {
      get { return listTime_; }
      set {
        listTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "listTimestamp" field.</summary>
    public const int ListTimestampFieldNumber = 8;
    private double listTimestamp_;
    /// <summary>
    ///上市时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ListTimestamp {
      get { return listTimestamp_; }
      set {
        listTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "lastTradeTime" field.</summary>
    public const int LastTradeTimeFieldNumber = 9;
    private string lastTradeTime_ = "";
    /// <summary>
    ///最后交易日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastTradeTime {
      get { return lastTradeTime_; }
      set {
        lastTradeTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastTradeTimestamp" field.</summary>
    public const int LastTradeTimestampFieldNumber = 10;
    private double lastTradeTimestamp_;
    /// <summary>
    ///最后交易日时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastTradeTimestamp {
      get { return lastTradeTimestamp_; }
      set {
        lastTradeTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "recoveryPrice" field.</summary>
    public const int RecoveryPriceFieldNumber = 11;
    private double recoveryPrice_;
    /// <summary>
    ///收回价,仅牛熊证支持该字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RecoveryPrice {
      get { return recoveryPrice_; }
      set {
        recoveryPrice_ = value;
      }
    }

    /// <summary>Field number for the "conversionRatio" field.</summary>
    public const int ConversionRatioFieldNumber = 12;
    private double conversionRatio_;
    /// <summary>
    ///换股比率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConversionRatio {
      get { return conversionRatio_; }
      set {
        conversionRatio_ = value;
      }
    }

    /// <summary>Field number for the "lotSize" field.</summary>
    public const int LotSizeFieldNumber = 13;
    private int lotSize_;
    /// <summary>
    ///每手数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LotSize {
      get { return lotSize_; }
      set {
        lotSize_ = value;
      }
    }

    /// <summary>Field number for the "strikePrice" field.</summary>
    public const int StrikePriceFieldNumber = 14;
    private double strikePrice_;
    /// <summary>
    ///行使价	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StrikePrice {
      get { return strikePrice_; }
      set {
        strikePrice_ = value;
      }
    }

    /// <summary>Field number for the "lastClosePrice" field.</summary>
    public const int LastClosePriceFieldNumber = 15;
    private double lastClosePrice_;
    /// <summary>
    ///昨收价		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastClosePrice {
      get { return lastClosePrice_; }
      set {
        lastClosePrice_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 16;
    private string name_ = "";
    /// <summary>
    ///名称	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "curPrice" field.</summary>
    public const int CurPriceFieldNumber = 17;
    private double curPrice_;
    /// <summary>
    ///动态数据项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurPrice {
      get { return curPrice_; }
      set {
        curPrice_ = value;
      }
    }

    /// <summary>Field number for the "priceChangeVal" field.</summary>
    public const int PriceChangeValFieldNumber = 18;
    private double priceChangeVal_;
    /// <summary>
    ///涨跌额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceChangeVal {
      get { return priceChangeVal_; }
      set {
        priceChangeVal_ = value;
      }
    }

    /// <summary>Field number for the "changeRate" field.</summary>
    public const int ChangeRateFieldNumber = 19;
    private double changeRate_;
    /// <summary>
    ///涨跌幅%	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ChangeRate {
      get { return changeRate_; }
      set {
        changeRate_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 20;
    private int status_;
    /// <summary>
    ///Qot_Common.WarrantStatus, 窝轮状态	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "bidPrice" field.</summary>
    public const int BidPriceFieldNumber = 21;
    private double bidPrice_;
    /// <summary>
    ///买入价	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "askPrice" field.</summary>
    public const int AskPriceFieldNumber = 22;
    private double askPrice_;
    /// <summary>
    ///卖出价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "bidVol" field.</summary>
    public const int BidVolFieldNumber = 23;
    private long bidVol_;
    /// <summary>
    ///买量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BidVol {
      get { return bidVol_; }
      set {
        bidVol_ = value;
      }
    }

    /// <summary>Field number for the "askVol" field.</summary>
    public const int AskVolFieldNumber = 24;
    private long askVol_;
    /// <summary>
    ///卖量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AskVol {
      get { return askVol_; }
      set {
        askVol_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 25;
    private long volume_;
    /// <summary>
    ///成交量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "turnover" field.</summary>
    public const int TurnoverFieldNumber = 26;
    private double turnover_;
    /// <summary>
    ///成交额	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Turnover {
      get { return turnover_; }
      set {
        turnover_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 27;
    private double score_;
    /// <summary>
    ///综合评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "premium" field.</summary>
    public const int PremiumFieldNumber = 28;
    private double premium_;
    /// <summary>
    ///溢价%
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Premium {
      get { return premium_; }
      set {
        premium_ = value;
      }
    }

    /// <summary>Field number for the "breakEvenPoint" field.</summary>
    public const int BreakEvenPointFieldNumber = 29;
    private double breakEvenPoint_;
    /// <summary>
    ///打和点	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BreakEvenPoint {
      get { return breakEvenPoint_; }
      set {
        breakEvenPoint_ = value;
      }
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 30;
    private double leverage_;
    /// <summary>
    ///杠杆比率（倍）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "ipop" field.</summary>
    public const int IpopFieldNumber = 31;
    private double ipop_;
    /// <summary>
    ///价内/价外%			
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ipop {
      get { return ipop_; }
      set {
        ipop_ = value;
      }
    }

    /// <summary>Field number for the "priceRecoveryRatio" field.</summary>
    public const int PriceRecoveryRatioFieldNumber = 32;
    private double priceRecoveryRatio_;
    /// <summary>
    ///正股距收回价%，仅牛熊证支持该字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PriceRecoveryRatio {
      get { return priceRecoveryRatio_; }
      set {
        priceRecoveryRatio_ = value;
      }
    }

    /// <summary>Field number for the "conversionPrice" field.</summary>
    public const int ConversionPriceFieldNumber = 33;
    private double conversionPrice_;
    /// <summary>
    ///换股价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConversionPrice {
      get { return conversionPrice_; }
      set {
        conversionPrice_ = value;
      }
    }

    /// <summary>Field number for the "streetRate" field.</summary>
    public const int StreetRateFieldNumber = 34;
    private double streetRate_;
    /// <summary>
    ///街货占比	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StreetRate {
      get { return streetRate_; }
      set {
        streetRate_ = value;
      }
    }

    /// <summary>Field number for the "streetVol" field.</summary>
    public const int StreetVolFieldNumber = 35;
    private long streetVol_;
    /// <summary>
    ///街货量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StreetVol {
      get { return streetVol_; }
      set {
        streetVol_ = value;
      }
    }

    /// <summary>Field number for the "amplitude" field.</summary>
    public const int AmplitudeFieldNumber = 36;
    private double amplitude_;
    /// <summary>
    ///振幅%
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amplitude {
      get { return amplitude_; }
      set {
        amplitude_ = value;
      }
    }

    /// <summary>Field number for the "issueSize" field.</summary>
    public const int IssueSizeFieldNumber = 37;
    private long issueSize_;
    /// <summary>
    ///发行量	        
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "highPrice" field.</summary>
    public const int HighPriceFieldNumber = 39;
    private double highPrice_;
    /// <summary>
    ///最高价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = value;
      }
    }

    /// <summary>Field number for the "lowPrice" field.</summary>
    public const int LowPriceFieldNumber = 40;
    private double lowPrice_;
    /// <summary>
    ///最低价	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    /// <summary>Field number for the "impliedVolatility" field.</summary>
    public const int ImpliedVolatilityFieldNumber = 41;
    private double impliedVolatility_;
    /// <summary>
    ///引申波幅,仅认购认沽支持该字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ImpliedVolatility {
      get { return impliedVolatility_; }
      set {
        impliedVolatility_ = value;
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 42;
    private double delta_;
    /// <summary>
    ///对冲值,仅认购认沽支持该字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "effectiveLeverage" field.</summary>
    public const int EffectiveLeverageFieldNumber = 43;
    private double effectiveLeverage_;
    /// <summary>
    ///有效杠杆
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EffectiveLeverage {
      get { return effectiveLeverage_; }
      set {
        effectiveLeverage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarrantData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarrantData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stock, other.Stock)) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (Type != other.Type) return false;
      if (Issuer != other.Issuer) return false;
      if (MaturityTime != other.MaturityTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaturityTimestamp, other.MaturityTimestamp)) return false;
      if (ListTime != other.ListTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ListTimestamp, other.ListTimestamp)) return false;
      if (LastTradeTime != other.LastTradeTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastTradeTimestamp, other.LastTradeTimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RecoveryPrice, other.RecoveryPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionRatio, other.ConversionRatio)) return false;
      if (LotSize != other.LotSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StrikePrice, other.StrikePrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastClosePrice, other.LastClosePrice)) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurPrice, other.CurPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceChangeVal, other.PriceChangeVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChangeRate, other.ChangeRate)) return false;
      if (Status != other.Status) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPrice, other.BidPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPrice, other.AskPrice)) return false;
      if (BidVol != other.BidVol) return false;
      if (AskVol != other.AskVol) return false;
      if (Volume != other.Volume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Turnover, other.Turnover)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Score, other.Score)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Premium, other.Premium)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BreakEvenPoint, other.BreakEvenPoint)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Leverage, other.Leverage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Ipop, other.Ipop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PriceRecoveryRatio, other.PriceRecoveryRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConversionPrice, other.ConversionPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StreetRate, other.StreetRate)) return false;
      if (StreetVol != other.StreetVol) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amplitude, other.Amplitude)) return false;
      if (IssueSize != other.IssueSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HighPrice, other.HighPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowPrice, other.LowPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ImpliedVolatility, other.ImpliedVolatility)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Delta, other.Delta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EffectiveLeverage, other.EffectiveLeverage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stock_ != null) hash ^= Stock.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Issuer != 0) hash ^= Issuer.GetHashCode();
      if (MaturityTime.Length != 0) hash ^= MaturityTime.GetHashCode();
      if (MaturityTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaturityTimestamp);
      if (ListTime.Length != 0) hash ^= ListTime.GetHashCode();
      if (ListTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ListTimestamp);
      if (LastTradeTime.Length != 0) hash ^= LastTradeTime.GetHashCode();
      if (LastTradeTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastTradeTimestamp);
      if (RecoveryPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RecoveryPrice);
      if (ConversionRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionRatio);
      if (LotSize != 0) hash ^= LotSize.GetHashCode();
      if (StrikePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StrikePrice);
      if (LastClosePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastClosePrice);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CurPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurPrice);
      if (PriceChangeVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceChangeVal);
      if (ChangeRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChangeRate);
      if (Status != 0) hash ^= Status.GetHashCode();
      if (BidPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPrice);
      if (AskPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPrice);
      if (BidVol != 0L) hash ^= BidVol.GetHashCode();
      if (AskVol != 0L) hash ^= AskVol.GetHashCode();
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (Turnover != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Turnover);
      if (Score != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Score);
      if (Premium != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Premium);
      if (BreakEvenPoint != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BreakEvenPoint);
      if (Leverage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Leverage);
      if (Ipop != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Ipop);
      if (PriceRecoveryRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PriceRecoveryRatio);
      if (ConversionPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConversionPrice);
      if (StreetRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StreetRate);
      if (StreetVol != 0L) hash ^= StreetVol.GetHashCode();
      if (Amplitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amplitude);
      if (IssueSize != 0L) hash ^= IssueSize.GetHashCode();
      if (HighPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HighPrice);
      if (LowPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowPrice);
      if (ImpliedVolatility != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ImpliedVolatility);
      if (Delta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Delta);
      if (EffectiveLeverage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EffectiveLeverage);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stock_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stock);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Issuer != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Issuer);
      }
      if (MaturityTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MaturityTime);
      }
      if (MaturityTimestamp != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MaturityTimestamp);
      }
      if (ListTime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ListTime);
      }
      if (ListTimestamp != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ListTimestamp);
      }
      if (LastTradeTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(LastTradeTime);
      }
      if (LastTradeTimestamp != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(LastTradeTimestamp);
      }
      if (RecoveryPrice != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(RecoveryPrice);
      }
      if (ConversionRatio != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(ConversionRatio);
      }
      if (LotSize != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LotSize);
      }
      if (StrikePrice != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(StrikePrice);
      }
      if (LastClosePrice != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(LastClosePrice);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Name);
      }
      if (CurPrice != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(CurPrice);
      }
      if (PriceChangeVal != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(PriceChangeVal);
      }
      if (ChangeRate != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(ChangeRate);
      }
      if (Status != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Status);
      }
      if (BidPrice != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(BidPrice);
      }
      if (AskPrice != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(AskPrice);
      }
      if (BidVol != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(BidVol);
      }
      if (AskVol != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(AskVol);
      }
      if (Volume != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(Volume);
      }
      if (Turnover != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(Turnover);
      }
      if (Score != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(Score);
      }
      if (Premium != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(Premium);
      }
      if (BreakEvenPoint != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(BreakEvenPoint);
      }
      if (Leverage != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(Leverage);
      }
      if (Ipop != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(Ipop);
      }
      if (PriceRecoveryRatio != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(PriceRecoveryRatio);
      }
      if (ConversionPrice != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(ConversionPrice);
      }
      if (StreetRate != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(StreetRate);
      }
      if (StreetVol != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(StreetVol);
      }
      if (Amplitude != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(Amplitude);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(168, 2);
        output.WriteInt64(IssueSize);
      }
      if (HighPrice != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(HighPrice);
      }
      if (LowPrice != 0D) {
        output.WriteRawTag(193, 2);
        output.WriteDouble(LowPrice);
      }
      if (ImpliedVolatility != 0D) {
        output.WriteRawTag(201, 2);
        output.WriteDouble(ImpliedVolatility);
      }
      if (Delta != 0D) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(Delta);
      }
      if (EffectiveLeverage != 0D) {
        output.WriteRawTag(217, 2);
        output.WriteDouble(EffectiveLeverage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stock);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Issuer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Issuer);
      }
      if (MaturityTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaturityTime);
      }
      if (MaturityTimestamp != 0D) {
        size += 1 + 8;
      }
      if (ListTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListTime);
      }
      if (ListTimestamp != 0D) {
        size += 1 + 8;
      }
      if (LastTradeTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastTradeTime);
      }
      if (LastTradeTimestamp != 0D) {
        size += 1 + 8;
      }
      if (RecoveryPrice != 0D) {
        size += 1 + 8;
      }
      if (ConversionRatio != 0D) {
        size += 1 + 8;
      }
      if (LotSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LotSize);
      }
      if (StrikePrice != 0D) {
        size += 1 + 8;
      }
      if (LastClosePrice != 0D) {
        size += 1 + 8;
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CurPrice != 0D) {
        size += 2 + 8;
      }
      if (PriceChangeVal != 0D) {
        size += 2 + 8;
      }
      if (ChangeRate != 0D) {
        size += 2 + 8;
      }
      if (Status != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (BidPrice != 0D) {
        size += 2 + 8;
      }
      if (AskPrice != 0D) {
        size += 2 + 8;
      }
      if (BidVol != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BidVol);
      }
      if (AskVol != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskVol);
      }
      if (Volume != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (Turnover != 0D) {
        size += 2 + 8;
      }
      if (Score != 0D) {
        size += 2 + 8;
      }
      if (Premium != 0D) {
        size += 2 + 8;
      }
      if (BreakEvenPoint != 0D) {
        size += 2 + 8;
      }
      if (Leverage != 0D) {
        size += 2 + 8;
      }
      if (Ipop != 0D) {
        size += 2 + 8;
      }
      if (PriceRecoveryRatio != 0D) {
        size += 2 + 8;
      }
      if (ConversionPrice != 0D) {
        size += 2 + 8;
      }
      if (StreetRate != 0D) {
        size += 2 + 8;
      }
      if (StreetVol != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StreetVol);
      }
      if (Amplitude != 0D) {
        size += 2 + 8;
      }
      if (IssueSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSize);
      }
      if (HighPrice != 0D) {
        size += 2 + 8;
      }
      if (LowPrice != 0D) {
        size += 2 + 8;
      }
      if (ImpliedVolatility != 0D) {
        size += 2 + 8;
      }
      if (Delta != 0D) {
        size += 2 + 8;
      }
      if (EffectiveLeverage != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarrantData other) {
      if (other == null) {
        return;
      }
      if (other.stock_ != null) {
        if (stock_ == null) {
          Stock = new global::QotCommon.Security();
        }
        Stock.MergeFrom(other.Stock);
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::QotCommon.Security();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Issuer != 0) {
        Issuer = other.Issuer;
      }
      if (other.MaturityTime.Length != 0) {
        MaturityTime = other.MaturityTime;
      }
      if (other.MaturityTimestamp != 0D) {
        MaturityTimestamp = other.MaturityTimestamp;
      }
      if (other.ListTime.Length != 0) {
        ListTime = other.ListTime;
      }
      if (other.ListTimestamp != 0D) {
        ListTimestamp = other.ListTimestamp;
      }
      if (other.LastTradeTime.Length != 0) {
        LastTradeTime = other.LastTradeTime;
      }
      if (other.LastTradeTimestamp != 0D) {
        LastTradeTimestamp = other.LastTradeTimestamp;
      }
      if (other.RecoveryPrice != 0D) {
        RecoveryPrice = other.RecoveryPrice;
      }
      if (other.ConversionRatio != 0D) {
        ConversionRatio = other.ConversionRatio;
      }
      if (other.LotSize != 0) {
        LotSize = other.LotSize;
      }
      if (other.StrikePrice != 0D) {
        StrikePrice = other.StrikePrice;
      }
      if (other.LastClosePrice != 0D) {
        LastClosePrice = other.LastClosePrice;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CurPrice != 0D) {
        CurPrice = other.CurPrice;
      }
      if (other.PriceChangeVal != 0D) {
        PriceChangeVal = other.PriceChangeVal;
      }
      if (other.ChangeRate != 0D) {
        ChangeRate = other.ChangeRate;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.BidPrice != 0D) {
        BidPrice = other.BidPrice;
      }
      if (other.AskPrice != 0D) {
        AskPrice = other.AskPrice;
      }
      if (other.BidVol != 0L) {
        BidVol = other.BidVol;
      }
      if (other.AskVol != 0L) {
        AskVol = other.AskVol;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.Turnover != 0D) {
        Turnover = other.Turnover;
      }
      if (other.Score != 0D) {
        Score = other.Score;
      }
      if (other.Premium != 0D) {
        Premium = other.Premium;
      }
      if (other.BreakEvenPoint != 0D) {
        BreakEvenPoint = other.BreakEvenPoint;
      }
      if (other.Leverage != 0D) {
        Leverage = other.Leverage;
      }
      if (other.Ipop != 0D) {
        Ipop = other.Ipop;
      }
      if (other.PriceRecoveryRatio != 0D) {
        PriceRecoveryRatio = other.PriceRecoveryRatio;
      }
      if (other.ConversionPrice != 0D) {
        ConversionPrice = other.ConversionPrice;
      }
      if (other.StreetRate != 0D) {
        StreetRate = other.StreetRate;
      }
      if (other.StreetVol != 0L) {
        StreetVol = other.StreetVol;
      }
      if (other.Amplitude != 0D) {
        Amplitude = other.Amplitude;
      }
      if (other.IssueSize != 0L) {
        IssueSize = other.IssueSize;
      }
      if (other.HighPrice != 0D) {
        HighPrice = other.HighPrice;
      }
      if (other.LowPrice != 0D) {
        LowPrice = other.LowPrice;
      }
      if (other.ImpliedVolatility != 0D) {
        ImpliedVolatility = other.ImpliedVolatility;
      }
      if (other.Delta != 0D) {
        Delta = other.Delta;
      }
      if (other.EffectiveLeverage != 0D) {
        EffectiveLeverage = other.EffectiveLeverage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stock_ == null) {
              Stock = new global::QotCommon.Security();
            }
            input.ReadMessage(Stock);
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::QotCommon.Security();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Issuer = input.ReadInt32();
            break;
          }
          case 42: {
            MaturityTime = input.ReadString();
            break;
          }
          case 49: {
            MaturityTimestamp = input.ReadDouble();
            break;
          }
          case 58: {
            ListTime = input.ReadString();
            break;
          }
          case 65: {
            ListTimestamp = input.ReadDouble();
            break;
          }
          case 74: {
            LastTradeTime = input.ReadString();
            break;
          }
          case 81: {
            LastTradeTimestamp = input.ReadDouble();
            break;
          }
          case 89: {
            RecoveryPrice = input.ReadDouble();
            break;
          }
          case 97: {
            ConversionRatio = input.ReadDouble();
            break;
          }
          case 104: {
            LotSize = input.ReadInt32();
            break;
          }
          case 113: {
            StrikePrice = input.ReadDouble();
            break;
          }
          case 121: {
            LastClosePrice = input.ReadDouble();
            break;
          }
          case 130: {
            Name = input.ReadString();
            break;
          }
          case 137: {
            CurPrice = input.ReadDouble();
            break;
          }
          case 145: {
            PriceChangeVal = input.ReadDouble();
            break;
          }
          case 153: {
            ChangeRate = input.ReadDouble();
            break;
          }
          case 160: {
            Status = input.ReadInt32();
            break;
          }
          case 169: {
            BidPrice = input.ReadDouble();
            break;
          }
          case 177: {
            AskPrice = input.ReadDouble();
            break;
          }
          case 184: {
            BidVol = input.ReadInt64();
            break;
          }
          case 192: {
            AskVol = input.ReadInt64();
            break;
          }
          case 200: {
            Volume = input.ReadInt64();
            break;
          }
          case 209: {
            Turnover = input.ReadDouble();
            break;
          }
          case 217: {
            Score = input.ReadDouble();
            break;
          }
          case 225: {
            Premium = input.ReadDouble();
            break;
          }
          case 233: {
            BreakEvenPoint = input.ReadDouble();
            break;
          }
          case 241: {
            Leverage = input.ReadDouble();
            break;
          }
          case 249: {
            Ipop = input.ReadDouble();
            break;
          }
          case 257: {
            PriceRecoveryRatio = input.ReadDouble();
            break;
          }
          case 265: {
            ConversionPrice = input.ReadDouble();
            break;
          }
          case 273: {
            StreetRate = input.ReadDouble();
            break;
          }
          case 280: {
            StreetVol = input.ReadInt64();
            break;
          }
          case 289: {
            Amplitude = input.ReadDouble();
            break;
          }
          case 296: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 313: {
            HighPrice = input.ReadDouble();
            break;
          }
          case 321: {
            LowPrice = input.ReadDouble();
            break;
          }
          case 329: {
            ImpliedVolatility = input.ReadDouble();
            break;
          }
          case 337: {
            Delta = input.ReadDouble();
            break;
          }
          case 345: {
            EffectiveLeverage = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C : pb::IMessage<S2C> {
    private static readonly pb::MessageParser<S2C> _parser = new pb::MessageParser<S2C>(() => new S2C());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetWarrant.QotGetWarrantReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C(S2C other) : this() {
      lastPage_ = other.lastPage_;
      allCount_ = other.allCount_;
      warrantDataList_ = other.warrantDataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C Clone() {
      return new S2C(this);
    }

    /// <summary>Field number for the "lastPage" field.</summary>
    public const int LastPageFieldNumber = 1;
    private bool lastPage_;
    /// <summary>
    ///是否最后一页了,false:非最后一页,还有窝轮记录未返回; true:已是最后一页
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LastPage {
      get { return lastPage_; }
      set {
        lastPage_ = value;
      }
    }

    /// <summary>Field number for the "allCount" field.</summary>
    public const int AllCountFieldNumber = 2;
    private int allCount_;
    /// <summary>
    ///该条件请求所有数据的个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllCount {
      get { return allCount_; }
      set {
        allCount_ = value;
      }
    }

    /// <summary>Field number for the "warrantDataList" field.</summary>
    public const int WarrantDataListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::QotGetWarrant.WarrantData> _repeated_warrantDataList_codec
        = pb::FieldCodec.ForMessage(26, global::QotGetWarrant.WarrantData.Parser);
    private readonly pbc::RepeatedField<global::QotGetWarrant.WarrantData> warrantDataList_ = new pbc::RepeatedField<global::QotGetWarrant.WarrantData>();
    /// <summary>
    ///窝轮数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::QotGetWarrant.WarrantData> WarrantDataList {
      get { return warrantDataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastPage != other.LastPage) return false;
      if (AllCount != other.AllCount) return false;
      if(!warrantDataList_.Equals(other.warrantDataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastPage != false) hash ^= LastPage.GetHashCode();
      if (AllCount != 0) hash ^= AllCount.GetHashCode();
      hash ^= warrantDataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastPage != false) {
        output.WriteRawTag(8);
        output.WriteBool(LastPage);
      }
      if (AllCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AllCount);
      }
      warrantDataList_.WriteTo(output, _repeated_warrantDataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastPage != false) {
        size += 1 + 1;
      }
      if (AllCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllCount);
      }
      size += warrantDataList_.CalculateSize(_repeated_warrantDataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C other) {
      if (other == null) {
        return;
      }
      if (other.LastPage != false) {
        LastPage = other.LastPage;
      }
      if (other.AllCount != 0) {
        AllCount = other.AllCount;
      }
      warrantDataList_.Add(other.warrantDataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastPage = input.ReadBool();
            break;
          }
          case 16: {
            AllCount = input.ReadInt32();
            break;
          }
          case 26: {
            warrantDataList_.AddEntriesFrom(input, _repeated_warrantDataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetWarrant.QotGetWarrantReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      c2S_ = other.c2S_ != null ? other.c2S_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "c2s" field.</summary>
    public const int C2SFieldNumber = 1;
    private global::QotGetWarrant.C2S c2S_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotGetWarrant.C2S C2S {
      get { return c2S_; }
      set {
        c2S_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(C2S, other.C2S)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (c2S_ != null) hash ^= C2S.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (c2S_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(C2S);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (c2S_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(C2S);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.c2S_ != null) {
        if (c2S_ == null) {
          C2S = new global::QotGetWarrant.C2S();
        }
        C2S.MergeFrom(other.C2S);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (c2S_ == null) {
              C2S = new global::QotGetWarrant.C2S();
            }
            input.ReadMessage(C2S);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QotGetWarrant.QotGetWarrantReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      retType_ = other.retType_;
      retMsg_ = other.retMsg_;
      errCode_ = other.errCode_;
      s2C_ = other.s2C_ != null ? other.s2C_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "retType" field.</summary>
    public const int RetTypeFieldNumber = 1;
    private int retType_;
    /// <summary>
    ///RetType,返回结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetType {
      get { return retType_; }
      set {
        retType_ = value;
      }
    }

    /// <summary>Field number for the "retMsg" field.</summary>
    public const int RetMsgFieldNumber = 2;
    private string retMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RetMsg {
      get { return retMsg_; }
      set {
        retMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 3;
    private int errCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "s2c" field.</summary>
    public const int S2CFieldNumber = 4;
    private global::QotGetWarrant.S2C s2C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QotGetWarrant.S2C S2C {
      get { return s2C_; }
      set {
        s2C_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetType != other.RetType) return false;
      if (RetMsg != other.RetMsg) return false;
      if (ErrCode != other.ErrCode) return false;
      if (!object.Equals(S2C, other.S2C)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RetType != 0) hash ^= RetType.GetHashCode();
      if (RetMsg.Length != 0) hash ^= RetMsg.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (s2C_ != null) hash ^= S2C.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RetType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetType);
      }
      if (RetMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RetMsg);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ErrCode);
      }
      if (s2C_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(S2C);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetType);
      }
      if (RetMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RetMsg);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (s2C_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(S2C);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.RetType != 0) {
        RetType = other.RetType;
      }
      if (other.RetMsg.Length != 0) {
        RetMsg = other.RetMsg;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.s2C_ != null) {
        if (s2C_ == null) {
          S2C = new global::QotGetWarrant.S2C();
        }
        S2C.MergeFrom(other.S2C);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetType = input.ReadInt32();
            break;
          }
          case 18: {
            RetMsg = input.ReadString();
            break;
          }
          case 24: {
            ErrCode = input.ReadInt32();
            break;
          }
          case 34: {
            if (s2C_ == null) {
              S2C = new global::QotGetWarrant.S2C();
            }
            input.ReadMessage(S2C);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
